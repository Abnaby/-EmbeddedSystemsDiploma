
chkDrivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001c0e  00001ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800084  00800084  00001cc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a1  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6c  00000000  00000000  0000355d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ce  00000000  00000000  00003fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00005498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac9  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  000064c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007006  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 0c 	call	0x1816	; 0x1816 <main>
      8a:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_voidSetPinDirection>:
	GPIO_PIND = CLR ;
	
}

void GPIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8PinDirection)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_voidSetPinDirection+0x6>
      98:	1f 92       	push	r1
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	88 30       	cpi	r24, 0x08	; 8
      a8:	08 f0       	brcs	.+2      	; 0xac <GPIO_voidSetPinDirection+0x1a>
      aa:	f5 c1       	rjmp	.+1002   	; 0x496 <__stack+0x37>
	{
		switch(copy_u8PortId)
      ac:	89 81       	ldd	r24, Y+1	; 0x01
      ae:	88 2f       	mov	r24, r24
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	81 30       	cpi	r24, 0x01	; 1
      b4:	91 05       	cpc	r25, r1
      b6:	09 f4       	brne	.+2      	; 0xba <GPIO_voidSetPinDirection+0x28>
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <GPIO_voidSetPinDirection+0x134>
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	91 05       	cpc	r25, r1
      be:	1c f4       	brge	.+6      	; 0xc6 <GPIO_voidSetPinDirection+0x34>
      c0:	89 2b       	or	r24, r25
      c2:	49 f0       	breq	.+18     	; 0xd6 <GPIO_voidSetPinDirection+0x44>
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
      c4:	e8 c1       	rjmp	.+976    	; 0x496 <__stack+0x37>

void GPIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8PinDirection)
{
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
      c6:	82 30       	cpi	r24, 0x02	; 2
      c8:	91 05       	cpc	r25, r1
      ca:	09 f4       	brne	.+2      	; 0xce <GPIO_voidSetPinDirection+0x3c>
      cc:	f4 c0       	rjmp	.+488    	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
      ce:	03 97       	sbiw	r24, 0x03	; 3
      d0:	09 f4       	brne	.+2      	; 0xd4 <GPIO_voidSetPinDirection+0x42>
      d2:	69 c1       	rjmp	.+722    	; 0x3a6 <__EEPROM_REGION_LENGTH__+0x1a6>
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
      d4:	e0 c1       	rjmp	.+960    	; 0x496 <__stack+0x37>
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
		{
			case PORTA :
				switch(copy_u8PinDirection)
      d6:	8b 81       	ldd	r24, Y+3	; 0x03
      d8:	88 2f       	mov	r24, r24
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	91 05       	cpc	r25, r1
      e0:	09 f4       	brne	.+2      	; 0xe4 <GPIO_voidSetPinDirection+0x52>
      e2:	5b c0       	rjmp	.+182    	; 0x19a <GPIO_voidSetPinDirection+0x108>
      e4:	82 30       	cpi	r24, 0x02	; 2
      e6:	91 05       	cpc	r25, r1
      e8:	71 f1       	breq	.+92     	; 0x146 <GPIO_voidSetPinDirection+0xb4>
      ea:	89 2b       	or	r24, r25
      ec:	09 f0       	breq	.+2      	; 0xf0 <GPIO_voidSetPinDirection+0x5e>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRA,copy_u8PinNumber);
						break;
					default:	break ;
      ee:	6a c0       	rjmp	.+212    	; 0x1c4 <GPIO_voidSetPinDirection+0x132>
			case PORTA :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRA,copy_u8PinNumber);
      f0:	8a e3       	ldi	r24, 0x3A	; 58
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a e3       	ldi	r18, 0x3A	; 58
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	62 2f       	mov	r22, r18
      fe:	2a 81       	ldd	r18, Y+2	; 0x02
     100:	42 2f       	mov	r20, r18
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	21 e0       	ldi	r18, 0x01	; 1
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	02 c0       	rjmp	.+4      	; 0x10e <GPIO_voidSetPinDirection+0x7c>
     10a:	22 0f       	add	r18, r18
     10c:	33 1f       	adc	r19, r19
     10e:	4a 95       	dec	r20
     110:	e2 f7       	brpl	.-8      	; 0x10a <GPIO_voidSetPinDirection+0x78>
     112:	20 95       	com	r18
     114:	26 23       	and	r18, r22
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
     11a:	8b e3       	ldi	r24, 0x3B	; 59
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	2b e3       	ldi	r18, 0x3B	; 59
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	62 2f       	mov	r22, r18
     128:	2a 81       	ldd	r18, Y+2	; 0x02
     12a:	42 2f       	mov	r20, r18
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	02 c0       	rjmp	.+4      	; 0x138 <GPIO_voidSetPinDirection+0xa6>
     134:	22 0f       	add	r18, r18
     136:	33 1f       	adc	r19, r19
     138:	4a 95       	dec	r20
     13a:	e2 f7       	brpl	.-8      	; 0x134 <GPIO_voidSetPinDirection+0xa2>
     13c:	20 95       	com	r18
     13e:	26 23       	and	r18, r22
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
						break;
     144:	3f c0       	rjmp	.+126    	; 0x1c4 <GPIO_voidSetPinDirection+0x132>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRA,copy_u8PinNumber);
     146:	8a e3       	ldi	r24, 0x3A	; 58
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	2a e3       	ldi	r18, 0x3A	; 58
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	62 2f       	mov	r22, r18
     154:	2a 81       	ldd	r18, Y+2	; 0x02
     156:	42 2f       	mov	r20, r18
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <GPIO_voidSetPinDirection+0xd2>
     160:	22 0f       	add	r18, r18
     162:	33 1f       	adc	r19, r19
     164:	4a 95       	dec	r20
     166:	e2 f7       	brpl	.-8      	; 0x160 <GPIO_voidSetPinDirection+0xce>
     168:	20 95       	com	r18
     16a:	26 23       	and	r18, r22
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTA,copy_u8PinNumber);
     170:	8b e3       	ldi	r24, 0x3B	; 59
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	2b e3       	ldi	r18, 0x3B	; 59
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	62 2f       	mov	r22, r18
     17e:	2a 81       	ldd	r18, Y+2	; 0x02
     180:	42 2f       	mov	r20, r18
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	02 c0       	rjmp	.+4      	; 0x18e <GPIO_voidSetPinDirection+0xfc>
     18a:	22 0f       	add	r18, r18
     18c:	33 1f       	adc	r19, r19
     18e:	4a 95       	dec	r20
     190:	e2 f7       	brpl	.-8      	; 0x18a <GPIO_voidSetPinDirection+0xf8>
     192:	26 2b       	or	r18, r22
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18
						break;
     198:	15 c0       	rjmp	.+42     	; 0x1c4 <GPIO_voidSetPinDirection+0x132>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRA,copy_u8PinNumber);
     19a:	8a e3       	ldi	r24, 0x3A	; 58
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	2a e3       	ldi	r18, 0x3A	; 58
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	f9 01       	movw	r30, r18
     1a4:	20 81       	ld	r18, Z
     1a6:	62 2f       	mov	r22, r18
     1a8:	2a 81       	ldd	r18, Y+2	; 0x02
     1aa:	42 2f       	mov	r20, r18
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <GPIO_voidSetPinDirection+0x126>
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	4a 95       	dec	r20
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <GPIO_voidSetPinDirection+0x122>
     1bc:	26 2b       	or	r18, r22
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
						break;
     1c2:	00 00       	nop
					default:	break ;
				}
				break ;
     1c4:	68 c1       	rjmp	.+720    	; 0x496 <__stack+0x37>
			case PORTB :
				switch(copy_u8PinDirection)
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	91 05       	cpc	r25, r1
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <GPIO_voidSetPinDirection+0x142>
     1d2:	5b c0       	rjmp	.+182    	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
     1d4:	82 30       	cpi	r24, 0x02	; 2
     1d6:	91 05       	cpc	r25, r1
     1d8:	71 f1       	breq	.+92     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
     1da:	89 2b       	or	r24, r25
     1dc:	09 f0       	breq	.+2      	; 0x1e0 <GPIO_voidSetPinDirection+0x14e>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRB,copy_u8PinNumber);
						break;
					default:	break ;
     1de:	6a c0       	rjmp	.+212    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			case PORTB :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRB,copy_u8PinNumber);
     1e0:	87 e3       	ldi	r24, 0x37	; 55
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	27 e3       	ldi	r18, 0x37	; 55
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	62 2f       	mov	r22, r18
     1ee:	2a 81       	ldd	r18, Y+2	; 0x02
     1f0:	42 2f       	mov	r20, r18
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <GPIO_voidSetPinDirection+0x16c>
     1fa:	22 0f       	add	r18, r18
     1fc:	33 1f       	adc	r19, r19
     1fe:	4a 95       	dec	r20
     200:	e2 f7       	brpl	.-8      	; 0x1fa <GPIO_voidSetPinDirection+0x168>
     202:	20 95       	com	r18
     204:	26 23       	and	r18, r22
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
     20a:	88 e3       	ldi	r24, 0x38	; 56
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	28 e3       	ldi	r18, 0x38	; 56
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	f9 01       	movw	r30, r18
     214:	20 81       	ld	r18, Z
     216:	62 2f       	mov	r22, r18
     218:	2a 81       	ldd	r18, Y+2	; 0x02
     21a:	42 2f       	mov	r20, r18
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	02 c0       	rjmp	.+4      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
     224:	22 0f       	add	r18, r18
     226:	33 1f       	adc	r19, r19
     228:	4a 95       	dec	r20
     22a:	e2 f7       	brpl	.-8      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
     22c:	20 95       	com	r18
     22e:	26 23       	and	r18, r22
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
						break;
     234:	3f c0       	rjmp	.+126    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRB,copy_u8PinNumber);
     236:	87 e3       	ldi	r24, 0x37	; 55
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	27 e3       	ldi	r18, 0x37	; 55
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	f9 01       	movw	r30, r18
     240:	20 81       	ld	r18, Z
     242:	62 2f       	mov	r22, r18
     244:	2a 81       	ldd	r18, Y+2	; 0x02
     246:	42 2f       	mov	r20, r18
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	4a 95       	dec	r20
     256:	e2 f7       	brpl	.-8      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
     258:	20 95       	com	r18
     25a:	26 23       	and	r18, r22
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTB,copy_u8PinNumber);
     260:	88 e3       	ldi	r24, 0x38	; 56
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	28 e3       	ldi	r18, 0x38	; 56
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	f9 01       	movw	r30, r18
     26a:	20 81       	ld	r18, Z
     26c:	62 2f       	mov	r22, r18
     26e:	2a 81       	ldd	r18, Y+2	; 0x02
     270:	42 2f       	mov	r20, r18
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	4a 95       	dec	r20
     280:	e2 f7       	brpl	.-8      	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
     282:	26 2b       	or	r18, r22
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18
						break;
     288:	15 c0       	rjmp	.+42     	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRB,copy_u8PinNumber);
     28a:	87 e3       	ldi	r24, 0x37	; 55
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	27 e3       	ldi	r18, 0x37	; 55
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	62 2f       	mov	r22, r18
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	42 2f       	mov	r20, r18
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	4a 95       	dec	r20
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
     2ac:	26 2b       	or	r18, r22
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
						break;
     2b2:	00 00       	nop
					default:	break ;
				}	
				break ;
     2b4:	f0 c0       	rjmp	.+480    	; 0x496 <__stack+0x37>
			case PORTC :
				switch(copy_u8PinDirection)
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	91 05       	cpc	r25, r1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
     2c2:	5b c0       	rjmp	.+182    	; 0x37a <__EEPROM_REGION_LENGTH__+0x17a>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	91 05       	cpc	r25, r1
     2c8:	71 f1       	breq	.+92     	; 0x326 <__EEPROM_REGION_LENGTH__+0x126>
     2ca:	89 2b       	or	r24, r25
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <__EEPROM_REGION_LENGTH__+0xd0>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRC,copy_u8PinNumber);
						break;
					default:	break ;
     2ce:	6a c0       	rjmp	.+212    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PORTC :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRC,copy_u8PinNumber);
     2d0:	84 e3       	ldi	r24, 0x34	; 52
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	24 e3       	ldi	r18, 0x34	; 52
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	62 2f       	mov	r22, r18
     2de:	2a 81       	ldd	r18, Y+2	; 0x02
     2e0:	42 2f       	mov	r20, r18
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	4a 95       	dec	r20
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
     2f2:	20 95       	com	r18
     2f4:	26 23       	and	r18, r22
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
     2fa:	85 e3       	ldi	r24, 0x35	; 53
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	25 e3       	ldi	r18, 0x35	; 53
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	f9 01       	movw	r30, r18
     304:	20 81       	ld	r18, Z
     306:	62 2f       	mov	r22, r18
     308:	2a 81       	ldd	r18, Y+2	; 0x02
     30a:	42 2f       	mov	r20, r18
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <__EEPROM_REGION_LENGTH__+0x118>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	4a 95       	dec	r20
     31a:	e2 f7       	brpl	.-8      	; 0x314 <__EEPROM_REGION_LENGTH__+0x114>
     31c:	20 95       	com	r18
     31e:	26 23       	and	r18, r22
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
						break;
     324:	3f c0       	rjmp	.+126    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRC,copy_u8PinNumber);
     326:	84 e3       	ldi	r24, 0x34	; 52
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	24 e3       	ldi	r18, 0x34	; 52
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	62 2f       	mov	r22, r18
     334:	2a 81       	ldd	r18, Y+2	; 0x02
     336:	42 2f       	mov	r20, r18
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	4a 95       	dec	r20
     346:	e2 f7       	brpl	.-8      	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
     348:	20 95       	com	r18
     34a:	26 23       	and	r18, r22
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTC,copy_u8PinNumber);
     350:	85 e3       	ldi	r24, 0x35	; 53
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	25 e3       	ldi	r18, 0x35	; 53
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	62 2f       	mov	r22, r18
     35e:	2a 81       	ldd	r18, Y+2	; 0x02
     360:	42 2f       	mov	r20, r18
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	02 c0       	rjmp	.+4      	; 0x36e <__EEPROM_REGION_LENGTH__+0x16e>
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	4a 95       	dec	r20
     370:	e2 f7       	brpl	.-8      	; 0x36a <__EEPROM_REGION_LENGTH__+0x16a>
     372:	26 2b       	or	r18, r22
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18
						break;
     378:	15 c0       	rjmp	.+42     	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRC,copy_u8PinNumber);
     37a:	84 e3       	ldi	r24, 0x34	; 52
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	24 e3       	ldi	r18, 0x34	; 52
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	f9 01       	movw	r30, r18
     384:	20 81       	ld	r18, Z
     386:	62 2f       	mov	r22, r18
     388:	2a 81       	ldd	r18, Y+2	; 0x02
     38a:	42 2f       	mov	r20, r18
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <__EEPROM_REGION_LENGTH__+0x198>
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	4a 95       	dec	r20
     39a:	e2 f7       	brpl	.-8      	; 0x394 <__EEPROM_REGION_LENGTH__+0x194>
     39c:	26 2b       	or	r18, r22
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
						break;
     3a2:	00 00       	nop
					default:	break ;
				}
				break ;
     3a4:	78 c0       	rjmp	.+240    	; 0x496 <__stack+0x37>
			case PORTD :
				switch(copy_u8PinDirection)
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	91 05       	cpc	r25, r1
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <__EEPROM_REGION_LENGTH__+0x1b4>
     3b2:	5b c0       	rjmp	.+182    	; 0x46a <__stack+0xb>
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	91 05       	cpc	r25, r1
     3b8:	71 f1       	breq	.+92     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     3ba:	89 2b       	or	r24, r25
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <__EEPROM_REGION_LENGTH__+0x1c0>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
     3be:	6a c0       	rjmp	.+212    	; 0x494 <__stack+0x35>
			case PORTD :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRD,copy_u8PinNumber);
     3c0:	81 e3       	ldi	r24, 0x31	; 49
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	21 e3       	ldi	r18, 0x31	; 49
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	62 2f       	mov	r22, r18
     3ce:	2a 81       	ldd	r18, Y+2	; 0x02
     3d0:	42 2f       	mov	r20, r18
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <__EEPROM_REGION_LENGTH__+0x1de>
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	4a 95       	dec	r20
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <__EEPROM_REGION_LENGTH__+0x1da>
     3e2:	20 95       	com	r18
     3e4:	26 23       	and	r18, r22
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
     3ea:	82 e3       	ldi	r24, 0x32	; 50
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	22 e3       	ldi	r18, 0x32	; 50
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	62 2f       	mov	r22, r18
     3f8:	2a 81       	ldd	r18, Y+2	; 0x02
     3fa:	42 2f       	mov	r20, r18
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	02 c0       	rjmp	.+4      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	4a 95       	dec	r20
     40a:	e2 f7       	brpl	.-8      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     40c:	20 95       	com	r18
     40e:	26 23       	and	r18, r22
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
						break;
     414:	3f c0       	rjmp	.+126    	; 0x494 <__stack+0x35>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRD,copy_u8PinNumber);
     416:	81 e3       	ldi	r24, 0x31	; 49
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	21 e3       	ldi	r18, 0x31	; 49
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	f9 01       	movw	r30, r18
     420:	20 81       	ld	r18, Z
     422:	62 2f       	mov	r22, r18
     424:	2a 81       	ldd	r18, Y+2	; 0x02
     426:	42 2f       	mov	r20, r18
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     430:	22 0f       	add	r18, r18
     432:	33 1f       	adc	r19, r19
     434:	4a 95       	dec	r20
     436:	e2 f7       	brpl	.-8      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
     438:	20 95       	com	r18
     43a:	26 23       	and	r18, r22
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTD,copy_u8PinNumber);
     440:	82 e3       	ldi	r24, 0x32	; 50
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	22 e3       	ldi	r18, 0x32	; 50
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	f9 01       	movw	r30, r18
     44a:	20 81       	ld	r18, Z
     44c:	62 2f       	mov	r22, r18
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	42 2f       	mov	r20, r18
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	4a 95       	dec	r20
     460:	e2 f7       	brpl	.-8      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
     462:	26 2b       	or	r18, r22
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
						break;
     468:	15 c0       	rjmp	.+42     	; 0x494 <__stack+0x35>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
     46a:	81 e3       	ldi	r24, 0x31	; 49
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	21 e3       	ldi	r18, 0x31	; 49
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	f9 01       	movw	r30, r18
     474:	20 81       	ld	r18, Z
     476:	62 2f       	mov	r22, r18
     478:	2a 81       	ldd	r18, Y+2	; 0x02
     47a:	42 2f       	mov	r20, r18
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <__stack+0x29>
     484:	22 0f       	add	r18, r18
     486:	33 1f       	adc	r19, r19
     488:	4a 95       	dec	r20
     48a:	e2 f7       	brpl	.-8      	; 0x484 <__stack+0x25>
     48c:	26 2b       	or	r18, r22
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
						break;
     492:	00 00       	nop
					default:	break ;
				}
				break ;
     494:	00 00       	nop
	}
	else
	{
		//<!TODO> ERROR STATE
	}
}
     496:	00 00       	nop
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8Value)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <GPIO_voidSetPinValue+0x6>
     4aa:	1f 92       	push	r1
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	6a 83       	std	Y+2, r22	; 0x02
     4b4:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	88 30       	cpi	r24, 0x08	; 8
     4ba:	08 f0       	brcs	.+2      	; 0x4be <GPIO_voidSetPinValue+0x1a>
     4bc:	e5 c0       	rjmp	.+458    	; 0x688 <GPIO_voidSetPinValue+0x1e4>
	{
		switch(copy_u8PortId)
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	91 05       	cpc	r25, r1
     4c8:	09 f4       	brne	.+2      	; 0x4cc <GPIO_voidSetPinValue+0x28>
     4ca:	42 c0       	rjmp	.+132    	; 0x550 <GPIO_voidSetPinValue+0xac>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	91 05       	cpc	r25, r1
     4d0:	1c f4       	brge	.+6      	; 0x4d8 <GPIO_voidSetPinValue+0x34>
     4d2:	89 2b       	or	r24, r25
     4d4:	49 f0       	breq	.+18     	; 0x4e8 <GPIO_voidSetPinValue+0x44>
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
     4d6:	d8 c0       	rjmp	.+432    	; 0x688 <GPIO_voidSetPinValue+0x1e4>
}
void GPIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8Value)
{
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
     4d8:	82 30       	cpi	r24, 0x02	; 2
     4da:	91 05       	cpc	r25, r1
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <GPIO_voidSetPinValue+0x3c>
     4de:	6c c0       	rjmp	.+216    	; 0x5b8 <GPIO_voidSetPinValue+0x114>
     4e0:	03 97       	sbiw	r24, 0x03	; 3
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <GPIO_voidSetPinValue+0x42>
     4e4:	9d c0       	rjmp	.+314    	; 0x620 <GPIO_voidSetPinValue+0x17c>
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
     4e6:	d0 c0       	rjmp	.+416    	; 0x688 <GPIO_voidSetPinValue+0x1e4>
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
		{
			case PORTA :
				switch(copy_u8Value)
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	00 97       	sbiw	r24, 0x00	; 0
     4f0:	c1 f0       	breq	.+48     	; 0x522 <GPIO_voidSetPinValue+0x7e>
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <GPIO_voidSetPinValue+0x54>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
						break;
					default:	break ;
     4f6:	2b c0       	rjmp	.+86     	; 0x54e <GPIO_voidSetPinValue+0xaa>
			case PORTA :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTA,copy_u8PinNumber);
     4f8:	8b e3       	ldi	r24, 0x3B	; 59
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	2b e3       	ldi	r18, 0x3B	; 59
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	62 2f       	mov	r22, r18
     506:	2a 81       	ldd	r18, Y+2	; 0x02
     508:	42 2f       	mov	r20, r18
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <GPIO_voidSetPinValue+0x72>
     512:	22 0f       	add	r18, r18
     514:	33 1f       	adc	r19, r19
     516:	4a 95       	dec	r20
     518:	e2 f7       	brpl	.-8      	; 0x512 <GPIO_voidSetPinValue+0x6e>
     51a:	26 2b       	or	r18, r22
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
						break;
     520:	16 c0       	rjmp	.+44     	; 0x54e <GPIO_voidSetPinValue+0xaa>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
     522:	8b e3       	ldi	r24, 0x3B	; 59
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	2b e3       	ldi	r18, 0x3B	; 59
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	62 2f       	mov	r22, r18
     530:	2a 81       	ldd	r18, Y+2	; 0x02
     532:	42 2f       	mov	r20, r18
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	02 c0       	rjmp	.+4      	; 0x540 <GPIO_voidSetPinValue+0x9c>
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	4a 95       	dec	r20
     542:	e2 f7       	brpl	.-8      	; 0x53c <GPIO_voidSetPinValue+0x98>
     544:	20 95       	com	r18
     546:	26 23       	and	r18, r22
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
						break;
     54c:	00 00       	nop
					default:	break ;
				}
				break ;
     54e:	9c c0       	rjmp	.+312    	; 0x688 <GPIO_voidSetPinValue+0x1e4>
			case PORTB : 
				switch(copy_u8Value)
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	88 2f       	mov	r24, r24
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	c1 f0       	breq	.+48     	; 0x58a <GPIO_voidSetPinValue+0xe6>
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	09 f0       	breq	.+2      	; 0x560 <GPIO_voidSetPinValue+0xbc>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
						break;
					default:	break ;
     55e:	2b c0       	rjmp	.+86     	; 0x5b6 <GPIO_voidSetPinValue+0x112>
			case PORTB : 
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTB,copy_u8PinNumber);
     560:	88 e3       	ldi	r24, 0x38	; 56
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	28 e3       	ldi	r18, 0x38	; 56
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	62 2f       	mov	r22, r18
     56e:	2a 81       	ldd	r18, Y+2	; 0x02
     570:	42 2f       	mov	r20, r18
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	21 e0       	ldi	r18, 0x01	; 1
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	02 c0       	rjmp	.+4      	; 0x57e <GPIO_voidSetPinValue+0xda>
     57a:	22 0f       	add	r18, r18
     57c:	33 1f       	adc	r19, r19
     57e:	4a 95       	dec	r20
     580:	e2 f7       	brpl	.-8      	; 0x57a <GPIO_voidSetPinValue+0xd6>
     582:	26 2b       	or	r18, r22
     584:	fc 01       	movw	r30, r24
     586:	20 83       	st	Z, r18
						break;
     588:	16 c0       	rjmp	.+44     	; 0x5b6 <GPIO_voidSetPinValue+0x112>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
     58a:	88 e3       	ldi	r24, 0x38	; 56
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	28 e3       	ldi	r18, 0x38	; 56
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	20 81       	ld	r18, Z
     596:	62 2f       	mov	r22, r18
     598:	2a 81       	ldd	r18, Y+2	; 0x02
     59a:	42 2f       	mov	r20, r18
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <GPIO_voidSetPinValue+0x104>
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	4a 95       	dec	r20
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <GPIO_voidSetPinValue+0x100>
     5ac:	20 95       	com	r18
     5ae:	26 23       	and	r18, r22
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
						break;
     5b4:	00 00       	nop
					default:	break ;
				}
				break ;
     5b6:	68 c0       	rjmp	.+208    	; 0x688 <GPIO_voidSetPinValue+0x1e4>
			case PORTC :
				switch(copy_u8Value)
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	88 2f       	mov	r24, r24
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	c1 f0       	breq	.+48     	; 0x5f2 <GPIO_voidSetPinValue+0x14e>
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <GPIO_voidSetPinValue+0x124>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
						break;
					default:	break ;
     5c6:	2b c0       	rjmp	.+86     	; 0x61e <GPIO_voidSetPinValue+0x17a>
			case PORTC :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTC,copy_u8PinNumber);
     5c8:	85 e3       	ldi	r24, 0x35	; 53
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	25 e3       	ldi	r18, 0x35	; 53
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 81       	ld	r18, Z
     5d4:	62 2f       	mov	r22, r18
     5d6:	2a 81       	ldd	r18, Y+2	; 0x02
     5d8:	42 2f       	mov	r20, r18
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <GPIO_voidSetPinValue+0x142>
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	4a 95       	dec	r20
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <GPIO_voidSetPinValue+0x13e>
     5ea:	26 2b       	or	r18, r22
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
						break;
     5f0:	16 c0       	rjmp	.+44     	; 0x61e <GPIO_voidSetPinValue+0x17a>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
     5f2:	85 e3       	ldi	r24, 0x35	; 53
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	25 e3       	ldi	r18, 0x35	; 53
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	62 2f       	mov	r22, r18
     600:	2a 81       	ldd	r18, Y+2	; 0x02
     602:	42 2f       	mov	r20, r18
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	02 c0       	rjmp	.+4      	; 0x610 <GPIO_voidSetPinValue+0x16c>
     60c:	22 0f       	add	r18, r18
     60e:	33 1f       	adc	r19, r19
     610:	4a 95       	dec	r20
     612:	e2 f7       	brpl	.-8      	; 0x60c <GPIO_voidSetPinValue+0x168>
     614:	20 95       	com	r18
     616:	26 23       	and	r18, r22
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
						break;
     61c:	00 00       	nop
					default:	break ;
				}
				break ;
     61e:	34 c0       	rjmp	.+104    	; 0x688 <GPIO_voidSetPinValue+0x1e4>
			case PORTD :
				switch(copy_u8Value)
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	c1 f0       	breq	.+48     	; 0x65a <GPIO_voidSetPinValue+0x1b6>
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	09 f0       	breq	.+2      	; 0x630 <GPIO_voidSetPinValue+0x18c>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
     62e:	2b c0       	rjmp	.+86     	; 0x686 <GPIO_voidSetPinValue+0x1e2>
			case PORTD :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTD,copy_u8PinNumber);
     630:	82 e3       	ldi	r24, 0x32	; 50
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	22 e3       	ldi	r18, 0x32	; 50
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	f9 01       	movw	r30, r18
     63a:	20 81       	ld	r18, Z
     63c:	62 2f       	mov	r22, r18
     63e:	2a 81       	ldd	r18, Y+2	; 0x02
     640:	42 2f       	mov	r20, r18
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <GPIO_voidSetPinValue+0x1aa>
     64a:	22 0f       	add	r18, r18
     64c:	33 1f       	adc	r19, r19
     64e:	4a 95       	dec	r20
     650:	e2 f7       	brpl	.-8      	; 0x64a <GPIO_voidSetPinValue+0x1a6>
     652:	26 2b       	or	r18, r22
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
						break;
     658:	16 c0       	rjmp	.+44     	; 0x686 <GPIO_voidSetPinValue+0x1e2>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
     65a:	82 e3       	ldi	r24, 0x32	; 50
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	22 e3       	ldi	r18, 0x32	; 50
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	62 2f       	mov	r22, r18
     668:	2a 81       	ldd	r18, Y+2	; 0x02
     66a:	42 2f       	mov	r20, r18
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	02 c0       	rjmp	.+4      	; 0x678 <GPIO_voidSetPinValue+0x1d4>
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	4a 95       	dec	r20
     67a:	e2 f7       	brpl	.-8      	; 0x674 <GPIO_voidSetPinValue+0x1d0>
     67c:	20 95       	com	r18
     67e:	26 23       	and	r18, r22
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18
						break;
     684:	00 00       	nop
					default:	break ;
				}
				break ;
     686:	00 00       	nop
	}
	else
	{
		//<!TODO> ERROR STATE
	}
}
     688:	00 00       	nop
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <LCD_voidInit>:
{

	LCD_voidSendChar(ptrLCD,storedCharIndex);
	
	
}
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	60 97       	sbiw	r28, 0x10	; 16
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	98 8b       	std	Y+16, r25	; 0x10
     6ac:	8f 87       	std	Y+15, r24	; 0x0f
     6ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b0:	98 89       	ldd	r25, Y+16	; 0x10
     6b2:	fc 01       	movw	r30, r24
     6b4:	82 81       	ldd	r24, Z+2	; 0x02
     6b6:	93 81       	ldd	r25, Z+3	; 0x03
     6b8:	05 96       	adiw	r24, 0x05	; 5
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 81       	ld	r18, Z
     6be:	8f 85       	ldd	r24, Y+15	; 0x0f
     6c0:	98 89       	ldd	r25, Y+16	; 0x10
     6c2:	fc 01       	movw	r30, r24
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	04 96       	adiw	r24, 0x04	; 4
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	62 2f       	mov	r22, r18
     6d2:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDirection>
     6d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6d8:	98 89       	ldd	r25, Y+16	; 0x10
     6da:	fc 01       	movw	r30, r24
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	07 96       	adiw	r24, 0x07	; 7
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 81       	ld	r18, Z
     6e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6e8:	98 89       	ldd	r25, Y+16	; 0x10
     6ea:	fc 01       	movw	r30, r24
     6ec:	82 81       	ldd	r24, Z+2	; 0x02
     6ee:	93 81       	ldd	r25, Z+3	; 0x03
     6f0:	06 96       	adiw	r24, 0x06	; 6
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	62 2f       	mov	r22, r18
     6fa:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDirection>
     6fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     700:	98 89       	ldd	r25, Y+16	; 0x10
     702:	fc 01       	movw	r30, r24
     704:	82 81       	ldd	r24, Z+2	; 0x02
     706:	93 81       	ldd	r25, Z+3	; 0x03
     708:	09 96       	adiw	r24, 0x09	; 9
     70a:	fc 01       	movw	r30, r24
     70c:	20 81       	ld	r18, Z
     70e:	8f 85       	ldd	r24, Y+15	; 0x0f
     710:	98 89       	ldd	r25, Y+16	; 0x10
     712:	fc 01       	movw	r30, r24
     714:	82 81       	ldd	r24, Z+2	; 0x02
     716:	93 81       	ldd	r25, Z+3	; 0x03
     718:	08 96       	adiw	r24, 0x08	; 8
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	62 2f       	mov	r22, r18
     722:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDirection>
     726:	8f 85       	ldd	r24, Y+15	; 0x0f
     728:	98 89       	ldd	r25, Y+16	; 0x10
     72a:	fc 01       	movw	r30, r24
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	0b 96       	adiw	r24, 0x0b	; 11
     732:	fc 01       	movw	r30, r24
     734:	20 81       	ld	r18, Z
     736:	8f 85       	ldd	r24, Y+15	; 0x0f
     738:	98 89       	ldd	r25, Y+16	; 0x10
     73a:	fc 01       	movw	r30, r24
     73c:	82 81       	ldd	r24, Z+2	; 0x02
     73e:	93 81       	ldd	r25, Z+3	; 0x03
     740:	0a 96       	adiw	r24, 0x0a	; 10
     742:	fc 01       	movw	r30, r24
     744:	80 81       	ld	r24, Z
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	62 2f       	mov	r22, r18
     74a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDirection>
     74e:	8f 85       	ldd	r24, Y+15	; 0x0f
     750:	98 89       	ldd	r25, Y+16	; 0x10
     752:	fc 01       	movw	r30, r24
     754:	82 81       	ldd	r24, Z+2	; 0x02
     756:	93 81       	ldd	r25, Z+3	; 0x03
     758:	03 96       	adiw	r24, 0x03	; 3
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8f 85       	ldd	r24, Y+15	; 0x0f
     760:	98 89       	ldd	r25, Y+16	; 0x10
     762:	fc 01       	movw	r30, r24
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	02 96       	adiw	r24, 0x02	; 2
     76a:	fc 01       	movw	r30, r24
     76c:	80 81       	ld	r24, Z
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	62 2f       	mov	r22, r18
     772:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDirection>
     776:	8f 85       	ldd	r24, Y+15	; 0x0f
     778:	98 89       	ldd	r25, Y+16	; 0x10
     77a:	fc 01       	movw	r30, r24
     77c:	82 81       	ldd	r24, Z+2	; 0x02
     77e:	93 81       	ldd	r25, Z+3	; 0x03
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	fc 01       	movw	r30, r24
     784:	20 81       	ld	r18, Z
     786:	8f 85       	ldd	r24, Y+15	; 0x0f
     788:	98 89       	ldd	r25, Y+16	; 0x10
     78a:	fc 01       	movw	r30, r24
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	93 81       	ldd	r25, Z+3	; 0x03
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	62 2f       	mov	r22, r18
     798:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDirection>
     79c:	8f 85       	ldd	r24, Y+15	; 0x0f
     79e:	98 89       	ldd	r25, Y+16	; 0x10
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
     7a6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7a8:	98 89       	ldd	r25, Y+16	; 0x10
     7aa:	68 e2       	ldi	r22, 0x28	; 40
     7ac:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
     7b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7b2:	98 89       	ldd	r25, Y+16	; 0x10
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
     7ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     7bc:	98 89       	ldd	r25, Y+16	; 0x10
     7be:	6f e0       	ldi	r22, 0x0F	; 15
     7c0:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
     7c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c6:	98 89       	ldd	r25, Y+16	; 0x10
     7c8:	60 e8       	ldi	r22, 0x80	; 128
     7ca:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	a0 e0       	ldi	r26, 0x00	; 0
     7d4:	b0 e4       	ldi	r27, 0x40	; 64
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	ab 83       	std	Y+3, r26	; 0x03
     7dc:	bc 83       	std	Y+4, r27	; 0x04
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	4a e7       	ldi	r20, 0x7A	; 122
     7e4:	55 e4       	ldi	r21, 0x45	; 69
     7e6:	69 81       	ldd	r22, Y+1	; 0x01
     7e8:	7a 81       	ldd	r23, Y+2	; 0x02
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	9c 81       	ldd	r25, Y+4	; 0x04
     7ee:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	8d 83       	std	Y+5, r24	; 0x05
     7f8:	9e 83       	std	Y+6, r25	; 0x06
     7fa:	af 83       	std	Y+7, r26	; 0x07
     7fc:	b8 87       	std	Y+8, r27	; 0x08
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e8       	ldi	r20, 0x80	; 128
     804:	5f e3       	ldi	r21, 0x3F	; 63
     806:	6d 81       	ldd	r22, Y+5	; 0x05
     808:	7e 81       	ldd	r23, Y+6	; 0x06
     80a:	8f 81       	ldd	r24, Y+7	; 0x07
     80c:	98 85       	ldd	r25, Y+8	; 0x08
     80e:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
     812:	88 23       	and	r24, r24
     814:	2c f4       	brge	.+10     	; 0x820 <LCD_voidInit+0x18a>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	9a 87       	std	Y+10, r25	; 0x0a
     81c:	89 87       	std	Y+9, r24	; 0x09
     81e:	3f c0       	rjmp	.+126    	; 0x89e <LCD_voidInit+0x208>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	3f ef       	ldi	r19, 0xFF	; 255
     824:	4f e7       	ldi	r20, 0x7F	; 127
     826:	57 e4       	ldi	r21, 0x47	; 71
     828:	6d 81       	ldd	r22, Y+5	; 0x05
     82a:	7e 81       	ldd	r23, Y+6	; 0x06
     82c:	8f 81       	ldd	r24, Y+7	; 0x07
     82e:	98 85       	ldd	r25, Y+8	; 0x08
     830:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     834:	18 16       	cp	r1, r24
     836:	4c f5       	brge	.+82     	; 0x88a <LCD_voidInit+0x1f4>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e2       	ldi	r20, 0x20	; 32
     83e:	51 e4       	ldi	r21, 0x41	; 65
     840:	69 81       	ldd	r22, Y+1	; 0x01
     842:	7a 81       	ldd	r23, Y+2	; 0x02
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	9c 81       	ldd	r25, Y+4	; 0x04
     848:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	9a 87       	std	Y+10, r25	; 0x0a
     85e:	89 87       	std	Y+9, r24	; 0x09
     860:	0f c0       	rjmp	.+30     	; 0x880 <LCD_voidInit+0x1ea>
     862:	80 e9       	ldi	r24, 0x90	; 144
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	9c 87       	std	Y+12, r25	; 0x0c
     868:	8b 87       	std	Y+11, r24	; 0x0b
     86a:	8b 85       	ldd	r24, Y+11	; 0x0b
     86c:	9c 85       	ldd	r25, Y+12	; 0x0c
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <LCD_voidInit+0x1d8>
     872:	9c 87       	std	Y+12, r25	; 0x0c
     874:	8b 87       	std	Y+11, r24	; 0x0b
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	9a 87       	std	Y+10, r25	; 0x0a
     87e:	89 87       	std	Y+9, r24	; 0x09
     880:	89 85       	ldd	r24, Y+9	; 0x09
     882:	9a 85       	ldd	r25, Y+10	; 0x0a
     884:	89 2b       	or	r24, r25
     886:	69 f7       	brne	.-38     	; 0x862 <LCD_voidInit+0x1cc>
     888:	14 c0       	rjmp	.+40     	; 0x8b2 <LCD_voidInit+0x21c>
     88a:	6d 81       	ldd	r22, Y+5	; 0x05
     88c:	7e 81       	ldd	r23, Y+6	; 0x06
     88e:	8f 81       	ldd	r24, Y+7	; 0x07
     890:	98 85       	ldd	r25, Y+8	; 0x08
     892:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	9a 87       	std	Y+10, r25	; 0x0a
     89c:	89 87       	std	Y+9, r24	; 0x09
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a2:	9e 87       	std	Y+14, r25	; 0x0e
     8a4:	8d 87       	std	Y+13, r24	; 0x0d
     8a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <LCD_voidInit+0x214>
     8ae:	9e 87       	std	Y+14, r25	; 0x0e
     8b0:	8d 87       	std	Y+13, r24	; 0x0d
     8b2:	00 00       	nop
     8b4:	60 96       	adiw	r28, 0x10	; 16
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <LCD_voidSendChar>:
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	eb 97       	sbiw	r28, 0x3b	; 59
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	9a af       	std	Y+58, r25	; 0x3a
     8dc:	89 af       	std	Y+57, r24	; 0x39
     8de:	6b af       	std	Y+59, r22	; 0x3b
     8e0:	8b ad       	ldd	r24, Y+59	; 0x3b
     8e2:	82 95       	swap	r24
     8e4:	8f 70       	andi	r24, 0x0F	; 15
     8e6:	38 2f       	mov	r19, r24
     8e8:	31 70       	andi	r19, 0x01	; 1
     8ea:	89 ad       	ldd	r24, Y+57	; 0x39
     8ec:	9a ad       	ldd	r25, Y+58	; 0x3a
     8ee:	fc 01       	movw	r30, r24
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	05 96       	adiw	r24, 0x05	; 5
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 81       	ld	r18, Z
     8fa:	89 ad       	ldd	r24, Y+57	; 0x39
     8fc:	9a ad       	ldd	r25, Y+58	; 0x3a
     8fe:	fc 01       	movw	r30, r24
     900:	82 81       	ldd	r24, Z+2	; 0x02
     902:	93 81       	ldd	r25, Z+3	; 0x03
     904:	04 96       	adiw	r24, 0x04	; 4
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	43 2f       	mov	r20, r19
     90c:	62 2f       	mov	r22, r18
     90e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     912:	8b ad       	ldd	r24, Y+59	; 0x3b
     914:	82 95       	swap	r24
     916:	86 95       	lsr	r24
     918:	87 70       	andi	r24, 0x07	; 7
     91a:	38 2f       	mov	r19, r24
     91c:	31 70       	andi	r19, 0x01	; 1
     91e:	89 ad       	ldd	r24, Y+57	; 0x39
     920:	9a ad       	ldd	r25, Y+58	; 0x3a
     922:	fc 01       	movw	r30, r24
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	93 81       	ldd	r25, Z+3	; 0x03
     928:	07 96       	adiw	r24, 0x07	; 7
     92a:	fc 01       	movw	r30, r24
     92c:	20 81       	ld	r18, Z
     92e:	89 ad       	ldd	r24, Y+57	; 0x39
     930:	9a ad       	ldd	r25, Y+58	; 0x3a
     932:	fc 01       	movw	r30, r24
     934:	82 81       	ldd	r24, Z+2	; 0x02
     936:	93 81       	ldd	r25, Z+3	; 0x03
     938:	06 96       	adiw	r24, 0x06	; 6
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	43 2f       	mov	r20, r19
     940:	62 2f       	mov	r22, r18
     942:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     946:	8b ad       	ldd	r24, Y+59	; 0x3b
     948:	82 95       	swap	r24
     94a:	86 95       	lsr	r24
     94c:	86 95       	lsr	r24
     94e:	83 70       	andi	r24, 0x03	; 3
     950:	38 2f       	mov	r19, r24
     952:	31 70       	andi	r19, 0x01	; 1
     954:	89 ad       	ldd	r24, Y+57	; 0x39
     956:	9a ad       	ldd	r25, Y+58	; 0x3a
     958:	fc 01       	movw	r30, r24
     95a:	82 81       	ldd	r24, Z+2	; 0x02
     95c:	93 81       	ldd	r25, Z+3	; 0x03
     95e:	09 96       	adiw	r24, 0x09	; 9
     960:	fc 01       	movw	r30, r24
     962:	20 81       	ld	r18, Z
     964:	89 ad       	ldd	r24, Y+57	; 0x39
     966:	9a ad       	ldd	r25, Y+58	; 0x3a
     968:	fc 01       	movw	r30, r24
     96a:	82 81       	ldd	r24, Z+2	; 0x02
     96c:	93 81       	ldd	r25, Z+3	; 0x03
     96e:	08 96       	adiw	r24, 0x08	; 8
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
     974:	43 2f       	mov	r20, r19
     976:	62 2f       	mov	r22, r18
     978:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     97c:	8b ad       	ldd	r24, Y+59	; 0x3b
     97e:	38 2f       	mov	r19, r24
     980:	33 1f       	adc	r19, r19
     982:	33 27       	eor	r19, r19
     984:	33 1f       	adc	r19, r19
     986:	89 ad       	ldd	r24, Y+57	; 0x39
     988:	9a ad       	ldd	r25, Y+58	; 0x3a
     98a:	fc 01       	movw	r30, r24
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	0b 96       	adiw	r24, 0x0b	; 11
     992:	fc 01       	movw	r30, r24
     994:	20 81       	ld	r18, Z
     996:	89 ad       	ldd	r24, Y+57	; 0x39
     998:	9a ad       	ldd	r25, Y+58	; 0x3a
     99a:	fc 01       	movw	r30, r24
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	93 81       	ldd	r25, Z+3	; 0x03
     9a0:	0a 96       	adiw	r24, 0x0a	; 10
     9a2:	fc 01       	movw	r30, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	43 2f       	mov	r20, r19
     9a8:	62 2f       	mov	r22, r18
     9aa:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     9ae:	89 ad       	ldd	r24, Y+57	; 0x39
     9b0:	9a ad       	ldd	r25, Y+58	; 0x3a
     9b2:	fc 01       	movw	r30, r24
     9b4:	82 81       	ldd	r24, Z+2	; 0x02
     9b6:	93 81       	ldd	r25, Z+3	; 0x03
     9b8:	03 96       	adiw	r24, 0x03	; 3
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 81       	ld	r18, Z
     9be:	89 ad       	ldd	r24, Y+57	; 0x39
     9c0:	9a ad       	ldd	r25, Y+58	; 0x3a
     9c2:	fc 01       	movw	r30, r24
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	02 96       	adiw	r24, 0x02	; 2
     9ca:	fc 01       	movw	r30, r24
     9cc:	80 81       	ld	r24, Z
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	62 2f       	mov	r22, r18
     9d2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     9d6:	89 ad       	ldd	r24, Y+57	; 0x39
     9d8:	9a ad       	ldd	r25, Y+58	; 0x3a
     9da:	fc 01       	movw	r30, r24
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	93 81       	ldd	r25, Z+3	; 0x03
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	fc 01       	movw	r30, r24
     9e4:	20 81       	ld	r18, Z
     9e6:	89 ad       	ldd	r24, Y+57	; 0x39
     9e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     9ea:	fc 01       	movw	r30, r24
     9ec:	82 81       	ldd	r24, Z+2	; 0x02
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	fc 01       	movw	r30, r24
     9f2:	80 81       	ld	r24, Z
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	62 2f       	mov	r22, r18
     9f8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 e8       	ldi	r26, 0x80	; 128
     a02:	bf e3       	ldi	r27, 0x3F	; 63
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	ab 83       	std	Y+3, r26	; 0x03
     a0a:	bc 83       	std	Y+4, r27	; 0x04
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	4a e7       	ldi	r20, 0x7A	; 122
     a12:	55 e4       	ldi	r21, 0x45	; 69
     a14:	69 81       	ldd	r22, Y+1	; 0x01
     a16:	7a 81       	ldd	r23, Y+2	; 0x02
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8f a7       	std	Y+47, r24	; 0x2f
     a26:	98 ab       	std	Y+48, r25	; 0x30
     a28:	a9 ab       	std	Y+49, r26	; 0x31
     a2a:	ba ab       	std	Y+50, r27	; 0x32
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	6f a5       	ldd	r22, Y+47	; 0x2f
     a36:	78 a9       	ldd	r23, Y+48	; 0x30
     a38:	89 a9       	ldd	r24, Y+49	; 0x31
     a3a:	9a a9       	ldd	r25, Y+50	; 0x32
     a3c:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
     a40:	88 23       	and	r24, r24
     a42:	2c f4       	brge	.+10     	; 0xa4e <LCD_voidSendChar+0x188>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	9c ab       	std	Y+52, r25	; 0x34
     a4a:	8b ab       	std	Y+51, r24	; 0x33
     a4c:	3f c0       	rjmp	.+126    	; 0xacc <LCD_voidSendChar+0x206>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	3f ef       	ldi	r19, 0xFF	; 255
     a52:	4f e7       	ldi	r20, 0x7F	; 127
     a54:	57 e4       	ldi	r21, 0x47	; 71
     a56:	6f a5       	ldd	r22, Y+47	; 0x2f
     a58:	78 a9       	ldd	r23, Y+48	; 0x30
     a5a:	89 a9       	ldd	r24, Y+49	; 0x31
     a5c:	9a a9       	ldd	r25, Y+50	; 0x32
     a5e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     a62:	18 16       	cp	r1, r24
     a64:	4c f5       	brge	.+82     	; 0xab8 <LCD_voidSendChar+0x1f2>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e2       	ldi	r20, 0x20	; 32
     a6c:	51 e4       	ldi	r21, 0x41	; 65
     a6e:	69 81       	ldd	r22, Y+1	; 0x01
     a70:	7a 81       	ldd	r23, Y+2	; 0x02
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	9c ab       	std	Y+52, r25	; 0x34
     a8c:	8b ab       	std	Y+51, r24	; 0x33
     a8e:	0f c0       	rjmp	.+30     	; 0xaae <LCD_voidSendChar+0x1e8>
     a90:	80 e9       	ldi	r24, 0x90	; 144
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9e ab       	std	Y+54, r25	; 0x36
     a96:	8d ab       	std	Y+53, r24	; 0x35
     a98:	8d a9       	ldd	r24, Y+53	; 0x35
     a9a:	9e a9       	ldd	r25, Y+54	; 0x36
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <LCD_voidSendChar+0x1d6>
     aa0:	9e ab       	std	Y+54, r25	; 0x36
     aa2:	8d ab       	std	Y+53, r24	; 0x35
     aa4:	8b a9       	ldd	r24, Y+51	; 0x33
     aa6:	9c a9       	ldd	r25, Y+52	; 0x34
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	9c ab       	std	Y+52, r25	; 0x34
     aac:	8b ab       	std	Y+51, r24	; 0x33
     aae:	8b a9       	ldd	r24, Y+51	; 0x33
     ab0:	9c a9       	ldd	r25, Y+52	; 0x34
     ab2:	89 2b       	or	r24, r25
     ab4:	69 f7       	brne	.-38     	; 0xa90 <LCD_voidSendChar+0x1ca>
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <LCD_voidSendChar+0x21a>
     ab8:	6f a5       	ldd	r22, Y+47	; 0x2f
     aba:	78 a9       	ldd	r23, Y+48	; 0x30
     abc:	89 a9       	ldd	r24, Y+49	; 0x31
     abe:	9a a9       	ldd	r25, Y+50	; 0x32
     ac0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	9c ab       	std	Y+52, r25	; 0x34
     aca:	8b ab       	std	Y+51, r24	; 0x33
     acc:	8b a9       	ldd	r24, Y+51	; 0x33
     ace:	9c a9       	ldd	r25, Y+52	; 0x34
     ad0:	98 af       	std	Y+56, r25	; 0x38
     ad2:	8f ab       	std	Y+55, r24	; 0x37
     ad4:	8f a9       	ldd	r24, Y+55	; 0x37
     ad6:	98 ad       	ldd	r25, Y+56	; 0x38
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <LCD_voidSendChar+0x212>
     adc:	98 af       	std	Y+56, r25	; 0x38
     ade:	8f ab       	std	Y+55, r24	; 0x37
     ae0:	89 ad       	ldd	r24, Y+57	; 0x39
     ae2:	9a ad       	ldd	r25, Y+58	; 0x3a
     ae4:	fc 01       	movw	r30, r24
     ae6:	82 81       	ldd	r24, Z+2	; 0x02
     ae8:	93 81       	ldd	r25, Z+3	; 0x03
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	fc 01       	movw	r30, r24
     aee:	20 81       	ld	r18, Z
     af0:	89 ad       	ldd	r24, Y+57	; 0x39
     af2:	9a ad       	ldd	r25, Y+58	; 0x3a
     af4:	fc 01       	movw	r30, r24
     af6:	82 81       	ldd	r24, Z+2	; 0x02
     af8:	93 81       	ldd	r25, Z+3	; 0x03
     afa:	fc 01       	movw	r30, r24
     afc:	80 81       	ld	r24, Z
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	62 2f       	mov	r22, r18
     b02:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a0 ea       	ldi	r26, 0xA0	; 160
     b0c:	b1 e4       	ldi	r27, 0x41	; 65
     b0e:	8d 83       	std	Y+5, r24	; 0x05
     b10:	9e 83       	std	Y+6, r25	; 0x06
     b12:	af 83       	std	Y+7, r26	; 0x07
     b14:	b8 87       	std	Y+8, r27	; 0x08
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	4a e7       	ldi	r20, 0x7A	; 122
     b1c:	55 e4       	ldi	r21, 0x45	; 69
     b1e:	6d 81       	ldd	r22, Y+5	; 0x05
     b20:	7e 81       	ldd	r23, Y+6	; 0x06
     b22:	8f 81       	ldd	r24, Y+7	; 0x07
     b24:	98 85       	ldd	r25, Y+8	; 0x08
     b26:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	8d a3       	std	Y+37, r24	; 0x25
     b30:	9e a3       	std	Y+38, r25	; 0x26
     b32:	af a3       	std	Y+39, r26	; 0x27
     b34:	b8 a7       	std	Y+40, r27	; 0x28
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e8       	ldi	r20, 0x80	; 128
     b3c:	5f e3       	ldi	r21, 0x3F	; 63
     b3e:	6d a1       	ldd	r22, Y+37	; 0x25
     b40:	7e a1       	ldd	r23, Y+38	; 0x26
     b42:	8f a1       	ldd	r24, Y+39	; 0x27
     b44:	98 a5       	ldd	r25, Y+40	; 0x28
     b46:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
     b4a:	88 23       	and	r24, r24
     b4c:	2c f4       	brge	.+10     	; 0xb58 <LCD_voidSendChar+0x292>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	9a a7       	std	Y+42, r25	; 0x2a
     b54:	89 a7       	std	Y+41, r24	; 0x29
     b56:	3f c0       	rjmp	.+126    	; 0xbd6 <LCD_voidSendChar+0x310>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	3f ef       	ldi	r19, 0xFF	; 255
     b5c:	4f e7       	ldi	r20, 0x7F	; 127
     b5e:	57 e4       	ldi	r21, 0x47	; 71
     b60:	6d a1       	ldd	r22, Y+37	; 0x25
     b62:	7e a1       	ldd	r23, Y+38	; 0x26
     b64:	8f a1       	ldd	r24, Y+39	; 0x27
     b66:	98 a5       	ldd	r25, Y+40	; 0x28
     b68:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     b6c:	18 16       	cp	r1, r24
     b6e:	4c f5       	brge	.+82     	; 0xbc2 <LCD_voidSendChar+0x2fc>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e2       	ldi	r20, 0x20	; 32
     b76:	51 e4       	ldi	r21, 0x41	; 65
     b78:	6d 81       	ldd	r22, Y+5	; 0x05
     b7a:	7e 81       	ldd	r23, Y+6	; 0x06
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	bc 01       	movw	r22, r24
     b8a:	cd 01       	movw	r24, r26
     b8c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	9a a7       	std	Y+42, r25	; 0x2a
     b96:	89 a7       	std	Y+41, r24	; 0x29
     b98:	0f c0       	rjmp	.+30     	; 0xbb8 <LCD_voidSendChar+0x2f2>
     b9a:	80 e9       	ldi	r24, 0x90	; 144
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	9c a7       	std	Y+44, r25	; 0x2c
     ba0:	8b a7       	std	Y+43, r24	; 0x2b
     ba2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ba4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <LCD_voidSendChar+0x2e0>
     baa:	9c a7       	std	Y+44, r25	; 0x2c
     bac:	8b a7       	std	Y+43, r24	; 0x2b
     bae:	89 a5       	ldd	r24, Y+41	; 0x29
     bb0:	9a a5       	ldd	r25, Y+42	; 0x2a
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	9a a7       	std	Y+42, r25	; 0x2a
     bb6:	89 a7       	std	Y+41, r24	; 0x29
     bb8:	89 a5       	ldd	r24, Y+41	; 0x29
     bba:	9a a5       	ldd	r25, Y+42	; 0x2a
     bbc:	89 2b       	or	r24, r25
     bbe:	69 f7       	brne	.-38     	; 0xb9a <LCD_voidSendChar+0x2d4>
     bc0:	14 c0       	rjmp	.+40     	; 0xbea <LCD_voidSendChar+0x324>
     bc2:	6d a1       	ldd	r22, Y+37	; 0x25
     bc4:	7e a1       	ldd	r23, Y+38	; 0x26
     bc6:	8f a1       	ldd	r24, Y+39	; 0x27
     bc8:	98 a5       	ldd	r25, Y+40	; 0x28
     bca:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	9a a7       	std	Y+42, r25	; 0x2a
     bd4:	89 a7       	std	Y+41, r24	; 0x29
     bd6:	89 a5       	ldd	r24, Y+41	; 0x29
     bd8:	9a a5       	ldd	r25, Y+42	; 0x2a
     bda:	9e a7       	std	Y+46, r25	; 0x2e
     bdc:	8d a7       	std	Y+45, r24	; 0x2d
     bde:	8d a5       	ldd	r24, Y+45	; 0x2d
     be0:	9e a5       	ldd	r25, Y+46	; 0x2e
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <LCD_voidSendChar+0x31c>
     be6:	9e a7       	std	Y+46, r25	; 0x2e
     be8:	8d a7       	std	Y+45, r24	; 0x2d
     bea:	8b ad       	ldd	r24, Y+59	; 0x3b
     bec:	38 2f       	mov	r19, r24
     bee:	31 70       	andi	r19, 0x01	; 1
     bf0:	89 ad       	ldd	r24, Y+57	; 0x39
     bf2:	9a ad       	ldd	r25, Y+58	; 0x3a
     bf4:	fc 01       	movw	r30, r24
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	05 96       	adiw	r24, 0x05	; 5
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 81       	ld	r18, Z
     c00:	89 ad       	ldd	r24, Y+57	; 0x39
     c02:	9a ad       	ldd	r25, Y+58	; 0x3a
     c04:	fc 01       	movw	r30, r24
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	04 96       	adiw	r24, 0x04	; 4
     c0c:	fc 01       	movw	r30, r24
     c0e:	80 81       	ld	r24, Z
     c10:	43 2f       	mov	r20, r19
     c12:	62 2f       	mov	r22, r18
     c14:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     c18:	8b ad       	ldd	r24, Y+59	; 0x3b
     c1a:	86 95       	lsr	r24
     c1c:	38 2f       	mov	r19, r24
     c1e:	31 70       	andi	r19, 0x01	; 1
     c20:	89 ad       	ldd	r24, Y+57	; 0x39
     c22:	9a ad       	ldd	r25, Y+58	; 0x3a
     c24:	fc 01       	movw	r30, r24
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	07 96       	adiw	r24, 0x07	; 7
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 81       	ld	r18, Z
     c30:	89 ad       	ldd	r24, Y+57	; 0x39
     c32:	9a ad       	ldd	r25, Y+58	; 0x3a
     c34:	fc 01       	movw	r30, r24
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	06 96       	adiw	r24, 0x06	; 6
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	43 2f       	mov	r20, r19
     c42:	62 2f       	mov	r22, r18
     c44:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     c48:	8b ad       	ldd	r24, Y+59	; 0x3b
     c4a:	86 95       	lsr	r24
     c4c:	86 95       	lsr	r24
     c4e:	38 2f       	mov	r19, r24
     c50:	31 70       	andi	r19, 0x01	; 1
     c52:	89 ad       	ldd	r24, Y+57	; 0x39
     c54:	9a ad       	ldd	r25, Y+58	; 0x3a
     c56:	fc 01       	movw	r30, r24
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	09 96       	adiw	r24, 0x09	; 9
     c5e:	fc 01       	movw	r30, r24
     c60:	20 81       	ld	r18, Z
     c62:	89 ad       	ldd	r24, Y+57	; 0x39
     c64:	9a ad       	ldd	r25, Y+58	; 0x3a
     c66:	fc 01       	movw	r30, r24
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	08 96       	adiw	r24, 0x08	; 8
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	43 2f       	mov	r20, r19
     c74:	62 2f       	mov	r22, r18
     c76:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     c7a:	8b ad       	ldd	r24, Y+59	; 0x3b
     c7c:	86 95       	lsr	r24
     c7e:	86 95       	lsr	r24
     c80:	86 95       	lsr	r24
     c82:	38 2f       	mov	r19, r24
     c84:	31 70       	andi	r19, 0x01	; 1
     c86:	89 ad       	ldd	r24, Y+57	; 0x39
     c88:	9a ad       	ldd	r25, Y+58	; 0x3a
     c8a:	fc 01       	movw	r30, r24
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	0b 96       	adiw	r24, 0x0b	; 11
     c92:	fc 01       	movw	r30, r24
     c94:	20 81       	ld	r18, Z
     c96:	89 ad       	ldd	r24, Y+57	; 0x39
     c98:	9a ad       	ldd	r25, Y+58	; 0x3a
     c9a:	fc 01       	movw	r30, r24
     c9c:	82 81       	ldd	r24, Z+2	; 0x02
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	0a 96       	adiw	r24, 0x0a	; 10
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	43 2f       	mov	r20, r19
     ca8:	62 2f       	mov	r22, r18
     caa:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     cae:	89 ad       	ldd	r24, Y+57	; 0x39
     cb0:	9a ad       	ldd	r25, Y+58	; 0x3a
     cb2:	fc 01       	movw	r30, r24
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	03 96       	adiw	r24, 0x03	; 3
     cba:	fc 01       	movw	r30, r24
     cbc:	20 81       	ld	r18, Z
     cbe:	89 ad       	ldd	r24, Y+57	; 0x39
     cc0:	9a ad       	ldd	r25, Y+58	; 0x3a
     cc2:	fc 01       	movw	r30, r24
     cc4:	82 81       	ldd	r24, Z+2	; 0x02
     cc6:	93 81       	ldd	r25, Z+3	; 0x03
     cc8:	02 96       	adiw	r24, 0x02	; 2
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	62 2f       	mov	r22, r18
     cd2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     cd6:	89 ad       	ldd	r24, Y+57	; 0x39
     cd8:	9a ad       	ldd	r25, Y+58	; 0x3a
     cda:	fc 01       	movw	r30, r24
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 81       	ld	r18, Z
     ce6:	89 ad       	ldd	r24, Y+57	; 0x39
     ce8:	9a ad       	ldd	r25, Y+58	; 0x3a
     cea:	fc 01       	movw	r30, r24
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	62 2f       	mov	r22, r18
     cf8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e8       	ldi	r26, 0x80	; 128
     d02:	bf e3       	ldi	r27, 0x3F	; 63
     d04:	89 87       	std	Y+9, r24	; 0x09
     d06:	9a 87       	std	Y+10, r25	; 0x0a
     d08:	ab 87       	std	Y+11, r26	; 0x0b
     d0a:	bc 87       	std	Y+12, r27	; 0x0c
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4a e7       	ldi	r20, 0x7A	; 122
     d12:	55 e4       	ldi	r21, 0x45	; 69
     d14:	69 85       	ldd	r22, Y+9	; 0x09
     d16:	7a 85       	ldd	r23, Y+10	; 0x0a
     d18:	8b 85       	ldd	r24, Y+11	; 0x0b
     d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	8b 8f       	std	Y+27, r24	; 0x1b
     d26:	9c 8f       	std	Y+28, r25	; 0x1c
     d28:	ad 8f       	std	Y+29, r26	; 0x1d
     d2a:	be 8f       	std	Y+30, r27	; 0x1e
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d36:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d3c:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
     d40:	88 23       	and	r24, r24
     d42:	2c f4       	brge	.+10     	; 0xd4e <LCD_voidSendChar+0x488>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	98 a3       	std	Y+32, r25	; 0x20
     d4a:	8f 8f       	std	Y+31, r24	; 0x1f
     d4c:	3f c0       	rjmp	.+126    	; 0xdcc <LCD_voidSendChar+0x506>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d58:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d5e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     d62:	18 16       	cp	r1, r24
     d64:	4c f5       	brge	.+82     	; 0xdb8 <LCD_voidSendChar+0x4f2>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	69 85       	ldd	r22, Y+9	; 0x09
     d70:	7a 85       	ldd	r23, Y+10	; 0x0a
     d72:	8b 85       	ldd	r24, Y+11	; 0x0b
     d74:	9c 85       	ldd	r25, Y+12	; 0x0c
     d76:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	98 a3       	std	Y+32, r25	; 0x20
     d8c:	8f 8f       	std	Y+31, r24	; 0x1f
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <LCD_voidSendChar+0x4e8>
     d90:	80 e9       	ldi	r24, 0x90	; 144
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	9a a3       	std	Y+34, r25	; 0x22
     d96:	89 a3       	std	Y+33, r24	; 0x21
     d98:	89 a1       	ldd	r24, Y+33	; 0x21
     d9a:	9a a1       	ldd	r25, Y+34	; 0x22
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <LCD_voidSendChar+0x4d6>
     da0:	9a a3       	std	Y+34, r25	; 0x22
     da2:	89 a3       	std	Y+33, r24	; 0x21
     da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     da6:	98 a1       	ldd	r25, Y+32	; 0x20
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	98 a3       	std	Y+32, r25	; 0x20
     dac:	8f 8f       	std	Y+31, r24	; 0x1f
     dae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db0:	98 a1       	ldd	r25, Y+32	; 0x20
     db2:	89 2b       	or	r24, r25
     db4:	69 f7       	brne	.-38     	; 0xd90 <LCD_voidSendChar+0x4ca>
     db6:	14 c0       	rjmp	.+40     	; 0xde0 <LCD_voidSendChar+0x51a>
     db8:	6b 8d       	ldd	r22, Y+27	; 0x1b
     dba:	7c 8d       	ldd	r23, Y+28	; 0x1c
     dbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dc0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	98 a3       	std	Y+32, r25	; 0x20
     dca:	8f 8f       	std	Y+31, r24	; 0x1f
     dcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dce:	98 a1       	ldd	r25, Y+32	; 0x20
     dd0:	9c a3       	std	Y+36, r25	; 0x24
     dd2:	8b a3       	std	Y+35, r24	; 0x23
     dd4:	8b a1       	ldd	r24, Y+35	; 0x23
     dd6:	9c a1       	ldd	r25, Y+36	; 0x24
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <LCD_voidSendChar+0x512>
     ddc:	9c a3       	std	Y+36, r25	; 0x24
     dde:	8b a3       	std	Y+35, r24	; 0x23
     de0:	89 ad       	ldd	r24, Y+57	; 0x39
     de2:	9a ad       	ldd	r25, Y+58	; 0x3a
     de4:	fc 01       	movw	r30, r24
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	fc 01       	movw	r30, r24
     dee:	20 81       	ld	r18, Z
     df0:	89 ad       	ldd	r24, Y+57	; 0x39
     df2:	9a ad       	ldd	r25, Y+58	; 0x3a
     df4:	fc 01       	movw	r30, r24
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	fc 01       	movw	r30, r24
     dfc:	80 81       	ld	r24, Z
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	62 2f       	mov	r22, r18
     e02:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 ea       	ldi	r26, 0xA0	; 160
     e0c:	b1 e4       	ldi	r27, 0x41	; 65
     e0e:	8d 87       	std	Y+13, r24	; 0x0d
     e10:	9e 87       	std	Y+14, r25	; 0x0e
     e12:	af 87       	std	Y+15, r26	; 0x0f
     e14:	b8 8b       	std	Y+16, r27	; 0x10
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	4a e7       	ldi	r20, 0x7A	; 122
     e1c:	55 e4       	ldi	r21, 0x45	; 69
     e1e:	6d 85       	ldd	r22, Y+13	; 0x0d
     e20:	7e 85       	ldd	r23, Y+14	; 0x0e
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	98 89       	ldd	r25, Y+16	; 0x10
     e26:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	89 8b       	std	Y+17, r24	; 0x11
     e30:	9a 8b       	std	Y+18, r25	; 0x12
     e32:	ab 8b       	std	Y+19, r26	; 0x13
     e34:	bc 8b       	std	Y+20, r27	; 0x14
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	5f e3       	ldi	r21, 0x3F	; 63
     e3e:	69 89       	ldd	r22, Y+17	; 0x11
     e40:	7a 89       	ldd	r23, Y+18	; 0x12
     e42:	8b 89       	ldd	r24, Y+19	; 0x13
     e44:	9c 89       	ldd	r25, Y+20	; 0x14
     e46:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <LCD_voidSendChar+0x592>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9e 8b       	std	Y+22, r25	; 0x16
     e54:	8d 8b       	std	Y+21, r24	; 0x15
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <LCD_voidSendChar+0x610>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	3f ef       	ldi	r19, 0xFF	; 255
     e5c:	4f e7       	ldi	r20, 0x7F	; 127
     e5e:	57 e4       	ldi	r21, 0x47	; 71
     e60:	69 89       	ldd	r22, Y+17	; 0x11
     e62:	7a 89       	ldd	r23, Y+18	; 0x12
     e64:	8b 89       	ldd	r24, Y+19	; 0x13
     e66:	9c 89       	ldd	r25, Y+20	; 0x14
     e68:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <LCD_voidSendChar+0x5fc>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e2       	ldi	r20, 0x20	; 32
     e76:	51 e4       	ldi	r21, 0x41	; 65
     e78:	6d 85       	ldd	r22, Y+13	; 0x0d
     e7a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7e:	98 89       	ldd	r25, Y+16	; 0x10
     e80:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9e 8b       	std	Y+22, r25	; 0x16
     e96:	8d 8b       	std	Y+21, r24	; 0x15
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <LCD_voidSendChar+0x5f2>
     e9a:	80 e9       	ldi	r24, 0x90	; 144
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	98 8f       	std	Y+24, r25	; 0x18
     ea0:	8f 8b       	std	Y+23, r24	; 0x17
     ea2:	8f 89       	ldd	r24, Y+23	; 0x17
     ea4:	98 8d       	ldd	r25, Y+24	; 0x18
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <LCD_voidSendChar+0x5e0>
     eaa:	98 8f       	std	Y+24, r25	; 0x18
     eac:	8f 8b       	std	Y+23, r24	; 0x17
     eae:	8d 89       	ldd	r24, Y+21	; 0x15
     eb0:	9e 89       	ldd	r25, Y+22	; 0x16
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9e 8b       	std	Y+22, r25	; 0x16
     eb6:	8d 8b       	std	Y+21, r24	; 0x15
     eb8:	8d 89       	ldd	r24, Y+21	; 0x15
     eba:	9e 89       	ldd	r25, Y+22	; 0x16
     ebc:	89 2b       	or	r24, r25
     ebe:	69 f7       	brne	.-38     	; 0xe9a <LCD_voidSendChar+0x5d4>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <LCD_voidSendChar+0x624>
     ec2:	69 89       	ldd	r22, Y+17	; 0x11
     ec4:	7a 89       	ldd	r23, Y+18	; 0x12
     ec6:	8b 89       	ldd	r24, Y+19	; 0x13
     ec8:	9c 89       	ldd	r25, Y+20	; 0x14
     eca:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9e 8b       	std	Y+22, r25	; 0x16
     ed4:	8d 8b       	std	Y+21, r24	; 0x15
     ed6:	8d 89       	ldd	r24, Y+21	; 0x15
     ed8:	9e 89       	ldd	r25, Y+22	; 0x16
     eda:	9a 8f       	std	Y+26, r25	; 0x1a
     edc:	89 8f       	std	Y+25, r24	; 0x19
     ede:	89 8d       	ldd	r24, Y+25	; 0x19
     ee0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <LCD_voidSendChar+0x61c>
     ee6:	9a 8f       	std	Y+26, r25	; 0x1a
     ee8:	89 8f       	std	Y+25, r24	; 0x19
     eea:	00 00       	nop
     eec:	eb 96       	adiw	r28, 0x3b	; 59
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <LCD_voidSendString>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <LCD_voidSendString+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <LCD_voidSendString+0x8>
     f06:	1f 92       	push	r1
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9b 83       	std	Y+3, r25	; 0x03
     f0e:	8a 83       	std	Y+2, r24	; 0x02
     f10:	7d 83       	std	Y+5, r23	; 0x05
     f12:	6c 83       	std	Y+4, r22	; 0x04
     f14:	19 82       	std	Y+1, r1	; 0x01
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <LCD_voidSendString+0x3c>
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	fc 01       	movw	r30, r24
     f28:	20 81       	ld	r18, Z
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	62 2f       	mov	r22, r18
     f30:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_voidSendChar>
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	fc 01       	movw	r30, r24
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	21 f7       	brne	.-56     	; 0xf18 <LCD_voidSendString+0x1a>
     f50:	00 00       	nop
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <LCD_voidGotoXY>:
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	00 d0       	rcall	.+0      	; 0xf68 <LCD_voidGotoXY+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <LCD_voidGotoXY+0x8>
     f6a:	1f 92       	push	r1
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9b 83       	std	Y+3, r25	; 0x03
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	6c 83       	std	Y+4, r22	; 0x04
     f76:	4d 83       	std	Y+5, r20	; 0x05
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	9b 81       	ldd	r25, Y+3	; 0x03
     f7e:	fc 01       	movw	r30, r24
     f80:	90 81       	ld	r25, Z
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	89 17       	cp	r24, r25
     f86:	c0 f4       	brcc	.+48     	; 0xfb8 <LCD_voidGotoXY+0x56>
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	fc 01       	movw	r30, r24
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	89 17       	cp	r24, r25
     f94:	88 f4       	brcc	.+34     	; 0xfb8 <LCD_voidGotoXY+0x56>
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	98 2f       	mov	r25, r24
     f9a:	92 95       	swap	r25
     f9c:	99 0f       	add	r25, r25
     f9e:	99 0f       	add	r25, r25
     fa0:	90 7c       	andi	r25, 0xC0	; 192
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	89 0f       	add	r24, r25
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	69 81       	ldd	r22, Y+1	; 0x01
     fb4:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
     fb8:	00 00       	nop
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <LCD_voidStoreCustomChar>:
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	27 97       	sbiw	r28, 0x07	; 7
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	8b 83       	std	Y+3, r24	; 0x03
     fe2:	7e 83       	std	Y+6, r23	; 0x06
     fe4:	6d 83       	std	Y+5, r22	; 0x05
     fe6:	4f 83       	std	Y+7, r20	; 0x07
     fe8:	1a 82       	std	Y+2, r1	; 0x02
     fea:	8f 81       	ldd	r24, Y+7	; 0x07
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	40 f5       	brcc	.+80     	; 0x1040 <LCD_voidStoreCustomChar+0x76>
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	88 0f       	add	r24, r24
     ff4:	88 0f       	add	r24, r24
     ff6:	88 0f       	add	r24, r24
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	6a 81       	ldd	r22, Y+2	; 0x02
    1006:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
    100a:	19 82       	std	Y+1, r1	; 0x01
    100c:	11 c0       	rjmp	.+34     	; 0x1030 <LCD_voidStoreCustomChar+0x66>
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	fc 01       	movw	r30, r24
    101e:	20 81       	ld	r18, Z
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	62 2f       	mov	r22, r18
    1026:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_voidSendChar>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	60 f3       	brcs	.-40     	; 0x100e <LCD_voidStoreCustomChar+0x44>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidWriteCmd>
    1040:	00 00       	nop
    1042:	27 96       	adiw	r28, 0x07	; 7
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <LCD_voidWriteCmd>:
/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	eb 97       	sbiw	r28, 0x3b	; 59
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	9a af       	std	Y+58, r25	; 0x3a
    106a:	89 af       	std	Y+57, r24	; 0x39
    106c:	6b af       	std	Y+59, r22	; 0x3b
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
    106e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1070:	82 95       	swap	r24
    1072:	8f 70       	andi	r24, 0x0F	; 15
    1074:	38 2f       	mov	r19, r24
    1076:	31 70       	andi	r19, 0x01	; 1
    1078:	89 ad       	ldd	r24, Y+57	; 0x39
    107a:	9a ad       	ldd	r25, Y+58	; 0x3a
    107c:	fc 01       	movw	r30, r24
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	05 96       	adiw	r24, 0x05	; 5
    1084:	fc 01       	movw	r30, r24
    1086:	20 81       	ld	r18, Z
    1088:	89 ad       	ldd	r24, Y+57	; 0x39
    108a:	9a ad       	ldd	r25, Y+58	; 0x3a
    108c:	fc 01       	movw	r30, r24
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	04 96       	adiw	r24, 0x04	; 4
    1094:	fc 01       	movw	r30, r24
    1096:	80 81       	ld	r24, Z
    1098:	43 2f       	mov	r20, r19
    109a:	62 2f       	mov	r22, r18
    109c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
    10a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    10a2:	82 95       	swap	r24
    10a4:	86 95       	lsr	r24
    10a6:	87 70       	andi	r24, 0x07	; 7
    10a8:	38 2f       	mov	r19, r24
    10aa:	31 70       	andi	r19, 0x01	; 1
    10ac:	89 ad       	ldd	r24, Y+57	; 0x39
    10ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    10b0:	fc 01       	movw	r30, r24
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	07 96       	adiw	r24, 0x07	; 7
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 81       	ld	r18, Z
    10bc:	89 ad       	ldd	r24, Y+57	; 0x39
    10be:	9a ad       	ldd	r25, Y+58	; 0x3a
    10c0:	fc 01       	movw	r30, r24
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	06 96       	adiw	r24, 0x06	; 6
    10c8:	fc 01       	movw	r30, r24
    10ca:	80 81       	ld	r24, Z
    10cc:	43 2f       	mov	r20, r19
    10ce:	62 2f       	mov	r22, r18
    10d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
    10d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    10d6:	82 95       	swap	r24
    10d8:	86 95       	lsr	r24
    10da:	86 95       	lsr	r24
    10dc:	83 70       	andi	r24, 0x03	; 3
    10de:	38 2f       	mov	r19, r24
    10e0:	31 70       	andi	r19, 0x01	; 1
    10e2:	89 ad       	ldd	r24, Y+57	; 0x39
    10e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    10e6:	fc 01       	movw	r30, r24
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	93 81       	ldd	r25, Z+3	; 0x03
    10ec:	09 96       	adiw	r24, 0x09	; 9
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 81       	ld	r18, Z
    10f2:	89 ad       	ldd	r24, Y+57	; 0x39
    10f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    10f6:	fc 01       	movw	r30, r24
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	08 96       	adiw	r24, 0x08	; 8
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	43 2f       	mov	r20, r19
    1104:	62 2f       	mov	r22, r18
    1106:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
    110a:	8b ad       	ldd	r24, Y+59	; 0x3b
    110c:	38 2f       	mov	r19, r24
    110e:	33 1f       	adc	r19, r19
    1110:	33 27       	eor	r19, r19
    1112:	33 1f       	adc	r19, r19
    1114:	89 ad       	ldd	r24, Y+57	; 0x39
    1116:	9a ad       	ldd	r25, Y+58	; 0x3a
    1118:	fc 01       	movw	r30, r24
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	0b 96       	adiw	r24, 0x0b	; 11
    1120:	fc 01       	movw	r30, r24
    1122:	20 81       	ld	r18, Z
    1124:	89 ad       	ldd	r24, Y+57	; 0x39
    1126:	9a ad       	ldd	r25, Y+58	; 0x3a
    1128:	fc 01       	movw	r30, r24
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	0a 96       	adiw	r24, 0x0a	; 10
    1130:	fc 01       	movw	r30, r24
    1132:	80 81       	ld	r24, Z
    1134:	43 2f       	mov	r20, r19
    1136:	62 2f       	mov	r22, r18
    1138:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
    113c:	89 ad       	ldd	r24, Y+57	; 0x39
    113e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1140:	fc 01       	movw	r30, r24
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	03 96       	adiw	r24, 0x03	; 3
    1148:	fc 01       	movw	r30, r24
    114a:	20 81       	ld	r18, Z
    114c:	89 ad       	ldd	r24, Y+57	; 0x39
    114e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1150:	fc 01       	movw	r30, r24
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	02 96       	adiw	r24, 0x02	; 2
    1158:	fc 01       	movw	r30, r24
    115a:	80 81       	ld	r24, Z
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	62 2f       	mov	r22, r18
    1160:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
    1164:	89 ad       	ldd	r24, Y+57	; 0x39
    1166:	9a ad       	ldd	r25, Y+58	; 0x3a
    1168:	fc 01       	movw	r30, r24
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	fc 01       	movw	r30, r24
    1172:	20 81       	ld	r18, Z
    1174:	89 ad       	ldd	r24, Y+57	; 0x39
    1176:	9a ad       	ldd	r25, Y+58	; 0x3a
    1178:	fc 01       	movw	r30, r24
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	fc 01       	movw	r30, r24
    1180:	80 81       	ld	r24, Z
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	62 2f       	mov	r22, r18
    1186:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a0 e8       	ldi	r26, 0x80	; 128
    1190:	bf e3       	ldi	r27, 0x3F	; 63
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	ab 83       	std	Y+3, r26	; 0x03
    1198:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a e7       	ldi	r20, 0x7A	; 122
    11a0:	55 e4       	ldi	r21, 0x45	; 69
    11a2:	69 81       	ldd	r22, Y+1	; 0x01
    11a4:	7a 81       	ldd	r23, Y+2	; 0x02
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	8f a7       	std	Y+47, r24	; 0x2f
    11b4:	98 ab       	std	Y+48, r25	; 0x30
    11b6:	a9 ab       	std	Y+49, r26	; 0x31
    11b8:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e8       	ldi	r20, 0x80	; 128
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	6f a5       	ldd	r22, Y+47	; 0x2f
    11c4:	78 a9       	ldd	r23, Y+48	; 0x30
    11c6:	89 a9       	ldd	r24, Y+49	; 0x31
    11c8:	9a a9       	ldd	r25, Y+50	; 0x32
    11ca:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	2c f4       	brge	.+10     	; 0x11dc <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9c ab       	std	Y+52, r25	; 0x34
    11d8:	8b ab       	std	Y+51, r24	; 0x33
    11da:	3f c0       	rjmp	.+126    	; 0x125a <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	6f a5       	ldd	r22, Y+47	; 0x2f
    11e6:	78 a9       	ldd	r23, Y+48	; 0x30
    11e8:	89 a9       	ldd	r24, Y+49	; 0x31
    11ea:	9a a9       	ldd	r25, Y+50	; 0x32
    11ec:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
    11f0:	18 16       	cp	r1, r24
    11f2:	4c f5       	brge	.+82     	; 0x1246 <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	69 81       	ldd	r22, Y+1	; 0x01
    11fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9c ab       	std	Y+52, r25	; 0x34
    121a:	8b ab       	std	Y+51, r24	; 0x33
    121c:	0f c0       	rjmp	.+30     	; 0x123c <LCD_voidWriteCmd+0x1e8>
    121e:	80 e9       	ldi	r24, 0x90	; 144
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	9e ab       	std	Y+54, r25	; 0x36
    1224:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1226:	8d a9       	ldd	r24, Y+53	; 0x35
    1228:	9e a9       	ldd	r25, Y+54	; 0x36
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <LCD_voidWriteCmd+0x1d6>
    122e:	9e ab       	std	Y+54, r25	; 0x36
    1230:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1232:	8b a9       	ldd	r24, Y+51	; 0x33
    1234:	9c a9       	ldd	r25, Y+52	; 0x34
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	9c ab       	std	Y+52, r25	; 0x34
    123a:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	89 2b       	or	r24, r25
    1242:	69 f7       	brne	.-38     	; 0x121e <LCD_voidWriteCmd+0x1ca>
    1244:	14 c0       	rjmp	.+40     	; 0x126e <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1246:	6f a5       	ldd	r22, Y+47	; 0x2f
    1248:	78 a9       	ldd	r23, Y+48	; 0x30
    124a:	89 a9       	ldd	r24, Y+49	; 0x31
    124c:	9a a9       	ldd	r25, Y+50	; 0x32
    124e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	9c ab       	std	Y+52, r25	; 0x34
    1258:	8b ab       	std	Y+51, r24	; 0x33
    125a:	8b a9       	ldd	r24, Y+51	; 0x33
    125c:	9c a9       	ldd	r25, Y+52	; 0x34
    125e:	98 af       	std	Y+56, r25	; 0x38
    1260:	8f ab       	std	Y+55, r24	; 0x37
    1262:	8f a9       	ldd	r24, Y+55	; 0x37
    1264:	98 ad       	ldd	r25, Y+56	; 0x38
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <LCD_voidWriteCmd+0x212>
    126a:	98 af       	std	Y+56, r25	; 0x38
    126c:	8f ab       	std	Y+55, r24	; 0x37
    126e:	89 ad       	ldd	r24, Y+57	; 0x39
    1270:	9a ad       	ldd	r25, Y+58	; 0x3a
    1272:	fc 01       	movw	r30, r24
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	fc 01       	movw	r30, r24
    127c:	20 81       	ld	r18, Z
    127e:	89 ad       	ldd	r24, Y+57	; 0x39
    1280:	9a ad       	ldd	r25, Y+58	; 0x3a
    1282:	fc 01       	movw	r30, r24
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	fc 01       	movw	r30, r24
    128a:	80 81       	ld	r24, Z
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	62 2f       	mov	r22, r18
    1290:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 ea       	ldi	r26, 0xA0	; 160
    129a:	b1 e4       	ldi	r27, 0x41	; 65
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	af 83       	std	Y+7, r26	; 0x07
    12a2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a e7       	ldi	r20, 0x7A	; 122
    12aa:	55 e4       	ldi	r21, 0x45	; 69
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8d a3       	std	Y+37, r24	; 0x25
    12be:	9e a3       	std	Y+38, r25	; 0x26
    12c0:	af a3       	std	Y+39, r26	; 0x27
    12c2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	6d a1       	ldd	r22, Y+37	; 0x25
    12ce:	7e a1       	ldd	r23, Y+38	; 0x26
    12d0:	8f a1       	ldd	r24, Y+39	; 0x27
    12d2:	98 a5       	ldd	r25, Y+40	; 0x28
    12d4:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_voidWriteCmd+0x292>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a7       	std	Y+42, r25	; 0x2a
    12e2:	89 a7       	std	Y+41, r24	; 0x29
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_voidWriteCmd+0x310>
	else if (__tmp > 65535)
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	6d a1       	ldd	r22, Y+37	; 0x25
    12f0:	7e a1       	ldd	r23, Y+38	; 0x26
    12f2:	8f a1       	ldd	r24, Y+39	; 0x27
    12f4:	98 a5       	ldd	r25, Y+40	; 0x28
    12f6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_voidWriteCmd+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	6d 81       	ldd	r22, Y+5	; 0x05
    1308:	7e 81       	ldd	r23, Y+6	; 0x06
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a7       	std	Y+42, r25	; 0x2a
    1324:	89 a7       	std	Y+41, r24	; 0x29
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_voidWriteCmd+0x2f2>
    1328:	80 e9       	ldi	r24, 0x90	; 144
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	9c a7       	std	Y+44, r25	; 0x2c
    132e:	8b a7       	std	Y+43, r24	; 0x2b
    1330:	8b a5       	ldd	r24, Y+43	; 0x2b
    1332:	9c a5       	ldd	r25, Y+44	; 0x2c
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_voidWriteCmd+0x2e0>
    1338:	9c a7       	std	Y+44, r25	; 0x2c
    133a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a5       	ldd	r24, Y+41	; 0x29
    133e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a7       	std	Y+42, r25	; 0x2a
    1344:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a5       	ldd	r24, Y+41	; 0x29
    1348:	9a a5       	ldd	r25, Y+42	; 0x2a
    134a:	89 2b       	or	r24, r25
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_voidWriteCmd+0x2d4>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_voidWriteCmd+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6d a1       	ldd	r22, Y+37	; 0x25
    1352:	7e a1       	ldd	r23, Y+38	; 0x26
    1354:	8f a1       	ldd	r24, Y+39	; 0x27
    1356:	98 a5       	ldd	r25, Y+40	; 0x28
    1358:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a7       	std	Y+42, r25	; 0x2a
    1362:	89 a7       	std	Y+41, r24	; 0x29
    1364:	89 a5       	ldd	r24, Y+41	; 0x29
    1366:	9a a5       	ldd	r25, Y+42	; 0x2a
    1368:	9e a7       	std	Y+46, r25	; 0x2e
    136a:	8d a7       	std	Y+45, r24	; 0x2d
    136c:	8d a5       	ldd	r24, Y+45	; 0x2d
    136e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_voidWriteCmd+0x31c>
    1374:	9e a7       	std	Y+46, r25	; 0x2e
    1376:	8d a7       	std	Y+45, r24	; 0x2d
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
    1378:	8b ad       	ldd	r24, Y+59	; 0x3b
    137a:	38 2f       	mov	r19, r24
    137c:	31 70       	andi	r19, 0x01	; 1
    137e:	89 ad       	ldd	r24, Y+57	; 0x39
    1380:	9a ad       	ldd	r25, Y+58	; 0x3a
    1382:	fc 01       	movw	r30, r24
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	05 96       	adiw	r24, 0x05	; 5
    138a:	fc 01       	movw	r30, r24
    138c:	20 81       	ld	r18, Z
    138e:	89 ad       	ldd	r24, Y+57	; 0x39
    1390:	9a ad       	ldd	r25, Y+58	; 0x3a
    1392:	fc 01       	movw	r30, r24
    1394:	82 81       	ldd	r24, Z+2	; 0x02
    1396:	93 81       	ldd	r25, Z+3	; 0x03
    1398:	04 96       	adiw	r24, 0x04	; 4
    139a:	fc 01       	movw	r30, r24
    139c:	80 81       	ld	r24, Z
    139e:	43 2f       	mov	r20, r19
    13a0:	62 2f       	mov	r22, r18
    13a2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
    13a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    13a8:	86 95       	lsr	r24
    13aa:	38 2f       	mov	r19, r24
    13ac:	31 70       	andi	r19, 0x01	; 1
    13ae:	89 ad       	ldd	r24, Y+57	; 0x39
    13b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13b2:	fc 01       	movw	r30, r24
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	07 96       	adiw	r24, 0x07	; 7
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 81       	ld	r18, Z
    13be:	89 ad       	ldd	r24, Y+57	; 0x39
    13c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13c2:	fc 01       	movw	r30, r24
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	06 96       	adiw	r24, 0x06	; 6
    13ca:	fc 01       	movw	r30, r24
    13cc:	80 81       	ld	r24, Z
    13ce:	43 2f       	mov	r20, r19
    13d0:	62 2f       	mov	r22, r18
    13d2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
    13d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    13d8:	86 95       	lsr	r24
    13da:	86 95       	lsr	r24
    13dc:	38 2f       	mov	r19, r24
    13de:	31 70       	andi	r19, 0x01	; 1
    13e0:	89 ad       	ldd	r24, Y+57	; 0x39
    13e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13e4:	fc 01       	movw	r30, r24
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	09 96       	adiw	r24, 0x09	; 9
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 81       	ld	r18, Z
    13f0:	89 ad       	ldd	r24, Y+57	; 0x39
    13f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13f4:	fc 01       	movw	r30, r24
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	08 96       	adiw	r24, 0x08	; 8
    13fc:	fc 01       	movw	r30, r24
    13fe:	80 81       	ld	r24, Z
    1400:	43 2f       	mov	r20, r19
    1402:	62 2f       	mov	r22, r18
    1404:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
    1408:	8b ad       	ldd	r24, Y+59	; 0x3b
    140a:	86 95       	lsr	r24
    140c:	86 95       	lsr	r24
    140e:	86 95       	lsr	r24
    1410:	38 2f       	mov	r19, r24
    1412:	31 70       	andi	r19, 0x01	; 1
    1414:	89 ad       	ldd	r24, Y+57	; 0x39
    1416:	9a ad       	ldd	r25, Y+58	; 0x3a
    1418:	fc 01       	movw	r30, r24
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	0b 96       	adiw	r24, 0x0b	; 11
    1420:	fc 01       	movw	r30, r24
    1422:	20 81       	ld	r18, Z
    1424:	89 ad       	ldd	r24, Y+57	; 0x39
    1426:	9a ad       	ldd	r25, Y+58	; 0x3a
    1428:	fc 01       	movw	r30, r24
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	0a 96       	adiw	r24, 0x0a	; 10
    1430:	fc 01       	movw	r30, r24
    1432:	80 81       	ld	r24, Z
    1434:	43 2f       	mov	r20, r19
    1436:	62 2f       	mov	r22, r18
    1438:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
    143c:	89 ad       	ldd	r24, Y+57	; 0x39
    143e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1440:	fc 01       	movw	r30, r24
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	03 96       	adiw	r24, 0x03	; 3
    1448:	fc 01       	movw	r30, r24
    144a:	20 81       	ld	r18, Z
    144c:	89 ad       	ldd	r24, Y+57	; 0x39
    144e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1450:	fc 01       	movw	r30, r24
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	02 96       	adiw	r24, 0x02	; 2
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	62 2f       	mov	r22, r18
    1460:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
    1464:	89 ad       	ldd	r24, Y+57	; 0x39
    1466:	9a ad       	ldd	r25, Y+58	; 0x3a
    1468:	fc 01       	movw	r30, r24
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	fc 01       	movw	r30, r24
    1472:	20 81       	ld	r18, Z
    1474:	89 ad       	ldd	r24, Y+57	; 0x39
    1476:	9a ad       	ldd	r25, Y+58	; 0x3a
    1478:	fc 01       	movw	r30, r24
    147a:	82 81       	ldd	r24, Z+2	; 0x02
    147c:	93 81       	ldd	r25, Z+3	; 0x03
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	62 2f       	mov	r22, r18
    1486:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a0 e8       	ldi	r26, 0x80	; 128
    1490:	bf e3       	ldi	r27, 0x3F	; 63
    1492:	89 87       	std	Y+9, r24	; 0x09
    1494:	9a 87       	std	Y+10, r25	; 0x0a
    1496:	ab 87       	std	Y+11, r26	; 0x0b
    1498:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a e7       	ldi	r20, 0x7A	; 122
    14a0:	55 e4       	ldi	r21, 0x45	; 69
    14a2:	69 85       	ldd	r22, Y+9	; 0x09
    14a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    14a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14aa:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8b 8f       	std	Y+27, r24	; 0x1b
    14b4:	9c 8f       	std	Y+28, r25	; 0x1c
    14b6:	ad 8f       	std	Y+29, r26	; 0x1d
    14b8:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    14c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    14c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ca:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	2c f4       	brge	.+10     	; 0x14dc <LCD_voidWriteCmd+0x488>
		__ticks = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	98 a3       	std	Y+32, r25	; 0x20
    14d8:	8f 8f       	std	Y+31, r24	; 0x1f
    14da:	3f c0       	rjmp	.+126    	; 0x155a <LCD_voidWriteCmd+0x506>
	else if (__tmp > 65535)
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    14e6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    14e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ec:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	4c f5       	brge	.+82     	; 0x1546 <LCD_voidWriteCmd+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	69 85       	ldd	r22, Y+9	; 0x09
    14fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1500:	8b 85       	ldd	r24, Y+11	; 0x0b
    1502:	9c 85       	ldd	r25, Y+12	; 0x0c
    1504:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	98 a3       	std	Y+32, r25	; 0x20
    151a:	8f 8f       	std	Y+31, r24	; 0x1f
    151c:	0f c0       	rjmp	.+30     	; 0x153c <LCD_voidWriteCmd+0x4e8>
    151e:	80 e9       	ldi	r24, 0x90	; 144
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	9a a3       	std	Y+34, r25	; 0x22
    1524:	89 a3       	std	Y+33, r24	; 0x21
    1526:	89 a1       	ldd	r24, Y+33	; 0x21
    1528:	9a a1       	ldd	r25, Y+34	; 0x22
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <LCD_voidWriteCmd+0x4d6>
    152e:	9a a3       	std	Y+34, r25	; 0x22
    1530:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1532:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1534:	98 a1       	ldd	r25, Y+32	; 0x20
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	98 a3       	std	Y+32, r25	; 0x20
    153a:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    153e:	98 a1       	ldd	r25, Y+32	; 0x20
    1540:	89 2b       	or	r24, r25
    1542:	69 f7       	brne	.-38     	; 0x151e <LCD_voidWriteCmd+0x4ca>
    1544:	14 c0       	rjmp	.+40     	; 0x156e <LCD_voidWriteCmd+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1546:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1548:	7c 8d       	ldd	r23, Y+28	; 0x1c
    154a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    154e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	98 a3       	std	Y+32, r25	; 0x20
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
    155a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155c:	98 a1       	ldd	r25, Y+32	; 0x20
    155e:	9c a3       	std	Y+36, r25	; 0x24
    1560:	8b a3       	std	Y+35, r24	; 0x23
    1562:	8b a1       	ldd	r24, Y+35	; 0x23
    1564:	9c a1       	ldd	r25, Y+36	; 0x24
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <LCD_voidWriteCmd+0x512>
    156a:	9c a3       	std	Y+36, r25	; 0x24
    156c:	8b a3       	std	Y+35, r24	; 0x23
    156e:	89 ad       	ldd	r24, Y+57	; 0x39
    1570:	9a ad       	ldd	r25, Y+58	; 0x3a
    1572:	fc 01       	movw	r30, r24
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	fc 01       	movw	r30, r24
    157c:	20 81       	ld	r18, Z
    157e:	89 ad       	ldd	r24, Y+57	; 0x39
    1580:	9a ad       	ldd	r25, Y+58	; 0x3a
    1582:	fc 01       	movw	r30, r24
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	62 2f       	mov	r22, r18
    1590:	0e 94 52 02 	call	0x4a4	; 0x4a4 <GPIO_voidSetPinValue>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 ea       	ldi	r26, 0xA0	; 160
    159a:	b1 e4       	ldi	r27, 0x41	; 65
    159c:	8d 87       	std	Y+13, r24	; 0x0d
    159e:	9e 87       	std	Y+14, r25	; 0x0e
    15a0:	af 87       	std	Y+15, r26	; 0x0f
    15a2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e7       	ldi	r20, 0x7A	; 122
    15aa:	55 e4       	ldi	r21, 0x45	; 69
    15ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    15ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    15b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b2:	98 89       	ldd	r25, Y+16	; 0x10
    15b4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	89 8b       	std	Y+17, r24	; 0x11
    15be:	9a 8b       	std	Y+18, r25	; 0x12
    15c0:	ab 8b       	std	Y+19, r26	; 0x13
    15c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	69 89       	ldd	r22, Y+17	; 0x11
    15ce:	7a 89       	ldd	r23, Y+18	; 0x12
    15d0:	8b 89       	ldd	r24, Y+19	; 0x13
    15d2:	9c 89       	ldd	r25, Y+20	; 0x14
    15d4:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <LCD_voidWriteCmd+0x592>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9e 8b       	std	Y+22, r25	; 0x16
    15e2:	8d 8b       	std	Y+21, r24	; 0x15
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <LCD_voidWriteCmd+0x610>
	else if (__tmp > 65535)
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	69 89       	ldd	r22, Y+17	; 0x11
    15f0:	7a 89       	ldd	r23, Y+18	; 0x12
    15f2:	8b 89       	ldd	r24, Y+19	; 0x13
    15f4:	9c 89       	ldd	r25, Y+20	; 0x14
    15f6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <LCD_voidWriteCmd+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	6d 85       	ldd	r22, Y+13	; 0x0d
    1608:	7e 85       	ldd	r23, Y+14	; 0x0e
    160a:	8f 85       	ldd	r24, Y+15	; 0x0f
    160c:	98 89       	ldd	r25, Y+16	; 0x10
    160e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 8b       	std	Y+22, r25	; 0x16
    1624:	8d 8b       	std	Y+21, r24	; 0x15
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <LCD_voidWriteCmd+0x5f2>
    1628:	80 e9       	ldi	r24, 0x90	; 144
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	98 8f       	std	Y+24, r25	; 0x18
    162e:	8f 8b       	std	Y+23, r24	; 0x17
    1630:	8f 89       	ldd	r24, Y+23	; 0x17
    1632:	98 8d       	ldd	r25, Y+24	; 0x18
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_voidWriteCmd+0x5e0>
    1638:	98 8f       	std	Y+24, r25	; 0x18
    163a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	8d 89       	ldd	r24, Y+21	; 0x15
    163e:	9e 89       	ldd	r25, Y+22	; 0x16
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9e 8b       	std	Y+22, r25	; 0x16
    1644:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	8d 89       	ldd	r24, Y+21	; 0x15
    1648:	9e 89       	ldd	r25, Y+22	; 0x16
    164a:	89 2b       	or	r24, r25
    164c:	69 f7       	brne	.-38     	; 0x1628 <LCD_voidWriteCmd+0x5d4>

#endif
}
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <LCD_voidWriteCmd+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	69 89       	ldd	r22, Y+17	; 0x11
    1652:	7a 89       	ldd	r23, Y+18	; 0x12
    1654:	8b 89       	ldd	r24, Y+19	; 0x13
    1656:	9c 89       	ldd	r25, Y+20	; 0x14
    1658:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9e 8b       	std	Y+22, r25	; 0x16
    1662:	8d 8b       	std	Y+21, r24	; 0x15
    1664:	8d 89       	ldd	r24, Y+21	; 0x15
    1666:	9e 89       	ldd	r25, Y+22	; 0x16
    1668:	9a 8f       	std	Y+26, r25	; 0x1a
    166a:	89 8f       	std	Y+25, r24	; 0x19
    166c:	89 8d       	ldd	r24, Y+25	; 0x19
    166e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_voidWriteCmd+0x61c>
    1674:	9a 8f       	std	Y+26, r25	; 0x1a
    1676:	89 8f       	std	Y+25, r24	; 0x19
    1678:	00 00       	nop
    167a:	eb 96       	adiw	r28, 0x3b	; 59
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <progressBar>:
  0x1F,
  0x1F,
  0x1F
};
void progressBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	65 97       	sbiw	r28, 0x15	; 21
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	9a 8b       	std	Y+18, r25	; 0x12
    16a2:	89 8b       	std	Y+17, r24	; 0x11
    16a4:	6b 8b       	std	Y+19, r22	; 0x13
    16a6:	5d 8b       	std	Y+21, r21	; 0x15
    16a8:	4c 8b       	std	Y+20, r20	; 0x14

	LCD_voidStoreCustomChar(myLCD ,LCD_ProgrssBarChar , 0);
    16aa:	89 89       	ldd	r24, Y+17	; 0x11
    16ac:	9a 89       	ldd	r25, Y+18	; 0x12
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	6c e6       	ldi	r22, 0x6C	; 108
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	0e 94 e5 07 	call	0xfca	; 0xfca <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,0,1);
    16b8:	89 89       	ldd	r24, Y+17	; 0x11
    16ba:	9a 89       	ldd	r25, Y+18	; 0x12
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	0e 94 b1 07 	call	0xf62	; 0xf62 <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ; 
    16c4:	8b 89       	ldd	r24, Y+19	; 0x13
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	82 95       	swap	r24
    16cc:	92 95       	swap	r25
    16ce:	90 7f       	andi	r25, 0xF0	; 240
    16d0:	98 27       	eor	r25, r24
    16d2:	80 7f       	andi	r24, 0xF0	; 240
    16d4:	98 27       	eor	r25, r24
    16d6:	24 e6       	ldi	r18, 0x64	; 100
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__divmodhi4>
    16e0:	cb 01       	movw	r24, r22
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
	for(int i = 0 ; i < prcentage ; i++)
    16e4:	1a 82       	std	Y+2, r1	; 0x02
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	83 c0       	rjmp	.+262    	; 0x17f0 <progressBar+0x164>
	{
		LCD_voidSendChar(myLCD,0);
    16ea:	89 89       	ldd	r24, Y+17	; 0x11
    16ec:	9a 89       	ldd	r25, Y+18	; 0x12
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
    16f4:	8c 89       	ldd	r24, Y+20	; 0x14
    16f6:	9d 89       	ldd	r25, Y+21	; 0x15
    16f8:	cc 01       	movw	r24, r24
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__floatunsisf>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8b 83       	std	Y+3, r24	; 0x03
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	ad 83       	std	Y+5, r26	; 0x05
    1710:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	55 e4       	ldi	r21, 0x45	; 69
    171a:	6b 81       	ldd	r22, Y+3	; 0x03
    171c:	7c 81       	ldd	r23, Y+4	; 0x04
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8f 83       	std	Y+7, r24	; 0x07
    172c:	98 87       	std	Y+8, r25	; 0x08
    172e:	a9 87       	std	Y+9, r26	; 0x09
    1730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	0e 94 85 0c 	call	0x190a	; 0x190a <__cmpsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <progressBar+0xc8>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 87       	std	Y+12, r25	; 0x0c
    1750:	8b 87       	std	Y+11, r24	; 0x0b
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <progressBar+0x146>
	else if (__tmp > 65535)
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <progressBar+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	6b 81       	ldd	r22, Y+3	; 0x03
    1776:	7c 81       	ldd	r23, Y+4	; 0x04
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9c 87       	std	Y+12, r25	; 0x0c
    1792:	8b 87       	std	Y+11, r24	; 0x0b
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <progressBar+0x128>
    1796:	80 e9       	ldi	r24, 0x90	; 144
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	9e 87       	std	Y+14, r25	; 0x0e
    179c:	8d 87       	std	Y+13, r24	; 0x0d
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <progressBar+0x116>
    17a6:	9e 87       	std	Y+14, r25	; 0x0e
    17a8:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17b8:	89 2b       	or	r24, r25
    17ba:	69 f7       	brne	.-38     	; 0x1796 <progressBar+0x10a>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <progressBar+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 87       	std	Y+12, r25	; 0x0c
    17d0:	8b 87       	std	Y+11, r24	; 0x0b
    17d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d6:	98 8b       	std	Y+16, r25	; 0x10
    17d8:	8f 87       	std	Y+15, r24	; 0x0f
    17da:	8f 85       	ldd	r24, Y+15	; 0x0f
    17dc:	98 89       	ldd	r25, Y+16	; 0x10
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <progressBar+0x152>
    17e2:	98 8b       	std	Y+16, r25	; 0x10
    17e4:	8f 87       	std	Y+15, r24	; 0x0f
{

	LCD_voidStoreCustomChar(myLCD ,LCD_ProgrssBarChar , 0);
	LCD_voidGotoXY(myLCD,0,1);
	prcentage = (u8)((prcentage * 16 )/100) ; 
	for(int i = 0 ; i < prcentage ; i++)
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	8b 89       	ldd	r24, Y+19	; 0x13
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	82 17       	cp	r24, r18
    17fc:	93 07       	cpc	r25, r19
    17fe:	0c f4       	brge	.+2      	; 0x1802 <progressBar+0x176>
    1800:	74 cf       	rjmp	.-280    	; 0x16ea <progressBar+0x5e>
	{
		LCD_voidSendChar(myLCD,0);
		_delay_ms(delayOfBar);
	}
	
}
    1802:	00 00       	nop
    1804:	65 96       	adiw	r28, 0x15	; 21
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <main>:

int main(void)
{
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	00 d0       	rcall	.+0      	; 0x181c <main+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <main+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
	LCD_Config myLCD ; 
	myLCD.LCD_SIZE_Rows = 2 ; 
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	89 83       	std	Y+1, r24	; 0x01
	myLCD.LCD_SIZE_Cols = 16 ; 
    1826:	80 e1       	ldi	r24, 0x10	; 16
    1828:	8a 83       	std	Y+2, r24	; 0x02
	myLCD.LCD_PortPins = arr ;
    182a:	80 e6       	ldi	r24, 0x60	; 96
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidInit(&myLCD); 
    1832:	ce 01       	movw	r24, r28
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_voidInit>
	LCD_voidSendString(&myLCD,addString("HI Abnaby Wait"));
    183a:	64 e7       	ldi	r22, 0x74	; 116
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	0e 94 7f 07 	call	0xefe	; 0xefe <LCD_voidSendString>
	progressBar(&myLCD,100,500); 
    1846:	44 ef       	ldi	r20, 0xF4	; 244
    1848:	51 e0       	ldi	r21, 0x01	; 1
    184a:	64 e6       	ldi	r22, 0x64	; 100
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	0e 94 46 0b 	call	0x168c	; 0x168c <progressBar>
	while(1)
	{

		
	}
    1854:	ff cf       	rjmp	.-2      	; 0x1854 <main+0x3e>

00001856 <__vector_11>:
			break ;	
	}
	return LOC_u8Result ; 
}
 void __vector_11(void)	//USART, Rx Complete
{
    1856:	1f 92       	push	r1
    1858:	0f 92       	push	r0
    185a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	2f 93       	push	r18
    1864:	3f 93       	push	r19
    1866:	8f 93       	push	r24
    1868:	9f 93       	push	r25
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	*Global_u8Rx = USART_UDR;
    1876:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <Global_u8Rx>
    187a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <Global_u8Rx+0x1>
    187e:	2c e2       	ldi	r18, 0x2C	; 44
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	f9 01       	movw	r30, r18
    1884:	20 81       	ld	r18, Z
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
}
    188a:	00 00       	nop
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	9f 91       	pop	r25
    1896:	8f 91       	pop	r24
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <__vector_13>:

 void __vector_13(void)    //USART, Tx Complete
{
    18a8:	1f 92       	push	r1
    18aa:	0f 92       	push	r0
    18ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    18b0:	0f 92       	push	r0
    18b2:	11 24       	eor	r1, r1
    18b4:	2f 93       	push	r18
    18b6:	3f 93       	push	r19
    18b8:	4f 93       	push	r20
    18ba:	5f 93       	push	r21
    18bc:	6f 93       	push	r22
    18be:	7f 93       	push	r23
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	af 93       	push	r26
    18c6:	bf 93       	push	r27
    18c8:	ef 93       	push	r30
    18ca:	ff 93       	push	r31
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	Global_TxComplate();
    18d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
    18d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
    18dc:	fc 01       	movw	r30, r24
    18de:	09 95       	icall
}
    18e0:	00 00       	nop
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	7f 91       	pop	r23
    18f4:	6f 91       	pop	r22
    18f6:	5f 91       	pop	r21
    18f8:	4f 91       	pop	r20
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__cmpsf2>:
    190a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_cmp>
    190e:	08 f4       	brcc	.+2      	; 0x1912 <__cmpsf2+0x8>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	08 95       	ret

00001914 <__fixunssfsi>:
    1914:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_splitA>
    1918:	88 f0       	brcs	.+34     	; 0x193c <__fixunssfsi+0x28>
    191a:	9f 57       	subi	r25, 0x7F	; 127
    191c:	98 f0       	brcs	.+38     	; 0x1944 <__fixunssfsi+0x30>
    191e:	b9 2f       	mov	r27, r25
    1920:	99 27       	eor	r25, r25
    1922:	b7 51       	subi	r27, 0x17	; 23
    1924:	b0 f0       	brcs	.+44     	; 0x1952 <__fixunssfsi+0x3e>
    1926:	e1 f0       	breq	.+56     	; 0x1960 <__fixunssfsi+0x4c>
    1928:	66 0f       	add	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	88 1f       	adc	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	1a f0       	brmi	.+6      	; 0x1938 <__fixunssfsi+0x24>
    1932:	ba 95       	dec	r27
    1934:	c9 f7       	brne	.-14     	; 0x1928 <__fixunssfsi+0x14>
    1936:	14 c0       	rjmp	.+40     	; 0x1960 <__fixunssfsi+0x4c>
    1938:	b1 30       	cpi	r27, 0x01	; 1
    193a:	91 f0       	breq	.+36     	; 0x1960 <__fixunssfsi+0x4c>
    193c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_zero>
    1940:	b1 e0       	ldi	r27, 0x01	; 1
    1942:	08 95       	ret
    1944:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_zero>
    1948:	67 2f       	mov	r22, r23
    194a:	78 2f       	mov	r23, r24
    194c:	88 27       	eor	r24, r24
    194e:	b8 5f       	subi	r27, 0xF8	; 248
    1950:	39 f0       	breq	.+14     	; 0x1960 <__fixunssfsi+0x4c>
    1952:	b9 3f       	cpi	r27, 0xF9	; 249
    1954:	cc f3       	brlt	.-14     	; 0x1948 <__fixunssfsi+0x34>
    1956:	86 95       	lsr	r24
    1958:	77 95       	ror	r23
    195a:	67 95       	ror	r22
    195c:	b3 95       	inc	r27
    195e:	d9 f7       	brne	.-10     	; 0x1956 <__fixunssfsi+0x42>
    1960:	3e f4       	brtc	.+14     	; 0x1970 <__fixunssfsi+0x5c>
    1962:	90 95       	com	r25
    1964:	80 95       	com	r24
    1966:	70 95       	com	r23
    1968:	61 95       	neg	r22
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	8f 4f       	sbci	r24, 0xFF	; 255
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	08 95       	ret

00001972 <__floatunsisf>:
    1972:	e8 94       	clt
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <__floatsisf+0x12>

00001976 <__floatsisf>:
    1976:	97 fb       	bst	r25, 7
    1978:	3e f4       	brtc	.+14     	; 0x1988 <__floatsisf+0x12>
    197a:	90 95       	com	r25
    197c:	80 95       	com	r24
    197e:	70 95       	com	r23
    1980:	61 95       	neg	r22
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	99 23       	and	r25, r25
    198a:	a9 f0       	breq	.+42     	; 0x19b6 <__floatsisf+0x40>
    198c:	f9 2f       	mov	r31, r25
    198e:	96 e9       	ldi	r25, 0x96	; 150
    1990:	bb 27       	eor	r27, r27
    1992:	93 95       	inc	r25
    1994:	f6 95       	lsr	r31
    1996:	87 95       	ror	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	b7 95       	ror	r27
    199e:	f1 11       	cpse	r31, r1
    19a0:	f8 cf       	rjmp	.-16     	; 0x1992 <__floatsisf+0x1c>
    19a2:	fa f4       	brpl	.+62     	; 0x19e2 <__floatsisf+0x6c>
    19a4:	bb 0f       	add	r27, r27
    19a6:	11 f4       	brne	.+4      	; 0x19ac <__floatsisf+0x36>
    19a8:	60 ff       	sbrs	r22, 0
    19aa:	1b c0       	rjmp	.+54     	; 0x19e2 <__floatsisf+0x6c>
    19ac:	6f 5f       	subi	r22, 0xFF	; 255
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <__floatsisf+0x6c>
    19b6:	88 23       	and	r24, r24
    19b8:	11 f0       	breq	.+4      	; 0x19be <__floatsisf+0x48>
    19ba:	96 e9       	ldi	r25, 0x96	; 150
    19bc:	11 c0       	rjmp	.+34     	; 0x19e0 <__floatsisf+0x6a>
    19be:	77 23       	and	r23, r23
    19c0:	21 f0       	breq	.+8      	; 0x19ca <__floatsisf+0x54>
    19c2:	9e e8       	ldi	r25, 0x8E	; 142
    19c4:	87 2f       	mov	r24, r23
    19c6:	76 2f       	mov	r23, r22
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <__floatsisf+0x5e>
    19ca:	66 23       	and	r22, r22
    19cc:	71 f0       	breq	.+28     	; 0x19ea <__floatsisf+0x74>
    19ce:	96 e8       	ldi	r25, 0x86	; 134
    19d0:	86 2f       	mov	r24, r22
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	2a f0       	brmi	.+10     	; 0x19e2 <__floatsisf+0x6c>
    19d8:	9a 95       	dec	r25
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	da f7       	brpl	.-10     	; 0x19d8 <__floatsisf+0x62>
    19e2:	88 0f       	add	r24, r24
    19e4:	96 95       	lsr	r25
    19e6:	87 95       	ror	r24
    19e8:	97 f9       	bld	r25, 7
    19ea:	08 95       	ret

000019ec <__fp_cmp>:
    19ec:	99 0f       	add	r25, r25
    19ee:	00 08       	sbc	r0, r0
    19f0:	55 0f       	add	r21, r21
    19f2:	aa 0b       	sbc	r26, r26
    19f4:	e0 e8       	ldi	r30, 0x80	; 128
    19f6:	fe ef       	ldi	r31, 0xFE	; 254
    19f8:	16 16       	cp	r1, r22
    19fa:	17 06       	cpc	r1, r23
    19fc:	e8 07       	cpc	r30, r24
    19fe:	f9 07       	cpc	r31, r25
    1a00:	c0 f0       	brcs	.+48     	; 0x1a32 <__fp_cmp+0x46>
    1a02:	12 16       	cp	r1, r18
    1a04:	13 06       	cpc	r1, r19
    1a06:	e4 07       	cpc	r30, r20
    1a08:	f5 07       	cpc	r31, r21
    1a0a:	98 f0       	brcs	.+38     	; 0x1a32 <__fp_cmp+0x46>
    1a0c:	62 1b       	sub	r22, r18
    1a0e:	73 0b       	sbc	r23, r19
    1a10:	84 0b       	sbc	r24, r20
    1a12:	95 0b       	sbc	r25, r21
    1a14:	39 f4       	brne	.+14     	; 0x1a24 <__fp_cmp+0x38>
    1a16:	0a 26       	eor	r0, r26
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <__fp_cmp+0x46>
    1a1a:	23 2b       	or	r18, r19
    1a1c:	24 2b       	or	r18, r20
    1a1e:	25 2b       	or	r18, r21
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <__fp_cmp+0x3e>
    1a22:	08 95       	ret
    1a24:	0a 26       	eor	r0, r26
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <__fp_cmp+0x3e>
    1a28:	a1 40       	sbci	r26, 0x01	; 1
    1a2a:	a6 95       	lsr	r26
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	81 1d       	adc	r24, r1
    1a30:	81 1d       	adc	r24, r1
    1a32:	08 95       	ret

00001a34 <__fp_split3>:
    1a34:	57 fd       	sbrc	r21, 7
    1a36:	90 58       	subi	r25, 0x80	; 128
    1a38:	44 0f       	add	r20, r20
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	59 f0       	breq	.+22     	; 0x1a54 <__fp_splitA+0x10>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <__fp_splitA+0x1a>
    1a42:	47 95       	ror	r20

00001a44 <__fp_splitA>:
    1a44:	88 0f       	add	r24, r24
    1a46:	97 fb       	bst	r25, 7
    1a48:	99 1f       	adc	r25, r25
    1a4a:	61 f0       	breq	.+24     	; 0x1a64 <__fp_splitA+0x20>
    1a4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4e:	79 f0       	breq	.+30     	; 0x1a6e <__fp_splitA+0x2a>
    1a50:	87 95       	ror	r24
    1a52:	08 95       	ret
    1a54:	12 16       	cp	r1, r18
    1a56:	13 06       	cpc	r1, r19
    1a58:	14 06       	cpc	r1, r20
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	f2 cf       	rjmp	.-28     	; 0x1a42 <__fp_split3+0xe>
    1a5e:	46 95       	lsr	r20
    1a60:	f1 df       	rcall	.-30     	; 0x1a44 <__fp_splitA>
    1a62:	08 c0       	rjmp	.+16     	; 0x1a74 <__fp_splitA+0x30>
    1a64:	16 16       	cp	r1, r22
    1a66:	17 06       	cpc	r1, r23
    1a68:	18 06       	cpc	r1, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	f1 cf       	rjmp	.-30     	; 0x1a50 <__fp_splitA+0xc>
    1a6e:	86 95       	lsr	r24
    1a70:	71 05       	cpc	r23, r1
    1a72:	61 05       	cpc	r22, r1
    1a74:	08 94       	sec
    1a76:	08 95       	ret

00001a78 <__fp_zero>:
    1a78:	e8 94       	clt

00001a7a <__fp_szero>:
    1a7a:	bb 27       	eor	r27, r27
    1a7c:	66 27       	eor	r22, r22
    1a7e:	77 27       	eor	r23, r23
    1a80:	cb 01       	movw	r24, r22
    1a82:	97 f9       	bld	r25, 7
    1a84:	08 95       	ret

00001a86 <__gesf2>:
    1a86:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_cmp>
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <__gesf2+0x8>
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__mulsf3>:
    1a90:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3x>
    1a94:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_round>
    1a98:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscA>
    1a9c:	38 f0       	brcs	.+14     	; 0x1aac <__mulsf3+0x1c>
    1a9e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscB>
    1aa2:	20 f0       	brcs	.+8      	; 0x1aac <__mulsf3+0x1c>
    1aa4:	95 23       	and	r25, r21
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <__mulsf3+0x1c>
    1aa8:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>
    1aac:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__fp_nan>
    1ab0:	11 24       	eor	r1, r1
    1ab2:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__fp_szero>

00001ab6 <__mulsf3x>:
    1ab6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fp_split3>
    1aba:	70 f3       	brcs	.-36     	; 0x1a98 <__mulsf3+0x8>

00001abc <__mulsf3_pse>:
    1abc:	95 9f       	mul	r25, r21
    1abe:	c1 f3       	breq	.-16     	; 0x1ab0 <__mulsf3+0x20>
    1ac0:	95 0f       	add	r25, r21
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	62 9f       	mul	r22, r18
    1ac8:	f0 01       	movw	r30, r0
    1aca:	72 9f       	mul	r23, r18
    1acc:	bb 27       	eor	r27, r27
    1ace:	f0 0d       	add	r31, r0
    1ad0:	b1 1d       	adc	r27, r1
    1ad2:	63 9f       	mul	r22, r19
    1ad4:	aa 27       	eor	r26, r26
    1ad6:	f0 0d       	add	r31, r0
    1ad8:	b1 1d       	adc	r27, r1
    1ada:	aa 1f       	adc	r26, r26
    1adc:	64 9f       	mul	r22, r20
    1ade:	66 27       	eor	r22, r22
    1ae0:	b0 0d       	add	r27, r0
    1ae2:	a1 1d       	adc	r26, r1
    1ae4:	66 1f       	adc	r22, r22
    1ae6:	82 9f       	mul	r24, r18
    1ae8:	22 27       	eor	r18, r18
    1aea:	b0 0d       	add	r27, r0
    1aec:	a1 1d       	adc	r26, r1
    1aee:	62 1f       	adc	r22, r18
    1af0:	73 9f       	mul	r23, r19
    1af2:	b0 0d       	add	r27, r0
    1af4:	a1 1d       	adc	r26, r1
    1af6:	62 1f       	adc	r22, r18
    1af8:	83 9f       	mul	r24, r19
    1afa:	a0 0d       	add	r26, r0
    1afc:	61 1d       	adc	r22, r1
    1afe:	22 1f       	adc	r18, r18
    1b00:	74 9f       	mul	r23, r20
    1b02:	33 27       	eor	r19, r19
    1b04:	a0 0d       	add	r26, r0
    1b06:	61 1d       	adc	r22, r1
    1b08:	23 1f       	adc	r18, r19
    1b0a:	84 9f       	mul	r24, r20
    1b0c:	60 0d       	add	r22, r0
    1b0e:	21 1d       	adc	r18, r1
    1b10:	82 2f       	mov	r24, r18
    1b12:	76 2f       	mov	r23, r22
    1b14:	6a 2f       	mov	r22, r26
    1b16:	11 24       	eor	r1, r1
    1b18:	9f 57       	subi	r25, 0x7F	; 127
    1b1a:	50 40       	sbci	r21, 0x00	; 0
    1b1c:	9a f0       	brmi	.+38     	; 0x1b44 <__mulsf3_pse+0x88>
    1b1e:	f1 f0       	breq	.+60     	; 0x1b5c <__mulsf3_pse+0xa0>
    1b20:	88 23       	and	r24, r24
    1b22:	4a f0       	brmi	.+18     	; 0x1b36 <__mulsf3_pse+0x7a>
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	bb 1f       	adc	r27, r27
    1b2a:	66 1f       	adc	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	91 50       	subi	r25, 0x01	; 1
    1b32:	50 40       	sbci	r21, 0x00	; 0
    1b34:	a9 f7       	brne	.-22     	; 0x1b20 <__mulsf3_pse+0x64>
    1b36:	9e 3f       	cpi	r25, 0xFE	; 254
    1b38:	51 05       	cpc	r21, r1
    1b3a:	80 f0       	brcs	.+32     	; 0x1b5c <__mulsf3_pse+0xa0>
    1b3c:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>
    1b40:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__fp_szero>
    1b44:	5f 3f       	cpi	r21, 0xFF	; 255
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <__mulsf3_pse+0x84>
    1b48:	98 3e       	cpi	r25, 0xE8	; 232
    1b4a:	d4 f3       	brlt	.-12     	; 0x1b40 <__mulsf3_pse+0x84>
    1b4c:	86 95       	lsr	r24
    1b4e:	77 95       	ror	r23
    1b50:	67 95       	ror	r22
    1b52:	b7 95       	ror	r27
    1b54:	f7 95       	ror	r31
    1b56:	e7 95       	ror	r30
    1b58:	9f 5f       	subi	r25, 0xFF	; 255
    1b5a:	c1 f7       	brne	.-16     	; 0x1b4c <__mulsf3_pse+0x90>
    1b5c:	fe 2b       	or	r31, r30
    1b5e:	88 0f       	add	r24, r24
    1b60:	91 1d       	adc	r25, r1
    1b62:	96 95       	lsr	r25
    1b64:	87 95       	ror	r24
    1b66:	97 f9       	bld	r25, 7
    1b68:	08 95       	ret

00001b6a <__fp_inf>:
    1b6a:	97 f9       	bld	r25, 7
    1b6c:	9f 67       	ori	r25, 0x7F	; 127
    1b6e:	80 e8       	ldi	r24, 0x80	; 128
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	08 95       	ret

00001b76 <__fp_nan>:
    1b76:	9f ef       	ldi	r25, 0xFF	; 255
    1b78:	80 ec       	ldi	r24, 0xC0	; 192
    1b7a:	08 95       	ret

00001b7c <__fp_pscA>:
    1b7c:	00 24       	eor	r0, r0
    1b7e:	0a 94       	dec	r0
    1b80:	16 16       	cp	r1, r22
    1b82:	17 06       	cpc	r1, r23
    1b84:	18 06       	cpc	r1, r24
    1b86:	09 06       	cpc	r0, r25
    1b88:	08 95       	ret

00001b8a <__fp_pscB>:
    1b8a:	00 24       	eor	r0, r0
    1b8c:	0a 94       	dec	r0
    1b8e:	12 16       	cp	r1, r18
    1b90:	13 06       	cpc	r1, r19
    1b92:	14 06       	cpc	r1, r20
    1b94:	05 06       	cpc	r0, r21
    1b96:	08 95       	ret

00001b98 <__fp_round>:
    1b98:	09 2e       	mov	r0, r25
    1b9a:	03 94       	inc	r0
    1b9c:	00 0c       	add	r0, r0
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__fp_round+0xc>
    1ba0:	88 23       	and	r24, r24
    1ba2:	52 f0       	brmi	.+20     	; 0x1bb8 <__fp_round+0x20>
    1ba4:	bb 0f       	add	r27, r27
    1ba6:	40 f4       	brcc	.+16     	; 0x1bb8 <__fp_round+0x20>
    1ba8:	bf 2b       	or	r27, r31
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <__fp_round+0x18>
    1bac:	60 ff       	sbrs	r22, 0
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <__fp_round+0x20>
    1bb0:	6f 5f       	subi	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	08 95       	ret

00001bba <__divmodhi4>:
    1bba:	97 fb       	bst	r25, 7
    1bbc:	07 2e       	mov	r0, r23
    1bbe:	16 f4       	brtc	.+4      	; 0x1bc4 <__divmodhi4+0xa>
    1bc0:	00 94       	com	r0
    1bc2:	07 d0       	rcall	.+14     	; 0x1bd2 <__divmodhi4_neg1>
    1bc4:	77 fd       	sbrc	r23, 7
    1bc6:	09 d0       	rcall	.+18     	; 0x1bda <__divmodhi4_neg2>
    1bc8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__udivmodhi4>
    1bcc:	07 fc       	sbrc	r0, 7
    1bce:	05 d0       	rcall	.+10     	; 0x1bda <__divmodhi4_neg2>
    1bd0:	3e f4       	brtc	.+14     	; 0x1be0 <__divmodhi4_exit>

00001bd2 <__divmodhi4_neg1>:
    1bd2:	90 95       	com	r25
    1bd4:	81 95       	neg	r24
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	08 95       	ret

00001bda <__divmodhi4_neg2>:
    1bda:	70 95       	com	r23
    1bdc:	61 95       	neg	r22
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255

00001be0 <__divmodhi4_exit>:
    1be0:	08 95       	ret

00001be2 <__udivmodhi4>:
    1be2:	aa 1b       	sub	r26, r26
    1be4:	bb 1b       	sub	r27, r27
    1be6:	51 e1       	ldi	r21, 0x11	; 17
    1be8:	07 c0       	rjmp	.+14     	; 0x1bf8 <__udivmodhi4_ep>

00001bea <__udivmodhi4_loop>:
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	a6 17       	cp	r26, r22
    1bf0:	b7 07       	cpc	r27, r23
    1bf2:	10 f0       	brcs	.+4      	; 0x1bf8 <__udivmodhi4_ep>
    1bf4:	a6 1b       	sub	r26, r22
    1bf6:	b7 0b       	sbc	r27, r23

00001bf8 <__udivmodhi4_ep>:
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	5a 95       	dec	r21
    1bfe:	a9 f7       	brne	.-22     	; 0x1bea <__udivmodhi4_loop>
    1c00:	80 95       	com	r24
    1c02:	90 95       	com	r25
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	08 95       	ret

00001c0a <_exit>:
    1c0a:	f8 94       	cli

00001c0c <__stop_program>:
    1c0c:	ff cf       	rjmp	.-2      	; 0x1c0c <__stop_program>
