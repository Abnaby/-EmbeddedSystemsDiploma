
ECU2_Dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a0  080030a0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080030a0  080030a0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a0  080030a0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000040  080030e8  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080030e8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025bc  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009bf  00000000  00000000  00022625  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001374  00000000  00000000  00022fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f8  00000000  00000000  00024358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  00024650  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000141c  00000000  00000000  000248d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a2b  00000000  00000000  00025cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000609b  00000000  00000000  0002771f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d7ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b78  00000000  00000000  0002d838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08002cb0 	.word	0x08002cb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08002cb0 	.word	0x08002cb0

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <xDelay>:
/******************************************************************************
* private Callbacks Definitions
*******************************************************************************/

void xDelay(u32 time)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e00c      	b.n	8000974 <xDelay+0x28>
		for(j = 1000;j > 0;j--);
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	e002      	b.n	8000968 <xDelay+0x1c>
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3b01      	subs	r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f9      	bne.n	8000962 <xDelay+0x16>
	for(i = time;i > 0;i--)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3b01      	subs	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1ef      	bne.n	800095a <xDelay+0xe>
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <System_voidFillAdminsData>:
*******************************************************************************/

/*********************************** START SYSTEM FCN	*************************/

static void System_voidFillAdminsData(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	/*	1st Driver	*/
	Glob_u8AdminArr[0][0][0] = 'M'	;
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 800098a:	224d      	movs	r2, #77	; 0x4d
 800098c:	701a      	strb	r2, [r3, #0]
	Glob_u8AdminArr[0][0][1] = 'o'	;
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000990:	226f      	movs	r2, #111	; 0x6f
 8000992:	705a      	strb	r2, [r3, #1]
	Glob_u8AdminArr[0][0][2] = 'h'	;
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000996:	2268      	movs	r2, #104	; 0x68
 8000998:	709a      	strb	r2, [r3, #2]
	Glob_u8AdminArr[0][0][3] = 'a'	;
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 800099c:	2261      	movs	r2, #97	; 0x61
 800099e:	70da      	strb	r2, [r3, #3]
	Glob_u8AdminArr[0][0][4] = 'm'	;
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009a2:	226d      	movs	r2, #109	; 0x6d
 80009a4:	711a      	strb	r2, [r3, #4]
	Glob_u8AdminArr[0][0][5] = 'e'	;
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009a8:	2265      	movs	r2, #101	; 0x65
 80009aa:	715a      	strb	r2, [r3, #5]
	Glob_u8AdminArr[0][0][6] = 'd'	;
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009ae:	2264      	movs	r2, #100	; 0x64
 80009b0:	719a      	strb	r2, [r3, #6]
	Glob_u8AdminArr[0][1][7] = '\0'	;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	749a      	strb	r2, [r3, #18]

	Glob_u8AdminArr[0][1][0] = '0'	;
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009ba:	2230      	movs	r2, #48	; 0x30
 80009bc:	72da      	strb	r2, [r3, #11]
	Glob_u8AdminArr[0][1][1] = '0'	;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009c0:	2230      	movs	r2, #48	; 0x30
 80009c2:	731a      	strb	r2, [r3, #12]
	Glob_u8AdminArr[0][1][2] = '0'	;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	735a      	strb	r2, [r3, #13]
	Glob_u8AdminArr[0][1][3] = '0'	;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009cc:	2230      	movs	r2, #48	; 0x30
 80009ce:	739a      	strb	r2, [r3, #14]
	Glob_u8AdminArr[0][1][4] = '0'	;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	73da      	strb	r2, [r3, #15]
	Glob_u8AdminArr[0][1][5] = '0'	;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009d8:	2230      	movs	r2, #48	; 0x30
 80009da:	741a      	strb	r2, [r3, #16]
	Glob_u8AdminArr[0][1][6] = '1'	;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009de:	2231      	movs	r2, #49	; 0x31
 80009e0:	745a      	strb	r2, [r3, #17]
	Glob_u8AdminArr[0][1][7] = '\0'	;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	749a      	strb	r2, [r3, #18]

	/*	2nd Driver	*/
	Glob_u8AdminArr[1][0][0] = 'a'	;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009ea:	2261      	movs	r2, #97	; 0x61
 80009ec:	759a      	strb	r2, [r3, #22]
	Glob_u8AdminArr[1][0][1] = 'l'	;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009f0:	226c      	movs	r2, #108	; 0x6c
 80009f2:	75da      	strb	r2, [r3, #23]
	Glob_u8AdminArr[1][0][2] = 'i'	;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009f6:	2269      	movs	r2, #105	; 0x69
 80009f8:	761a      	strb	r2, [r3, #24]
	Glob_u8AdminArr[1][0][3] = '\0'	;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	765a      	strb	r2, [r3, #25]

	Glob_u8AdminArr[1][1][0] = '1'	;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a02:	2231      	movs	r2, #49	; 0x31
 8000a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Glob_u8AdminArr[1][1][1] = '2'	;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a0a:	2232      	movs	r2, #50	; 0x32
 8000a0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Glob_u8AdminArr[1][1][2] = '3'	;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a12:	2233      	movs	r2, #51	; 0x33
 8000a14:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Glob_u8AdminArr[1][1][3] = '4'	;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a1a:	2234      	movs	r2, #52	; 0x34
 8000a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Glob_u8AdminArr[1][1][4] = '5'	;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a22:	2235      	movs	r2, #53	; 0x35
 8000a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Glob_u8AdminArr[1][1][5] = '6'	;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a2a:	2236      	movs	r2, #54	; 0x36
 8000a2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Glob_u8AdminArr[1][1][6] = '7'	;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a32:	2237      	movs	r2, #55	; 0x37
 8000a34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	Glob_u8AdminArr[1][1][7] = '\0'	;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <System_voidFillAdminsData+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	200000a4 	.word	0x200000a4

08000a4c <System_u8ValidateAdminData>:

static u8 System_u8ValidateAdminData(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
	u16 LOC_u8ReceivedData = 0 , LOC_u8Counter = 0 ;
 8000a52:	2300      	movs	r3, #0
 8000a54:	837b      	strh	r3, [r7, #26]
 8000a56:	2300      	movs	r3, #0
 8000a58:	83fb      	strh	r3, [r7, #30]
	u8 LOC_u8userName[NAME_MAX_SIZE+1] = {0} ;
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	f8c3 2007 	str.w	r2, [r3, #7]
	u8 LOC_u8Password[ID_SIZE+1] = {0} ;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
	u8 LOC_u8Flag = 0 ;
 8000a70:	2300      	movs	r3, #0
 8000a72:	777b      	strb	r3, [r7, #29]

	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000a74:	210c      	movs	r1, #12
 8000a76:	4871      	ldr	r0, [pc, #452]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000a78:	f001 f880 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8000a7c:	486f      	ldr	r0, [pc, #444]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000a7e:	f001 f8c1 	bl	8001c04 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("Admin Username"));
 8000a82:	496f      	ldr	r1, [pc, #444]	; (8000c40 <System_u8ValidateAdminData+0x1f4>)
 8000a84:	486d      	ldr	r0, [pc, #436]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000a86:	f001 f85c 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	486b      	ldr	r0, [pc, #428]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000a90:	f001 f883 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000a94:	210f      	movs	r1, #15
 8000a96:	4869      	ldr	r0, [pc, #420]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000a98:	f001 f870 	bl	8001b7c <LCD_voidSetCursorType>

	/*	Get User Name By USART	*/
	do
	{
		USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000a9c:	f107 031a 	add.w	r3, r7, #26
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f001 fd76 	bl	8002594 <USART_voidReceiveDataSynch>
		USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000aa8:	f107 031a 	add.w	r3, r7, #26
 8000aac:	4619      	mov	r1, r3
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f001 fd18 	bl	80024e4 <USART_voidSendDataSynch>
		LOC_u8userName[LOC_u8Counter] = (u8)LOC_u8ReceivedData;
 8000ab4:	8b7a      	ldrh	r2, [r7, #26]
 8000ab6:	8bfb      	ldrh	r3, [r7, #30]
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	f107 0120 	add.w	r1, r7, #32
 8000abe:	440b      	add	r3, r1
 8000ac0:	f803 2c14 	strb.w	r2, [r3, #-20]
		LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000ac4:	8b7b      	ldrh	r3, [r7, #26]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	485c      	ldr	r0, [pc, #368]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000acc:	f000 ff5c 	bl	8001988 <LCD_voidSendChar>
		LOC_u8Counter++ ;
 8000ad0:	8bfb      	ldrh	r3, [r7, #30]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	83fb      	strh	r3, [r7, #30]
	}
	while((NAME_MAX_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 8000ad6:	8bfb      	ldrh	r3, [r7, #30]
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d802      	bhi.n	8000ae2 <System_u8ValidateAdminData+0x96>
 8000adc:	8b7b      	ldrh	r3, [r7, #26]
 8000ade:	2b0d      	cmp	r3, #13
 8000ae0:	d1dc      	bne.n	8000a9c <System_u8ValidateAdminData+0x50>
	LOC_u8userName[LOC_u8Counter-1] = '\0';
 8000ae2:	8bfb      	ldrh	r3, [r7, #30]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	f107 0220 	add.w	r2, r7, #32
 8000aea:	4413      	add	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	f803 2c14 	strb.w	r2, [r3, #-20]
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000af2:	210c      	movs	r1, #12
 8000af4:	4851      	ldr	r0, [pc, #324]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000af6:	f001 f841 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidGotoXY(&myLCD,0,2);
 8000afa:	2202      	movs	r2, #2
 8000afc:	2100      	movs	r1, #0
 8000afe:	484f      	ldr	r0, [pc, #316]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000b00:	f001 f84b 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("Admin Password"));
 8000b04:	494f      	ldr	r1, [pc, #316]	; (8000c44 <System_u8ValidateAdminData+0x1f8>)
 8000b06:	484d      	ldr	r0, [pc, #308]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000b08:	f001 f81b 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	484a      	ldr	r0, [pc, #296]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000b12:	f001 f842 	bl	8001b9a <LCD_voidGotoXY>
	LOC_u8Counter = 0 ;
 8000b16:	2300      	movs	r3, #0
 8000b18:	83fb      	strh	r3, [r7, #30]
	/*	Get Password By USART	*/
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	4847      	ldr	r0, [pc, #284]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000b1e:	f001 f82d 	bl	8001b7c <LCD_voidSetCursorType>
	do
	{
		USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000b22:	f107 031a 	add.w	r3, r7, #26
 8000b26:	4619      	mov	r1, r3
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f001 fd33 	bl	8002594 <USART_voidReceiveDataSynch>
		USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000b2e:	f107 031a 	add.w	r3, r7, #26
 8000b32:	4619      	mov	r1, r3
 8000b34:	2000      	movs	r0, #0
 8000b36:	f001 fcd5 	bl	80024e4 <USART_voidSendDataSynch>
		LOC_u8Password[LOC_u8Counter] = (u8)LOC_u8ReceivedData;
 8000b3a:	8b7a      	ldrh	r2, [r7, #26]
 8000b3c:	8bfb      	ldrh	r3, [r7, #30]
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	f107 0120 	add.w	r1, r7, #32
 8000b44:	440b      	add	r3, r1
 8000b46:	f803 2c1c 	strb.w	r2, [r3, #-28]
		LCD_voidSendChar(&myLCD, '*' );
 8000b4a:	212a      	movs	r1, #42	; 0x2a
 8000b4c:	483b      	ldr	r0, [pc, #236]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000b4e:	f000 ff1b 	bl	8001988 <LCD_voidSendChar>

		LOC_u8Counter++ ;
 8000b52:	8bfb      	ldrh	r3, [r7, #30]
 8000b54:	3301      	adds	r3, #1
 8000b56:	83fb      	strh	r3, [r7, #30]

	}
	while((ID_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 8000b58:	8bfb      	ldrh	r3, [r7, #30]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d802      	bhi.n	8000b64 <System_u8ValidateAdminData+0x118>
 8000b5e:	8b7b      	ldrh	r3, [r7, #26]
 8000b60:	2b0d      	cmp	r3, #13
 8000b62:	d1de      	bne.n	8000b22 <System_u8ValidateAdminData+0xd6>
	LOC_u8Password[LOC_u8Counter-1] = '\0' ;
 8000b64:	8bfb      	ldrh	r3, [r7, #30]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	f107 0220 	add.w	r2, r7, #32
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f803 2c1c 	strb.w	r2, [r3, #-28]

	/*	Validate if Exist or not	*/
	if(!(compTwoStrings(LOC_u8userName , &Glob_u8AdminArr[0][0][0])))
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4933      	ldr	r1, [pc, #204]	; (8000c48 <System_u8ValidateAdminData+0x1fc>)
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fada 	bl	8001134 <compTwoStrings>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d135      	bne.n	8000bf2 <System_u8ValidateAdminData+0x1a6>
	{
		// Check password
		if(!(compTwoStrings(LOC_u8Password , &Glob_u8AdminArr[0][1][0])))
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4930      	ldr	r1, [pc, #192]	; (8000c4c <System_u8ValidateAdminData+0x200>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fad2 	bl	8001134 <compTwoStrings>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10a      	bne.n	8000bac <System_u8ValidateAdminData+0x160>
		{
			// Valid User Name and password
			LOC_u8Flag = 1 ;
 8000b96:	2301      	movs	r3, #1
 8000b98:	777b      	strb	r3, [r7, #29]
			Glob_LogginSeesionExpired = 0 ;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <System_u8ValidateAdminData+0x204>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* SUCCESSFUL LOGIN ****************************** \r\n\0"), '\0');
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	492c      	ldr	r1, [pc, #176]	; (8000c54 <System_u8ValidateAdminData+0x208>)
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 ffb5 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>
 8000baa:	e041      	b.n	8000c30 <System_u8ValidateAdminData+0x1e4>

		}
		else
		{
			// invalid-username
			LCD_voidClear(&myLCD);
 8000bac:	4823      	ldr	r0, [pc, #140]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bae:	f001 f829 	bl	8001c04 <LCD_voidClear>
			LCD_voidGotoXY(&myLCD, 2, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4821      	ldr	r0, [pc, #132]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bb8:	f000 ffef 	bl	8001b9a <LCD_voidGotoXY>
			LCD_voidSendString(&myLCD, addString("Wrong Admin")) ;
 8000bbc:	4926      	ldr	r1, [pc, #152]	; (8000c58 <System_u8ValidateAdminData+0x20c>)
 8000bbe:	481f      	ldr	r0, [pc, #124]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bc0:	f000 ffbf 	bl	8001b42 <LCD_voidSendString>
			LCD_voidGotoXY(&myLCD, 4, 2);
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bca:	f000 ffe6 	bl	8001b9a <LCD_voidGotoXY>
			LCD_voidSendString(&myLCD, addString("Password")) ;
 8000bce:	4923      	ldr	r1, [pc, #140]	; (8000c5c <System_u8ValidateAdminData+0x210>)
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bd2:	f000 ffb6 	bl	8001b42 <LCD_voidSendString>
			_delay_ms(10);
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f7ff feb8 	bl	800094c <xDelay>
			LOC_u8Flag = 0 ;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	777b      	strb	r3, [r7, #29]
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* UNSUCCESSFUL LOGIN ****************************** \r\n\0"), '\0');
 8000be0:	2200      	movs	r2, #0
 8000be2:	491f      	ldr	r1, [pc, #124]	; (8000c60 <System_u8ValidateAdminData+0x214>)
 8000be4:	2000      	movs	r0, #0
 8000be6:	f001 ff95 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>
			Glob_LogginSeesionExpired = 1;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <System_u8ValidateAdminData+0x204>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e01e      	b.n	8000c30 <System_u8ValidateAdminData+0x1e4>
		}
	}
	else
	{
		// invalid-username
		LCD_voidClear(&myLCD);
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bf4:	f001 f806 	bl	8001c04 <LCD_voidClear>
		LCD_voidGotoXY(&myLCD, 2, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000bfe:	f000 ffcc 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD, addString("Wrong Admin")) ;
 8000c02:	4915      	ldr	r1, [pc, #84]	; (8000c58 <System_u8ValidateAdminData+0x20c>)
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000c06:	f000 ff9c 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD, 6, 2);
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	2106      	movs	r1, #6
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000c10:	f000 ffc3 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD, addString("Name")) ;
 8000c14:	4913      	ldr	r1, [pc, #76]	; (8000c64 <System_u8ValidateAdminData+0x218>)
 8000c16:	4809      	ldr	r0, [pc, #36]	; (8000c3c <System_u8ValidateAdminData+0x1f0>)
 8000c18:	f000 ff93 	bl	8001b42 <LCD_voidSendString>
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* UNSUCCESSFUL LOGIN ****************************** \r\n\0"), '\0');
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4910      	ldr	r1, [pc, #64]	; (8000c60 <System_u8ValidateAdminData+0x214>)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f001 ff77 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>
		Glob_LogginSeesionExpired = 1;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <System_u8ValidateAdminData+0x204>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
		LOC_u8Flag = 0 ;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	777b      	strb	r3, [r7, #29]
	}

	return LOC_u8Flag ;
 8000c30:	7f7b      	ldrb	r3, [r7, #29]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000005c 	.word	0x2000005c
 8000c40:	08002cc8 	.word	0x08002cc8
 8000c44:	08002cd8 	.word	0x08002cd8
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	200000af 	.word	0x200000af
 8000c50:	20000000 	.word	0x20000000
 8000c54:	08002ce8 	.word	0x08002ce8
 8000c58:	08002d34 	.word	0x08002d34
 8000c5c:	08002d40 	.word	0x08002d40
 8000c60:	08002d4c 	.word	0x08002d4c
 8000c64:	08002d9c 	.word	0x08002d9c

08000c68 <System_voidAddNewUser>:


static void System_voidAddNewUser(void)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0


	if(MAX_SLOTS_IN_GARAGE >= Glob_u8NumberOfCurrentUsers)
 8000c6e:	4b7c      	ldr	r3, [pc, #496]	; (8000e60 <System_voidAddNewUser+0x1f8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	f200 80d7 	bhi.w	8000e26 <System_voidAddNewUser+0x1be>
	{
		u16 LOC_u8ReceivedData = 0 ; u8 LOC_u8ArrayIndex ;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	80bb      	strh	r3, [r7, #4]
		u8 LOC_u8Counter = 0 ;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	71bb      	strb	r3, [r7, #6]
		// Get Free Array Index
		for(LOC_u8Counter = 0 ; LOC_u8Counter < MAX_SLOTS_IN_GARAGE ; LOC_u8Counter++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	71bb      	strb	r3, [r7, #6]
 8000c84:	e010      	b.n	8000ca8 <System_voidAddNewUser+0x40>
		{
			if(Glob_u8DriverFreeIndex[LOC_u8Counter] == 1)
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	4a76      	ldr	r2, [pc, #472]	; (8000e64 <System_voidAddNewUser+0x1fc>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d108      	bne.n	8000ca2 <System_voidAddNewUser+0x3a>
			{
				LOC_u8ArrayIndex = LOC_u8Counter;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	71fb      	strb	r3, [r7, #7]
				Glob_u8DriverFreeIndex[LOC_u8Counter] = 0 ;
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	4a73      	ldr	r2, [pc, #460]	; (8000e64 <System_voidAddNewUser+0x1fc>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	54d1      	strb	r1, [r2, r3]
				LOC_u8Counter = 0 ;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71bb      	strb	r3, [r7, #6]
				break ;
 8000ca0:	e005      	b.n	8000cae <System_voidAddNewUser+0x46>
		for(LOC_u8Counter = 0 ; LOC_u8Counter < MAX_SLOTS_IN_GARAGE ; LOC_u8Counter++)
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	71bb      	strb	r3, [r7, #6]
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d9eb      	bls.n	8000c86 <System_voidAddNewUser+0x1e>
			}
		}
		// Can Add new Driver
		LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000cae:	210c      	movs	r1, #12
 8000cb0:	486d      	ldr	r0, [pc, #436]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000cb2:	f000 ff63 	bl	8001b7c <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 8000cb6:	486c      	ldr	r0, [pc, #432]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000cb8:	f000 ffa4 	bl	8001c04 <LCD_voidClear>
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* Adding Driver Data ****************************** \r\n\0"), '\0');
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	496b      	ldr	r1, [pc, #428]	; (8000e6c <System_voidAddNewUser+0x204>)
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f001 ff27 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>

		LCD_voidSendString(&myLCD,addString("Driver Username"));
 8000cc6:	496a      	ldr	r1, [pc, #424]	; (8000e70 <System_voidAddNewUser+0x208>)
 8000cc8:	4867      	ldr	r0, [pc, #412]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000cca:	f000 ff3a 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4865      	ldr	r0, [pc, #404]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000cd4:	f000 ff61 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000cd8:	210f      	movs	r1, #15
 8000cda:	4863      	ldr	r0, [pc, #396]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000cdc:	f000 ff4e 	bl	8001b7c <LCD_voidSetCursorType>

		// Take Name
		while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8000ce0:	e02a      	b.n	8000d38 <System_voidAddNewUser+0xd0>
		{
			USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f001 fc54 	bl	8002594 <USART_voidReceiveDataSynch>

			if((LOC_u8ReceivedData >= 'a'  && LOC_u8ReceivedData <= 'z') || (LOC_u8ReceivedData >= 'A'  && LOC_u8ReceivedData <= 'Z'))
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	2b60      	cmp	r3, #96	; 0x60
 8000cf0:	d902      	bls.n	8000cf8 <System_voidAddNewUser+0x90>
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	2b7a      	cmp	r3, #122	; 0x7a
 8000cf6:	d905      	bls.n	8000d04 <System_voidAddNewUser+0x9c>
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d91c      	bls.n	8000d38 <System_voidAddNewUser+0xd0>
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	2b5a      	cmp	r3, #90	; 0x5a
 8000d02:	d819      	bhi.n	8000d38 <System_voidAddNewUser+0xd0>
			{
				USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f001 fbeb 	bl	80024e4 <USART_voidSendDataSynch>
				LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	4854      	ldr	r0, [pc, #336]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000d16:	f000 fe37 	bl	8001988 <LCD_voidSendChar>
				// Save it on Array
				Glob_u8DriverArr[LOC_u8ArrayIndex][0][LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 8000d1a:	88b9      	ldrh	r1, [r7, #4]
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b2cc      	uxtb	r4, r1
 8000d22:	4954      	ldr	r1, [pc, #336]	; (8000e74 <System_voidAddNewUser+0x20c>)
 8000d24:	2016      	movs	r0, #22
 8000d26:	fb00 f202 	mul.w	r2, r0, r2
 8000d2a:	440a      	add	r2, r1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4622      	mov	r2, r4
 8000d30:	701a      	strb	r2, [r3, #0]
				LOC_u8Counter++ ;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	3301      	adds	r3, #1
 8000d36:	71bb      	strb	r3, [r7, #6]
		while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	2b0d      	cmp	r3, #13
 8000d3c:	d002      	beq.n	8000d44 <System_voidAddNewUser+0xdc>
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b0a      	cmp	r3, #10
 8000d42:	d9ce      	bls.n	8000ce2 <System_voidAddNewUser+0x7a>
			else
			{
				// Unsupported
			}
		}
		Glob_u8DriverArr[LOC_u8ArrayIndex][0][++LOC_u8Counter] = (u8)'\0' ;
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	71bb      	strb	r3, [r7, #6]
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	4949      	ldr	r1, [pc, #292]	; (8000e74 <System_voidAddNewUser+0x20c>)
 8000d50:	2016      	movs	r0, #22
 8000d52:	fb00 f202 	mul.w	r2, r0, r2
 8000d56:	440a      	add	r2, r1
 8000d58:	4413      	add	r3, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		// Take ID
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n\0"), '\0');
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4945      	ldr	r1, [pc, #276]	; (8000e78 <System_voidAddNewUser+0x210>)
 8000d62:	2000      	movs	r0, #0
 8000d64:	f001 fed6 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>

		LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000d68:	210c      	movs	r1, #12
 8000d6a:	483f      	ldr	r0, [pc, #252]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000d6c:	f000 ff06 	bl	8001b7c <LCD_voidSetCursorType>
		LCD_voidGotoXY(&myLCD,0,2);
 8000d70:	2202      	movs	r2, #2
 8000d72:	2100      	movs	r1, #0
 8000d74:	483c      	ldr	r0, [pc, #240]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000d76:	f000 ff10 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("Driver ID"));
 8000d7a:	4940      	ldr	r1, [pc, #256]	; (8000e7c <System_voidAddNewUser+0x214>)
 8000d7c:	483a      	ldr	r0, [pc, #232]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000d7e:	f000 fee0 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,3);
 8000d82:	2203      	movs	r2, #3
 8000d84:	2100      	movs	r1, #0
 8000d86:	4838      	ldr	r0, [pc, #224]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000d88:	f000 ff07 	bl	8001b9a <LCD_voidGotoXY>
		LOC_u8Counter = 0 ;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	71bb      	strb	r3, [r7, #6]
		LOC_u8ReceivedData = 0 ;
 8000d90:	2300      	movs	r3, #0
 8000d92:	80bb      	strh	r3, [r7, #4]

		LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000d94:	210f      	movs	r1, #15
 8000d96:	4834      	ldr	r0, [pc, #208]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000d98:	f000 fef0 	bl	8001b7c <LCD_voidSetCursorType>

		do
		{
			USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2000      	movs	r0, #0
 8000da2:	f001 fbf7 	bl	8002594 <USART_voidReceiveDataSynch>
			if((LOC_u8ReceivedData >= '0'  && LOC_u8ReceivedData <= '9'))
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	2b2f      	cmp	r3, #47	; 0x2f
 8000daa:	d91d      	bls.n	8000de8 <System_voidAddNewUser+0x180>
 8000dac:	88bb      	ldrh	r3, [r7, #4]
 8000dae:	2b39      	cmp	r3, #57	; 0x39
 8000db0:	d81a      	bhi.n	8000de8 <System_voidAddNewUser+0x180>
			{
				USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f001 fb94 	bl	80024e4 <USART_voidSendDataSynch>
				LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4829      	ldr	r0, [pc, #164]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000dc4:	f000 fde0 	bl	8001988 <LCD_voidSendChar>
				// Save it on Array
				Glob_u8DriverArr[LOC_u8ArrayIndex][1][LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 8000dc8:	88b9      	ldrh	r1, [r7, #4]
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	b2cc      	uxtb	r4, r1
 8000dd0:	4928      	ldr	r1, [pc, #160]	; (8000e74 <System_voidAddNewUser+0x20c>)
 8000dd2:	2016      	movs	r0, #22
 8000dd4:	fb00 f202 	mul.w	r2, r0, r2
 8000dd8:	440a      	add	r2, r1
 8000dda:	4413      	add	r3, r2
 8000ddc:	330b      	adds	r3, #11
 8000dde:	4622      	mov	r2, r4
 8000de0:	701a      	strb	r2, [r3, #0]
				LOC_u8Counter++ ;
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	3301      	adds	r3, #1
 8000de6:	71bb      	strb	r3, [r7, #6]
			else
			{
				// Unsupported
			}
		}
		while((ID_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	d802      	bhi.n	8000df4 <System_voidAddNewUser+0x18c>
 8000dee:	88bb      	ldrh	r3, [r7, #4]
 8000df0:	2b0d      	cmp	r3, #13
 8000df2:	d1d3      	bne.n	8000d9c <System_voidAddNewUser+0x134>
		Glob_u8DriverArr[LOC_u8ArrayIndex][1][LOC_u8Counter] = '\0' ;
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	491e      	ldr	r1, [pc, #120]	; (8000e74 <System_voidAddNewUser+0x20c>)
 8000dfa:	2016      	movs	r0, #22
 8000dfc:	fb00 f202 	mul.w	r2, r0, r2
 8000e00:	440a      	add	r2, r1
 8000e02:	4413      	add	r3, r2
 8000e04:	330b      	adds	r3, #11
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]


		Glob_u8NumberOfCurrentUsers++ ;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <System_voidAddNewUser+0x1f8>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <System_voidAddNewUser+0x1f8>)
 8000e14:	701a      	strb	r2, [r3, #0]
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* DONE ****************************** \r\n\0"), '\0');
 8000e16:	2200      	movs	r2, #0
 8000e18:	4919      	ldr	r1, [pc, #100]	; (8000e80 <System_voidAddNewUser+0x218>)
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f001 fe7a 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>
		LCD_AddDriver();
 8000e20:	f000 fb42 	bl	80014a8 <LCD_AddDriver>
		LCD_voidMainScreen();
	}



}
 8000e24:	e018      	b.n	8000e58 <System_voidAddNewUser+0x1f0>
		LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 8000e26:	210c      	movs	r1, #12
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000e2a:	f000 fea7 	bl	8001b7c <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 8000e2e:	480e      	ldr	r0, [pc, #56]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000e30:	f000 fee8 	bl	8001c04 <LCD_voidClear>
		LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 8000e34:	4913      	ldr	r1, [pc, #76]	; (8000e84 <System_voidAddNewUser+0x21c>)
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000e38:	f000 fe83 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,1,1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000e42:	f000 feaa 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("FULL CAPACITY"));
 8000e46:	4910      	ldr	r1, [pc, #64]	; (8000e88 <System_voidAddNewUser+0x220>)
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <System_voidAddNewUser+0x200>)
 8000e4a:	f000 fe7a 	bl	8001b42 <LCD_voidSendString>
		_delay_ms(200);
 8000e4e:	20c8      	movs	r0, #200	; 0xc8
 8000e50:	f7ff fd7c 	bl	800094c <xDelay>
		LCD_voidMainScreen();
 8000e54:	f000 fa7a 	bl	800134c <LCD_voidMainScreen>
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	200000d0 	.word	0x200000d0
 8000e64:	20000004 	.word	0x20000004
 8000e68:	2000005c 	.word	0x2000005c
 8000e6c:	08002da4 	.word	0x08002da4
 8000e70:	08002df4 	.word	0x08002df4
 8000e74:	200000d4 	.word	0x200000d4
 8000e78:	08002e04 	.word	0x08002e04
 8000e7c:	08002e08 	.word	0x08002e08
 8000e80:	08002e14 	.word	0x08002e14
 8000e84:	08002e54 	.word	0x08002e54
 8000e88:	08002e64 	.word	0x08002e64

08000e8c <System_VoidDeleteUser>:
static void System_VoidDeleteUser(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
	if(Glob_u8NumberOfCurrentUsers != 0)
 8000e92:	4b9a      	ldr	r3, [pc, #616]	; (80010fc <System_VoidDeleteUser+0x270>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 810a 	beq.w	80010b0 <System_VoidDeleteUser+0x224>
	{
		// Search For Users
		LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000e9c:	210c      	movs	r1, #12
 8000e9e:	4898      	ldr	r0, [pc, #608]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000ea0:	f000 fe6c 	bl	8001b7c <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 8000ea4:	4896      	ldr	r0, [pc, #600]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000ea6:	f000 fead 	bl	8001c04 <LCD_voidClear>
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* Delete Driver ****************************** \r\n\0"), '\0');
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4995      	ldr	r1, [pc, #596]	; (8001104 <System_VoidDeleteUser+0x278>)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f001 fe30 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>

		LCD_voidSendString(&myLCD,addString("Driver Username"));
 8000eb4:	4994      	ldr	r1, [pc, #592]	; (8001108 <System_VoidDeleteUser+0x27c>)
 8000eb6:	4892      	ldr	r0, [pc, #584]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000eb8:	f000 fe43 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	488f      	ldr	r0, [pc, #572]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000ec2:	f000 fe6a 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	488d      	ldr	r0, [pc, #564]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000eca:	f000 fe57 	bl	8001b7c <LCD_voidSetCursorType>

		u8 LOC_u8username[NAME_MAX_SIZE+1];
		u8 LOC_u8ID[ID_SIZE+1];
		u16 LOC_u8ReceivedData = 0 ;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80fb      	strh	r3, [r7, #6]
		u8 LOC_u8Counter = 0 ;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	77fb      	strb	r3, [r7, #31]

		// Take Name
		while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8000ed6:	e026      	b.n	8000f26 <System_VoidDeleteUser+0x9a>
		{
			USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	4619      	mov	r1, r3
 8000edc:	2000      	movs	r0, #0
 8000ede:	f001 fb59 	bl	8002594 <USART_voidReceiveDataSynch>

			if((LOC_u8ReceivedData >= 'a'  && LOC_u8ReceivedData <= 'z') || (LOC_u8ReceivedData >= 'A'  && LOC_u8ReceivedData <= 'Z'))
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b60      	cmp	r3, #96	; 0x60
 8000ee6:	d902      	bls.n	8000eee <System_VoidDeleteUser+0x62>
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	2b7a      	cmp	r3, #122	; 0x7a
 8000eec:	d905      	bls.n	8000efa <System_VoidDeleteUser+0x6e>
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	2b40      	cmp	r3, #64	; 0x40
 8000ef2:	d918      	bls.n	8000f26 <System_VoidDeleteUser+0x9a>
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b5a      	cmp	r3, #90	; 0x5a
 8000ef8:	d815      	bhi.n	8000f26 <System_VoidDeleteUser+0x9a>
			{
				USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000efa:	1dbb      	adds	r3, r7, #6
 8000efc:	4619      	mov	r1, r3
 8000efe:	2000      	movs	r0, #0
 8000f00:	f001 faf0 	bl	80024e4 <USART_voidSendDataSynch>
				LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4619      	mov	r1, r3
 8000f0a:	487d      	ldr	r0, [pc, #500]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000f0c:	f000 fd3c 	bl	8001988 <LCD_voidSendChar>
				// Save it on Array
				LOC_u8username[LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 8000f10:	88fa      	ldrh	r2, [r7, #6]
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	f107 0120 	add.w	r1, r7, #32
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f803 2c10 	strb.w	r2, [r3, #-16]
				LOC_u8Counter++ ;
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	3301      	adds	r3, #1
 8000f24:	77fb      	strb	r3, [r7, #31]
		while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2b0d      	cmp	r3, #13
 8000f2a:	d002      	beq.n	8000f32 <System_VoidDeleteUser+0xa6>
 8000f2c:	7ffb      	ldrb	r3, [r7, #31]
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d9d2      	bls.n	8000ed8 <System_VoidDeleteUser+0x4c>
			{
				// Unsupported
			}
		}

		LOC_u8username[LOC_u8Counter] = (u8)'\0' ;
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	f107 0220 	add.w	r2, r7, #32
 8000f38:	4413      	add	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f803 2c10 	strb.w	r2, [r3, #-16]
		LOC_u8ReceivedData = 0 ;
 8000f40:	2300      	movs	r3, #0
 8000f42:	80fb      	strh	r3, [r7, #6]
		LOC_u8Counter = 0 ;
 8000f44:	2300      	movs	r3, #0
 8000f46:	77fb      	strb	r3, [r7, #31]
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n\0"), '\0');
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4970      	ldr	r1, [pc, #448]	; (800110c <System_VoidDeleteUser+0x280>)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f001 fde1 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>

		LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000f52:	210c      	movs	r1, #12
 8000f54:	486a      	ldr	r0, [pc, #424]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000f56:	f000 fe11 	bl	8001b7c <LCD_voidSetCursorType>
		LCD_voidGotoXY(&myLCD,0,2);
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4868      	ldr	r0, [pc, #416]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000f60:	f000 fe1b 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("Driver ID"));
 8000f64:	496a      	ldr	r1, [pc, #424]	; (8001110 <System_VoidDeleteUser+0x284>)
 8000f66:	4866      	ldr	r0, [pc, #408]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000f68:	f000 fdeb 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,3);
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4863      	ldr	r0, [pc, #396]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000f72:	f000 fe12 	bl	8001b9a <LCD_voidGotoXY>
		LOC_u8Counter = 0 ;
 8000f76:	2300      	movs	r3, #0
 8000f78:	77fb      	strb	r3, [r7, #31]
		LOC_u8ReceivedData = 0 ;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	80fb      	strh	r3, [r7, #6]

		LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000f7e:	210f      	movs	r1, #15
 8000f80:	485f      	ldr	r0, [pc, #380]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000f82:	f000 fdfb 	bl	8001b7c <LCD_voidSetCursorType>

		do
		{
			USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000f86:	1dbb      	adds	r3, r7, #6
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f001 fb02 	bl	8002594 <USART_voidReceiveDataSynch>
			if((LOC_u8ReceivedData >= '0'  && LOC_u8ReceivedData <= '9'))
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	2b2f      	cmp	r3, #47	; 0x2f
 8000f94:	d918      	bls.n	8000fc8 <System_VoidDeleteUser+0x13c>
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b39      	cmp	r3, #57	; 0x39
 8000f9a:	d815      	bhi.n	8000fc8 <System_VoidDeleteUser+0x13c>
			{
				USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000f9c:	1dbb      	adds	r3, r7, #6
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f001 fa9f 	bl	80024e4 <USART_voidSendDataSynch>
				LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4619      	mov	r1, r3
 8000fac:	4854      	ldr	r0, [pc, #336]	; (8001100 <System_VoidDeleteUser+0x274>)
 8000fae:	f000 fceb 	bl	8001988 <LCD_voidSendChar>
				// Save it on Array
				LOC_u8ID[LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	f107 0120 	add.w	r1, r7, #32
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f803 2c18 	strb.w	r2, [r3, #-24]
				LOC_u8Counter++ ;
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	77fb      	strb	r3, [r7, #31]
			else
			{
				// Unsupported
			}
		}
		while((ID_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	d802      	bhi.n	8000fd4 <System_VoidDeleteUser+0x148>
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	2b0d      	cmp	r3, #13
 8000fd2:	d1d8      	bne.n	8000f86 <System_VoidDeleteUser+0xfa>
		LOC_u8ID[LOC_u8Counter] = '\0' ;
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	f107 0220 	add.w	r2, r7, #32
 8000fda:	4413      	add	r3, r2
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f803 2c18 	strb.w	r2, [r3, #-24]

		/*	Searching	*/
		LOC_u8Counter = 0 ;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	77fb      	strb	r3, [r7, #31]
		u8 LOC_u8Result = 1 ;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	77bb      	strb	r3, [r7, #30]
		u8 DriverIndex = 10  ;
 8000fea:	230a      	movs	r3, #10
 8000fec:	777b      	strb	r3, [r7, #29]
		for(LOC_u8Counter = 0 ; LOC_u8Counter < Glob_u8NumberOfCurrentUsers ; LOC_u8Counter++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	77fb      	strb	r3, [r7, #31]
 8000ff2:	e016      	b.n	8001022 <System_VoidDeleteUser+0x196>
		{
			// Name Searching
			LOC_u8Result = compTwoStrings(LOC_u8username, &Glob_u8DriverArr[LOC_u8Counter][0][0]);
 8000ff4:	7ffb      	ldrb	r3, [r7, #31]
 8000ff6:	2216      	movs	r2, #22
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <System_VoidDeleteUser+0x288>)
 8000ffe:	441a      	add	r2, r3
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f894 	bl	8001134 <compTwoStrings>
 800100c:	4603      	mov	r3, r0
 800100e:	77bb      	strb	r3, [r7, #30]
			if(LOC_u8Result == 0)
 8001010:	7fbb      	ldrb	r3, [r7, #30]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <System_VoidDeleteUser+0x190>
			{
				DriverIndex = LOC_u8Counter ;
 8001016:	7ffb      	ldrb	r3, [r7, #31]
 8001018:	777b      	strb	r3, [r7, #29]
				break ;
 800101a:	e007      	b.n	800102c <System_VoidDeleteUser+0x1a0>
		for(LOC_u8Counter = 0 ; LOC_u8Counter < Glob_u8NumberOfCurrentUsers ; LOC_u8Counter++)
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	3301      	adds	r3, #1
 8001020:	77fb      	strb	r3, [r7, #31]
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <System_VoidDeleteUser+0x270>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	7ffa      	ldrb	r2, [r7, #31]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3e3      	bcc.n	8000ff4 <System_VoidDeleteUser+0x168>
			}

		}
		if(LOC_u8Result == 0 && DriverIndex >= Glob_u8NumberOfCurrentUsers)
 800102c:	7fbb      	ldrb	r3, [r7, #30]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d115      	bne.n	800105e <System_VoidDeleteUser+0x1d2>
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <System_VoidDeleteUser+0x270>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	7f7a      	ldrb	r2, [r7, #29]
 8001038:	429a      	cmp	r2, r3
 800103a:	d310      	bcc.n	800105e <System_VoidDeleteUser+0x1d2>
		{
			LOC_u8Result = 1 ;
 800103c:	2301      	movs	r3, #1
 800103e:	77bb      	strb	r3, [r7, #30]
			// ID Verify
			LOC_u8Result = compTwoStrings(LOC_u8ID, &Glob_u8DriverArr[DriverIndex][1][0]);
 8001040:	7f7b      	ldrb	r3, [r7, #29]
 8001042:	2216      	movs	r2, #22
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	330b      	adds	r3, #11
 800104a:	4a32      	ldr	r2, [pc, #200]	; (8001114 <System_VoidDeleteUser+0x288>)
 800104c:	441a      	add	r2, r3
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f86d 	bl	8001134 <compTwoStrings>
 800105a:	4603      	mov	r3, r0
 800105c:	77bb      	strb	r3, [r7, #30]
		}

		if(LOC_u8Result == 0)
 800105e:	7fbb      	ldrb	r3, [r7, #30]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d111      	bne.n	8001088 <System_VoidDeleteUser+0x1fc>
		{
			// Valid Name and ID
			Glob_u8DriverFreeIndex[DriverIndex] = 1 ;
 8001064:	7f7b      	ldrb	r3, [r7, #29]
 8001066:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <System_VoidDeleteUser+0x28c>)
 8001068:	2101      	movs	r1, #1
 800106a:	54d1      	strb	r1, [r2, r3]
			Glob_u8NumberOfCurrentUsers-- ;
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <System_VoidDeleteUser+0x270>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3b01      	subs	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <System_VoidDeleteUser+0x270>)
 8001076:	701a      	strb	r2, [r3, #0]
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* SUCCESSFUL ****************************** \r\n\0"), '\0');
 8001078:	2200      	movs	r2, #0
 800107a:	4928      	ldr	r1, [pc, #160]	; (800111c <System_VoidDeleteUser+0x290>)
 800107c:	2000      	movs	r0, #0
 800107e:	f001 fd49 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>
			LCD_voidDeleteDriver();
 8001082:	f000 fa31 	bl	80014e8 <LCD_voidDeleteDriver>
		LCD_voidGotoXY(&myLCD,2,2);
		LCD_voidSendString(&myLCD,addString("Drivers Data"));
		_delay_ms(200);
		LCD_voidMainScreen();
	}
}
 8001086:	e035      	b.n	80010f4 <System_VoidDeleteUser+0x268>
			LCD_voidClear(&myLCD);
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <System_VoidDeleteUser+0x274>)
 800108a:	f000 fdbb 	bl	8001c04 <LCD_voidClear>
			LCD_voidGotoXY(&myLCD, 2, 2) ;
 800108e:	2202      	movs	r2, #2
 8001090:	2102      	movs	r1, #2
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <System_VoidDeleteUser+0x274>)
 8001094:	f000 fd81 	bl	8001b9a <LCD_voidGotoXY>
			LCD_voidSendString(&myLCD, addString("UNSUCCESSFUL"));
 8001098:	4921      	ldr	r1, [pc, #132]	; (8001120 <System_VoidDeleteUser+0x294>)
 800109a:	4819      	ldr	r0, [pc, #100]	; (8001100 <System_VoidDeleteUser+0x274>)
 800109c:	f000 fd51 	bl	8001b42 <LCD_voidSendString>
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* UNSUCCESSFUL ****************************** \r\n\0"), '\0');
 80010a0:	2200      	movs	r2, #0
 80010a2:	4920      	ldr	r1, [pc, #128]	; (8001124 <System_VoidDeleteUser+0x298>)
 80010a4:	2000      	movs	r0, #0
 80010a6:	f001 fd35 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>
			LCD_voidMainScreen();
 80010aa:	f000 f94f 	bl	800134c <LCD_voidMainScreen>
}
 80010ae:	e021      	b.n	80010f4 <System_VoidDeleteUser+0x268>
		LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 80010b0:	210c      	movs	r1, #12
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010b4:	f000 fd62 	bl	8001b7c <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010ba:	f000 fda3 	bl	8001c04 <LCD_voidClear>
		LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80010be:	491a      	ldr	r1, [pc, #104]	; (8001128 <System_VoidDeleteUser+0x29c>)
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010c2:	f000 fd3e 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,2,1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2102      	movs	r1, #2
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010cc:	f000 fd65 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("No Existence"));
 80010d0:	4916      	ldr	r1, [pc, #88]	; (800112c <System_VoidDeleteUser+0x2a0>)
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010d4:	f000 fd35 	bl	8001b42 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,2,2);
 80010d8:	2202      	movs	r2, #2
 80010da:	2102      	movs	r1, #2
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010de:	f000 fd5c 	bl	8001b9a <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("Drivers Data"));
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <System_VoidDeleteUser+0x2a4>)
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <System_VoidDeleteUser+0x274>)
 80010e6:	f000 fd2c 	bl	8001b42 <LCD_voidSendString>
		_delay_ms(200);
 80010ea:	20c8      	movs	r0, #200	; 0xc8
 80010ec:	f7ff fc2e 	bl	800094c <xDelay>
		LCD_voidMainScreen();
 80010f0:	f000 f92c 	bl	800134c <LCD_voidMainScreen>
}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200000d0 	.word	0x200000d0
 8001100:	2000005c 	.word	0x2000005c
 8001104:	08002e74 	.word	0x08002e74
 8001108:	08002df4 	.word	0x08002df4
 800110c:	08002e04 	.word	0x08002e04
 8001110:	08002e08 	.word	0x08002e08
 8001114:	200000d4 	.word	0x200000d4
 8001118:	20000004 	.word	0x20000004
 800111c:	08002ec0 	.word	0x08002ec0
 8001120:	08002f08 	.word	0x08002f08
 8001124:	08002f18 	.word	0x08002f18
 8001128:	08002e54 	.word	0x08002e54
 800112c:	08002f60 	.word	0x08002f60
 8001130:	08002f70 	.word	0x08002f70

08001134 <compTwoStrings>:
/*********************************** END SYSTEM FCN	*************************/

u8 compTwoStrings (u8*string1 , u8*string2)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
    u8 LOC_u8Counter=0 ;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
    u8 LOC_u8Flag = 0 ;
 8001142:	2300      	movs	r3, #0
 8001144:	73bb      	strb	r3, [r7, #14]
    while(string1[LOC_u8Counter] != '\0' &&string2[LOC_u8Counter] != '\0')
 8001146:	e00f      	b.n	8001168 <compTwoStrings+0x34>
    {
        if(string1[LOC_u8Counter] != string2[LOC_u8Counter])
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	440b      	add	r3, r1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d002      	beq.n	8001162 <compTwoStrings+0x2e>
        {
            LOC_u8Flag = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	73bb      	strb	r3, [r7, #14]
            break;
 8001160:	e00e      	b.n	8001180 <compTwoStrings+0x4c>
        }
        LOC_u8Counter++;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
    while(string1[LOC_u8Counter] != '\0' &&string2[LOC_u8Counter] != '\0')
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <compTwoStrings+0x4c>
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e3      	bne.n	8001148 <compTwoStrings+0x14>
    }
    return LOC_u8Flag ;
 8001180:	7bbb      	ldrb	r3, [r7, #14]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LCD_voidSetup>:


/********************************************** Start of LCD fcn	********************************************************/

static void LCD_voidSetup(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	myLCD.LCD_SIZE_Rows = 4 ;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <LCD_voidSetup+0x20>)
 8001192:	2204      	movs	r2, #4
 8001194:	701a      	strb	r2, [r3, #0]
	myLCD.LCD_SIZE_Cols = 16 ;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <LCD_voidSetup+0x20>)
 8001198:	2210      	movs	r2, #16
 800119a:	705a      	strb	r2, [r3, #1]
	myLCD.LCD_PortPins = LCD_PortPin ;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <LCD_voidSetup+0x20>)
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <LCD_voidSetup+0x24>)
 80011a0:	605a      	str	r2, [r3, #4]
	LCD_voidInit(&myLCD);
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <LCD_voidSetup+0x20>)
 80011a4:	f000 fb8a 	bl	80018bc <LCD_voidInit>
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
	/*	Main Screen	*/
	LCD_voidMainScreen();
#endif

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000005c 	.word	0x2000005c
 80011b0:	20000008 	.word	0x20000008

080011b4 <UART_voidSetup>:
static 	USART_Config myUART ;

void UART_voidSetup(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	/*	GPIO	*/
	USART__VoidGPIO_SetPins(USART_1);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f001 fb57 	bl	800286c <USART__VoidGPIO_SetPins>
	/*	UART	*/
	myUART.USART_OperationMode = USART_TRANCIVER ; ;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <UART_voidSetup+0x60>)
 80011c0:	220c      	movs	r2, #12
 80011c2:	701a      	strb	r2, [r3, #0]
	myUART.USART_BuadRate = 9600 ;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <UART_voidSetup+0x60>)
 80011c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ca:	605a      	str	r2, [r3, #4]
	myUART.USART_DataLength = USART_8BIT ;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <UART_voidSetup+0x60>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	811a      	strh	r2, [r3, #8]
	myUART.USART_Parity =USART_DISABLE_PARITY ;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <UART_voidSetup+0x60>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	815a      	strh	r2, [r3, #10]
	myUART.USART_StopBit = USART_1_STOPBIT ;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <UART_voidSetup+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	819a      	strh	r2, [r3, #12]
	myUART.USART_HWFlowControl = USART_HW_FLOW_CONTROLLED_DISALBED ;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <UART_voidSetup+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	81da      	strh	r2, [r3, #14]
	myUART.USART_IdleLevel     =USART_IDLE_LOW ;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <UART_voidSetup+0x60>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	821a      	strh	r2, [r3, #16]
	myUART.USART_DataSampling  = USART_LEADING_EDGE ;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <UART_voidSetup+0x60>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	825a      	strh	r2, [r3, #18]
	myUART.P_IRQ_CallBack = NULL  ;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <UART_voidSetup+0x60>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
	myUART.USART_IRQ_t =  USART_DISABLE_IRQs ;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <UART_voidSetup+0x60>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	82da      	strh	r2, [r3, #22]
	USART_voidInit(USART_1, &myUART);
 80011fc:	4905      	ldr	r1, [pc, #20]	; (8001214 <UART_voidSetup+0x60>)
 80011fe:	2000      	movs	r0, #0
 8001200:	f001 f8f8 	bl	80023f4 <USART_voidInit>
	USART_voidSendStringWithDelimiterSynch(USART_1, addString("********************* ADMIN DASHBOARD ****************************** \r\n\0"), '\0');
 8001204:	2200      	movs	r2, #0
 8001206:	4904      	ldr	r1, [pc, #16]	; (8001218 <UART_voidSetup+0x64>)
 8001208:	2000      	movs	r0, #0
 800120a:	f001 fc83 	bl	8002b14 <USART_voidSendStringWithDelimiterSynch>

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000064 	.word	0x20000064
 8001218:	08002f80 	.word	0x08002f80

0800121c <DeletingBar>:
		_delay_ms(delayOfBar);
	}

}
static void DeletingBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	803b      	strh	r3, [r7, #0]
	LCD_voidStoreCustomChar(myLCD ,LCD_Deleting , 2);
 800122c:	2202      	movs	r2, #2
 800122e:	491d      	ldr	r1, [pc, #116]	; (80012a4 <DeletingBar+0x88>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fcfa 	bl	8001c2a <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,4,1);
 8001236:	2201      	movs	r2, #1
 8001238:	2104      	movs	r1, #4
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fcad 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("Deleting"));
 8001240:	4919      	ldr	r1, [pc, #100]	; (80012a8 <DeletingBar+0x8c>)
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fc7d 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(myLCD,0,2);
 8001248:	2202      	movs	r2, #2
 800124a:	2100      	movs	r1, #0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fca4 	bl	8001b9a <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ;
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <DeletingBar+0x90>)
 8001258:	fb82 1203 	smull	r1, r2, r2, r3
 800125c:	1152      	asrs	r2, r2, #5
 800125e:	17db      	asrs	r3, r3, #31
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < prcentage ; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e00a      	b.n	8001280 <DeletingBar+0x64>
	{
		LCD_voidSendChar(myLCD,2);
 800126a:	2102      	movs	r1, #2
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fb8b 	bl	8001988 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
 8001272:	883b      	ldrh	r3, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fb69 	bl	800094c <xDelay>
	for(int i = 0 ; i < prcentage ; i++)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf0      	blt.n	800126a <DeletingBar+0x4e>
	}
	LCD_voidGotoXY(myLCD,6,3);
 8001288:	2203      	movs	r2, #3
 800128a:	2106      	movs	r1, #6
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fc84 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("DONE"));
 8001292:	4907      	ldr	r1, [pc, #28]	; (80012b0 <DeletingBar+0x94>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 fc54 	bl	8001b42 <LCD_voidSendString>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000014 	.word	0x20000014
 80012a8:	08002fcc 	.word	0x08002fcc
 80012ac:	51eb851f 	.word	0x51eb851f
 80012b0:	08002fd8 	.word	0x08002fd8

080012b4 <AddinggBar>:
static void AddinggBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	803b      	strh	r3, [r7, #0]
	LCD_voidStoreCustomChar(myLCD ,LCD_Adding , 4);
 80012c4:	2204      	movs	r2, #4
 80012c6:	491d      	ldr	r1, [pc, #116]	; (800133c <AddinggBar+0x88>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fcae 	bl	8001c2a <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,5,1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2105      	movs	r1, #5
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fc61 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("Adding"));
 80012d8:	4919      	ldr	r1, [pc, #100]	; (8001340 <AddinggBar+0x8c>)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fc31 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(myLCD,0,2);
 80012e0:	2202      	movs	r2, #2
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 fc58 	bl	8001b9a <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ;
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <AddinggBar+0x90>)
 80012f0:	fb82 1203 	smull	r1, r2, r2, r3
 80012f4:	1152      	asrs	r2, r2, #5
 80012f6:	17db      	asrs	r3, r3, #31
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < prcentage ; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e00a      	b.n	8001318 <AddinggBar+0x64>
	{
		LCD_voidSendChar(myLCD,4);
 8001302:	2104      	movs	r1, #4
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fb3f 	bl	8001988 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb1d 	bl	800094c <xDelay>
	for(int i = 0 ; i < prcentage ; i++)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <AddinggBar+0x4e>
	}
	LCD_voidGotoXY(myLCD,6,3);
 8001320:	2203      	movs	r2, #3
 8001322:	2106      	movs	r1, #6
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fc38 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("DONE"));
 800132a:	4907      	ldr	r1, [pc, #28]	; (8001348 <AddinggBar+0x94>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fc08 	bl	8001b42 <LCD_voidSendString>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000001c 	.word	0x2000001c
 8001340:	08002fe0 	.word	0x08002fe0
 8001344:	51eb851f 	.word	0x51eb851f
 8001348:	08002fd8 	.word	0x08002fd8

0800134c <LCD_voidMainScreen>:

static void LCD_voidMainScreen(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 8001350:	210c      	movs	r1, #12
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <LCD_voidMainScreen+0x54>)
 8001354:	f000 fc12 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <LCD_voidMainScreen+0x54>)
 800135a:	f000 fc53 	bl	8001c04 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800135e:	4911      	ldr	r1, [pc, #68]	; (80013a4 <LCD_voidMainScreen+0x58>)
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <LCD_voidMainScreen+0x54>)
 8001362:	f000 fbee 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8001366:	2201      	movs	r2, #1
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LCD_voidMainScreen+0x54>)
 800136c:	f000 fc15 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("Select one of : "));
 8001370:	490d      	ldr	r1, [pc, #52]	; (80013a8 <LCD_voidMainScreen+0x5c>)
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LCD_voidMainScreen+0x54>)
 8001374:	f000 fbe5 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,2);
 8001378:	2202      	movs	r2, #2
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <LCD_voidMainScreen+0x54>)
 800137e:	f000 fc0c 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("1-Admin Options"));
 8001382:	490a      	ldr	r1, [pc, #40]	; (80013ac <LCD_voidMainScreen+0x60>)
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <LCD_voidMainScreen+0x54>)
 8001386:	f000 fbdc 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 800138a:	2203      	movs	r2, #3
 800138c:	2100      	movs	r1, #0
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <LCD_voidMainScreen+0x54>)
 8001390:	f000 fc03 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("2-Garage Statues"));
 8001394:	4906      	ldr	r1, [pc, #24]	; (80013b0 <LCD_voidMainScreen+0x64>)
 8001396:	4802      	ldr	r0, [pc, #8]	; (80013a0 <LCD_voidMainScreen+0x54>)
 8001398:	f000 fbd3 	bl	8001b42 <LCD_voidSendString>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000005c 	.word	0x2000005c
 80013a4:	08002e54 	.word	0x08002e54
 80013a8:	08002fe8 	.word	0x08002fe8
 80013ac:	08002ffc 	.word	0x08002ffc
 80013b0:	0800300c 	.word	0x0800300c

080013b4 <LCD_voidAdminOptions>:

static void LCD_voidAdminOptions(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 80013b8:	210c      	movs	r1, #12
 80013ba:	4815      	ldr	r0, [pc, #84]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013bc:	f000 fbde 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013c2:	f000 fc1f 	bl	8001c04 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80013c6:	4913      	ldr	r1, [pc, #76]	; (8001414 <LCD_voidAdminOptions+0x60>)
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013ca:	f000 fbba 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	480f      	ldr	r0, [pc, #60]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013d4:	f000 fbe1 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("1- Add Driver"));
 80013d8:	490f      	ldr	r1, [pc, #60]	; (8001418 <LCD_voidAdminOptions+0x64>)
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013dc:	f000 fbb1 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,2);
 80013e0:	2202      	movs	r2, #2
 80013e2:	2100      	movs	r1, #0
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013e6:	f000 fbd8 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("2- Delete Driver"));
 80013ea:	490c      	ldr	r1, [pc, #48]	; (800141c <LCD_voidAdminOptions+0x68>)
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013ee:	f000 fba8 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 80013f2:	2203      	movs	r2, #3
 80013f4:	2100      	movs	r1, #0
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 80013f8:	f000 fbcf 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("3- Edit Data"));
 80013fc:	4908      	ldr	r1, [pc, #32]	; (8001420 <LCD_voidAdminOptions+0x6c>)
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 8001400:	f000 fb9f 	bl	8001b42 <LCD_voidSendString>
	LCD_voidSendString(&myLCD,addString("  <B"));
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <LCD_voidAdminOptions+0x70>)
 8001406:	4802      	ldr	r0, [pc, #8]	; (8001410 <LCD_voidAdminOptions+0x5c>)
 8001408:	f000 fb9b 	bl	8001b42 <LCD_voidSendString>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000005c 	.word	0x2000005c
 8001414:	08002e54 	.word	0x08002e54
 8001418:	08003020 	.word	0x08003020
 800141c:	08003030 	.word	0x08003030
 8001420:	08003044 	.word	0x08003044
 8001424:	08003054 	.word	0x08003054

08001428 <LCD_voidStatusOptions>:

static void LCD_voidStatusOptions(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 800142c:	210c      	movs	r1, #12
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001430:	f000 fba4 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001434:	4816      	ldr	r0, [pc, #88]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001436:	f000 fbe5 	bl	8001c04 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800143a:	4916      	ldr	r1, [pc, #88]	; (8001494 <LCD_voidStatusOptions+0x6c>)
 800143c:	4814      	ldr	r0, [pc, #80]	; (8001490 <LCD_voidStatusOptions+0x68>)
 800143e:	f000 fb80 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8001442:	2201      	movs	r2, #1
 8001444:	2100      	movs	r1, #0
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001448:	f000 fba7 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("-Available Slots"));
 800144c:	4912      	ldr	r1, [pc, #72]	; (8001498 <LCD_voidStatusOptions+0x70>)
 800144e:	4810      	ldr	r0, [pc, #64]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001450:	f000 fb77 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,6,2);
 8001454:	2202      	movs	r2, #2
 8001456:	2106      	movs	r1, #6
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LCD_voidStatusOptions+0x68>)
 800145a:	f000 fb9e 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString(" = "));
 800145e:	490f      	ldr	r1, [pc, #60]	; (800149c <LCD_voidStatusOptions+0x74>)
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001462:	f000 fb6e 	bl	8001b42 <LCD_voidSendString>
	LCD_voidSendNumber(&myLCD, Glob_u8NumberOfAvailableSlots) ;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <LCD_voidStatusOptions+0x78>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <LCD_voidStatusOptions+0x68>)
 800146e:	f000 fc0d 	bl	8001c8c <LCD_voidSendNumber>


	LCD_voidGotoXY(&myLCD,11,3);
 8001472:	2203      	movs	r2, #3
 8001474:	210b      	movs	r1, #11
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001478:	f000 fb8f 	bl	8001b9a <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("<BACK"));
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <LCD_voidStatusOptions+0x7c>)
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001480:	f000 fb5f 	bl	8001b42 <LCD_voidSendString>
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK ) ;
 8001484:	210f      	movs	r1, #15
 8001486:	4802      	ldr	r0, [pc, #8]	; (8001490 <LCD_voidStatusOptions+0x68>)
 8001488:	f000 fb78 	bl	8001b7c <LCD_voidSetCursorType>

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000005c 	.word	0x2000005c
 8001494:	08002e54 	.word	0x08002e54
 8001498:	0800305c 	.word	0x0800305c
 800149c:	08003070 	.word	0x08003070
 80014a0:	20000001 	.word	0x20000001
 80014a4:	08003074 	.word	0x08003074

080014a8 <LCD_AddDriver>:



static void LCD_AddDriver(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 80014ac:	210c      	movs	r1, #12
 80014ae:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LCD_AddDriver+0x38>)
 80014b0:	f000 fb64 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <LCD_AddDriver+0x38>)
 80014b6:	f000 fba5 	bl	8001c04 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80014ba:	490a      	ldr	r1, [pc, #40]	; (80014e4 <LCD_AddDriver+0x3c>)
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <LCD_AddDriver+0x38>)
 80014be:	f000 fb40 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2100      	movs	r1, #0
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <LCD_AddDriver+0x38>)
 80014c8:	f000 fb67 	bl	8001b9a <LCD_voidGotoXY>
	AddinggBar(&myLCD,100,1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2164      	movs	r1, #100	; 0x64
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <LCD_AddDriver+0x38>)
 80014d2:	f7ff feef 	bl	80012b4 <AddinggBar>
	LCD_voidMainScreen();
 80014d6:	f7ff ff39 	bl	800134c <LCD_voidMainScreen>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000005c 	.word	0x2000005c
 80014e4:	08002e54 	.word	0x08002e54

080014e8 <LCD_voidDeleteDriver>:

static void LCD_voidDeleteDriver(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 80014ec:	210c      	movs	r1, #12
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <LCD_voidDeleteDriver+0x38>)
 80014f0:	f000 fb44 	bl	8001b7c <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <LCD_voidDeleteDriver+0x38>)
 80014f6:	f000 fb85 	bl	8001c04 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <LCD_voidDeleteDriver+0x3c>)
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <LCD_voidDeleteDriver+0x38>)
 80014fe:	f000 fb20 	bl	8001b42 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8001502:	2201      	movs	r2, #1
 8001504:	2100      	movs	r1, #0
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <LCD_voidDeleteDriver+0x38>)
 8001508:	f000 fb47 	bl	8001b9a <LCD_voidGotoXY>
	DeletingBar(&myLCD,100,1);
 800150c:	2201      	movs	r2, #1
 800150e:	2164      	movs	r1, #100	; 0x64
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <LCD_voidDeleteDriver+0x38>)
 8001512:	f7ff fe83 	bl	800121c <DeletingBar>
	LCD_voidMainScreen();
 8001516:	f7ff ff19 	bl	800134c <LCD_voidMainScreen>

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000005c 	.word	0x2000005c
 8001524:	08002e54 	.word	0x08002e54

08001528 <keypad_voidSetup>:
/********************************************** End of LCD fcn	********************************************************/

/********************************************** Start of Keypad fcn	********************************************************/
static void keypad_voidSetup(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	/*	Keypad Init		*/
	myKeypad.NumOfRows = ROWS ;	// Output
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <keypad_voidSetup+0x2c>)
 800152e:	2204      	movs	r2, #4
 8001530:	701a      	strb	r2, [r3, #0]
	myKeypad.NumOfCols = COLS ;	//Input
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <keypad_voidSetup+0x2c>)
 8001534:	2203      	movs	r2, #3
 8001536:	705a      	strb	r2, [r3, #1]
	myKeypad.Port_Pin_Rows = RowsPins ;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <keypad_voidSetup+0x2c>)
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <keypad_voidSetup+0x30>)
 800153c:	605a      	str	r2, [r3, #4]
	myKeypad.Port_Pin_Cols = ColsPins ;
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <keypad_voidSetup+0x2c>)
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <keypad_voidSetup+0x34>)
 8001542:	609a      	str	r2, [r3, #8]
	myKeypad.KeysPattern = newKeyMap(keys) ;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <keypad_voidSetup+0x2c>)
 8001546:	4a06      	ldr	r2, [pc, #24]	; (8001560 <keypad_voidSetup+0x38>)
 8001548:	60da      	str	r2, [r3, #12]
	HAL_KeyPadInit(&myKeypad);
 800154a:	4802      	ldr	r0, [pc, #8]	; (8001554 <keypad_voidSetup+0x2c>)
 800154c:	f000 f89a 	bl	8001684 <HAL_KeyPadInit>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000094 	.word	0x20000094
 8001558:	20000030 	.word	0x20000030
 800155c:	20000038 	.word	0x20000038
 8001560:	20000024 	.word	0x20000024

08001564 <ECU3_Dashboard_APP_SETUP>:
*******************************************************************************/


/*				MAIN FCNs				*/
void ECU3_Dashboard_APP_SETUP(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	/*			Init MCU Clock			*/
	RCC_voidInitSysClocks();
 8001568:	f000 fe9a 	bl	80022a0 <RCC_voidInitSysClocks>
	RCC_voidEnableClock(RCC_APB2, PORTA);
 800156c:	2102      	movs	r1, #2
 800156e:	2002      	movs	r0, #2
 8001570:	f000 fe56 	bl	8002220 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, PORTB);
 8001574:	2103      	movs	r1, #3
 8001576:	2002      	movs	r0, #2
 8001578:	f000 fe52 	bl	8002220 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,14 );		/*	USART1	*/
 800157c:	210e      	movs	r1, #14
 800157e:	2002      	movs	r0, #2
 8001580:	f000 fe4e 	bl	8002220 <RCC_voidEnableClock>


	
	/*			MCAL					*/
	//SPI_voidSetup() ;
	UART_voidSetup();
 8001584:	f7ff fe16 	bl	80011b4 <UART_voidSetup>


	/*			HAL					*/
	LCD_voidSetup();
 8001588:	f7ff fe00 	bl	800118c <LCD_voidSetup>
	keypad_voidSetup();
 800158c:	f7ff ffcc 	bl	8001528 <keypad_voidSetup>

	/*			General				*/
	System_voidFillAdminsData();
 8001590:	f7ff f9f8 	bl	8000984 <System_voidFillAdminsData>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <ECU3_Dashboard_APP_LOOP>:

u8 Glob_u8Pressed_Key = KEYPAD_NOT_PRESSED_RETURN ;
void ECU3_Dashboard_APP_LOOP(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	do
	{
		Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 800159c:	4836      	ldr	r0, [pc, #216]	; (8001678 <ECU3_Dashboard_APP_LOOP+0xe0>)
 800159e:	f000 f8d1 	bl	8001744 <HAL_KeyPadGetPressedKey>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015a8:	701a      	strb	r2, [r3, #0]

	}while(!(Glob_u8Pressed_Key>= '1' && Glob_u8Pressed_Key <= '2'));
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b30      	cmp	r3, #48	; 0x30
 80015b0:	d9f4      	bls.n	800159c <ECU3_Dashboard_APP_LOOP+0x4>
 80015b2:	4b32      	ldr	r3, [pc, #200]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b32      	cmp	r3, #50	; 0x32
 80015b8:	d8f0      	bhi.n	800159c <ECU3_Dashboard_APP_LOOP+0x4>



	// Get Option
	if((u8)OPTION_ADMIN_SELECT == Glob_u8Pressed_Key)
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b31      	cmp	r3, #49	; 0x31
 80015c0:	d13d      	bne.n	800163e <ECU3_Dashboard_APP_LOOP+0xa6>
	{
		// Validate Admin username and password
		if(Glob_LogginSeesionExpired == 1)
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <ECU3_Dashboard_APP_LOOP+0xe8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <ECU3_Dashboard_APP_LOOP+0x36>
		{
			System_u8ValidateAdminData() ;
 80015ca:	f7ff fa3f 	bl	8000a4c <System_u8ValidateAdminData>
		}

		if(Glob_LogginSeesionExpired == 0)
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <ECU3_Dashboard_APP_LOOP+0xe8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d130      	bne.n	8001638 <ECU3_Dashboard_APP_LOOP+0xa0>
		{
			// admin privilege Screen
			LCD_voidAdminOptions();
 80015d6:	f7ff feed 	bl	80013b4 <LCD_voidAdminOptions>
			do
			{
				Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 80015da:	4827      	ldr	r0, [pc, #156]	; (8001678 <ECU3_Dashboard_APP_LOOP+0xe0>)
 80015dc:	f000 f8b2 	bl	8001744 <HAL_KeyPadGetPressedKey>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015e6:	701a      	strb	r2, [r3, #0]

			}while(!((Glob_u8Pressed_Key>= '1' && Glob_u8Pressed_Key <= '3' ) || (Glob_u8Pressed_Key == (u8)KEYPAD_BACK_SYMBOL ))) ;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b30      	cmp	r3, #48	; 0x30
 80015ee:	d903      	bls.n	80015f8 <ECU3_Dashboard_APP_LOOP+0x60>
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b33      	cmp	r3, #51	; 0x33
 80015f6:	d903      	bls.n	8001600 <ECU3_Dashboard_APP_LOOP+0x68>
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b23      	cmp	r3, #35	; 0x23
 80015fe:	d1ec      	bne.n	80015da <ECU3_Dashboard_APP_LOOP+0x42>

			/* Check  Pressed Key */
			if(OPTION_ADD_USER == Glob_u8Pressed_Key)
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b31      	cmp	r3, #49	; 0x31
 8001606:	d102      	bne.n	800160e <ECU3_Dashboard_APP_LOOP+0x76>
			{
				// Add New User
				System_voidAddNewUser();
 8001608:	f7ff fb2e 	bl	8000c68 <System_voidAddNewUser>
		//<TODO ERROR> Wrong Main Screen Selection
		LCD_voidMainScreen();

	}

}
 800160c:	e031      	b.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
			else if(OPTION_DELETE_USER == Glob_u8Pressed_Key)
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b32      	cmp	r3, #50	; 0x32
 8001614:	d102      	bne.n	800161c <ECU3_Dashboard_APP_LOOP+0x84>
				System_VoidDeleteUser();
 8001616:	f7ff fc39 	bl	8000e8c <System_VoidDeleteUser>
}
 800161a:	e02a      	b.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
			else if(OPTION_EDIT_USER == Glob_u8Pressed_Key)
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b33      	cmp	r3, #51	; 0x33
 8001622:	d026      	beq.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
			else if(KEYPAD_BACK_SYMBOL == Glob_u8Pressed_Key)
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b23      	cmp	r3, #35	; 0x23
 800162a:	d102      	bne.n	8001632 <ECU3_Dashboard_APP_LOOP+0x9a>
				LCD_voidMainScreen();
 800162c:	f7ff fe8e 	bl	800134c <LCD_voidMainScreen>
}
 8001630:	e01f      	b.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
				LCD_voidMainScreen();
 8001632:	f7ff fe8b 	bl	800134c <LCD_voidMainScreen>
}
 8001636:	e01c      	b.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
			LCD_voidMainScreen();
 8001638:	f7ff fe88 	bl	800134c <LCD_voidMainScreen>
}
 800163c:	e019      	b.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
	else if ((u8)OPTION_GARAGE_SELECT == Glob_u8Pressed_Key)
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b32      	cmp	r3, #50	; 0x32
 8001644:	d113      	bne.n	800166e <ECU3_Dashboard_APP_LOOP+0xd6>
		LCD_voidStatusOptions() ;
 8001646:	f7ff feef 	bl	8001428 <LCD_voidStatusOptions>
			Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <ECU3_Dashboard_APP_LOOP+0xe0>)
 800164c:	f000 f87a 	bl	8001744 <HAL_KeyPadGetPressedKey>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 8001656:	701a      	strb	r2, [r3, #0]
		}while(!(Glob_u8Pressed_Key == (u8)KEYPAD_BACK_SYMBOL ))  ;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b23      	cmp	r3, #35	; 0x23
 800165e:	d1f4      	bne.n	800164a <ECU3_Dashboard_APP_LOOP+0xb2>
		if(KEYPAD_BACK_SYMBOL == Glob_u8Pressed_Key)
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <ECU3_Dashboard_APP_LOOP+0xe4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b23      	cmp	r3, #35	; 0x23
 8001666:	d104      	bne.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
			LCD_voidMainScreen();
 8001668:	f7ff fe70 	bl	800134c <LCD_voidMainScreen>
}
 800166c:	e001      	b.n	8001672 <ECU3_Dashboard_APP_LOOP+0xda>
		LCD_voidMainScreen();
 800166e:	f7ff fe6d 	bl	800134c <LCD_voidMainScreen>
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000094 	.word	0x20000094
 800167c:	2000003e 	.word	0x2000003e
 8001680:	20000000 	.word	0x20000000

08001684 <HAL_KeyPadInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void HAL_KeyPadInit(KeyPad_cnfg* ptr_keyPadCfg)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    u8 LOC_u8Counter = 0 ; 
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
    u8 LOC_u8GetPort = 0 ; 
 8001690:	2300      	movs	r3, #0
 8001692:	73bb      	strb	r3, [r7, #14]
    u8 LOC_u8GetPin = 0 ; 
 8001694:	2300      	movs	r3, #0
 8001696:	737b      	strb	r3, [r7, #13]
	u8 LOC_u8NumOfRow = ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows) +  ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows); 
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	733b      	strb	r3, [r7, #12]
	u8 LOC_u8NumOfCols = ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols)+  ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols); 
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	72fb      	strb	r3, [r7, #11]
	
    /*          INIT GPIOs  ROWs GPIO_OUTPUT_10MHZ_PUSH_PULL     */
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfRow ; LOC_u8Counter++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e01d      	b.n	80016ea <HAL_KeyPadInit+0x66>
    {        
       LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8Counter];   // PORT
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	73bb      	strb	r3, [r7, #14]
       LOC_u8Counter++ ; 
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
       LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8Counter];   // PIN
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	737b      	strb	r3, [r7, #13]
       GPIO_voidSetPinDirection(LOC_u8GetPort,LOC_u8GetPin,GPIO_OUTPUT_10MHZ_PUSH_PULL);
 80016cc:	7b79      	ldrb	r1, [r7, #13]
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fbd6 	bl	8001e84 <GPIO_voidSetPinDirection>
	   GPIO_voidSetPinValue(LOC_u8GetPort,LOC_u8GetPin,HIGH);
 80016d8:	7b79      	ldrb	r1, [r7, #13]
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	2201      	movs	r2, #1
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fc96 	bl	8002010 <GPIO_voidSetPinValue>
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfRow ; LOC_u8Counter++)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3dd      	bcc.n	80016ae <HAL_KeyPadInit+0x2a>
    }
    /*         Init GPIOs COLs Input        */
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfCols ; LOC_u8Counter++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e01d      	b.n	8001734 <HAL_KeyPadInit+0xb0>
    {        
       LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8Counter];   // PORT
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	73bb      	strb	r3, [r7, #14]
       LOC_u8Counter++ ; 
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	3301      	adds	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
       LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8Counter];   // PIN
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	737b      	strb	r3, [r7, #13]
       GPIO_voidSetPinDirection(LOC_u8GetPort,LOC_u8GetPin,GPIO_PULLUP_PULLDOWN);
 8001716:	7b79      	ldrb	r1, [r7, #13]
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	2208      	movs	r2, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fbb1 	bl	8001e84 <GPIO_voidSetPinDirection>
       GPIO_u8ChoosePullMode(LOC_u8GetPort,LOC_u8GetPin,GPIO_PULL_UP);
 8001722:	7b79      	ldrb	r1, [r7, #13]
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	2201      	movs	r2, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fd03 	bl	8002134 <GPIO_u8ChoosePullMode>
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfCols ; LOC_u8Counter++)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3301      	adds	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3dd      	bcc.n	80016f8 <HAL_KeyPadInit+0x74>
    }

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_KeyPadGetPressedKey>:

u8 HAL_KeyPadGetPressedKey(KeyPad_cnfg* ptr_keyPadCfg)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    u8 LOC_u8CounterRows = 0 ;
 800174c:	2300      	movs	r3, #0
 800174e:	75fb      	strb	r3, [r7, #23]
    u8 LOC_u8CounterCols = 0 ;
 8001750:	2300      	movs	r3, #0
 8001752:	75bb      	strb	r3, [r7, #22]
    u8 LOC_u8GetPort = 0 ;
 8001754:	2300      	movs	r3, #0
 8001756:	757b      	strb	r3, [r7, #21]
    u8 LOC_u8GetPin = 0 ;
 8001758:	2300      	movs	r3, #0
 800175a:	74bb      	strb	r3, [r7, #18]
    u8 LOC_u8PressedFlag = 0 ;
 800175c:	2300      	movs	r3, #0
 800175e:	753b      	strb	r3, [r7, #20]
    u8 LOC_u8ReturnValue = (u8)KEYPAD_NOT_PRESSED_RETURN ;
 8001760:	230a      	movs	r3, #10
 8001762:	74fb      	strb	r3, [r7, #19]
	u8 LOC_u8Index = 0 ;
 8001764:	2300      	movs	r3, #0
 8001766:	747b      	strb	r3, [r7, #17]
	u8 LOC_u8IndexRow = 0 ;
 8001768:	2300      	movs	r3, #0
 800176a:	743b      	strb	r3, [r7, #16]
	u8 LOC_u8IndexCol = 0 ;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

	u8 LOC_u8NumOfRow = ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows) +  ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	73bb      	strb	r3, [r7, #14]
	u8 LOC_u8NumOfCols = ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols)+  ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	737b      	strb	r3, [r7, #13]

    /*          LOOP IN ROWS        */
    for(LOC_u8CounterRows = 0 ; LOC_u8CounterRows < LOC_u8NumOfRow ;  LOC_u8CounterRows++)
 8001780:	2300      	movs	r3, #0
 8001782:	75fb      	strb	r3, [r7, #23]
 8001784:	e073      	b.n	800186e <HAL_KeyPadGetPressedKey+0x12a>
    {
        /*              GET PORT AND PIN        */
        LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8CounterRows];   // PORT
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	4413      	add	r3, r2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	757b      	strb	r3, [r7, #21]
        LOC_u8CounterRows++ ;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	3301      	adds	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
        LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8CounterRows];   // PIN
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	74bb      	strb	r3, [r7, #18]
        /*               Enable Row Number LOC_u8CounterRows */
        ENABLE_ROW(LOC_u8GetPort,LOC_u8GetPin);
 80017a4:	7cb9      	ldrb	r1, [r7, #18]
 80017a6:	7d7b      	ldrb	r3, [r7, #21]
 80017a8:	2200      	movs	r2, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fc30 	bl	8002010 <GPIO_voidSetPinValue>
        /*   Check Whats Pressed In This Row         */
        for(LOC_u8CounterCols = 0 ; LOC_u8CounterCols < LOC_u8NumOfCols ; LOC_u8CounterCols++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	75bb      	strb	r3, [r7, #22]
 80017b4:	e043      	b.n	800183e <HAL_KeyPadGetPressedKey+0xfa>
        {
            LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8CounterCols];   // PORT
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	7dbb      	ldrb	r3, [r7, #22]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	757b      	strb	r3, [r7, #21]
            LOC_u8CounterCols++ ;
 80017c2:	7dbb      	ldrb	r3, [r7, #22]
 80017c4:	3301      	adds	r3, #1
 80017c6:	75bb      	strb	r3, [r7, #22]
            LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8CounterCols];   // PIN
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	7dbb      	ldrb	r3, [r7, #22]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	74bb      	strb	r3, [r7, #18]
            IS_KYBD_PRESSED(LOC_u8GetPort,LOC_u8GetPin)
 80017d4:	7cba      	ldrb	r2, [r7, #18]
 80017d6:	7d7b      	ldrb	r3, [r7, #21]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fc6e 	bl	80020bc <GPIO_u8GetPinValue>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d128      	bne.n	8001838 <HAL_KeyPadGetPressedKey+0xf4>
            {
                /*  Set Pressed Flag    */
                LOC_u8PressedFlag = 1 ;
 80017e6:	2301      	movs	r3, #1
 80017e8:	753b      	strb	r3, [r7, #20]
                /*  Key Is Pressed */
                IGNORE_CONT_PRESSINGS(LOC_u8GetPort,LOC_u8GetPin){asm("NOP");};
 80017ea:	e000      	b.n	80017ee <HAL_KeyPadGetPressedKey+0xaa>
 80017ec:	bf00      	nop
 80017ee:	7cba      	ldrb	r2, [r7, #18]
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fc61 	bl	80020bc <GPIO_u8GetPinValue>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f5      	beq.n	80017ec <HAL_KeyPadGetPressedKey+0xa8>
				/*	Get Right Index For 2D Array	*/
				LOC_u8IndexRow = (LOC_u8CounterRows-1)/2;
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	3b01      	subs	r3, #1
 8001804:	0fda      	lsrs	r2, r3, #31
 8001806:	4413      	add	r3, r2
 8001808:	105b      	asrs	r3, r3, #1
 800180a:	743b      	strb	r3, [r7, #16]
				LOC_u8IndexCol =(LOC_u8CounterCols-1)/2;
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	3b01      	subs	r3, #1
 8001810:	0fda      	lsrs	r2, r3, #31
 8001812:	4413      	add	r3, r2
 8001814:	105b      	asrs	r3, r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
				/*	Conv. 2D Index to 1D Index	*/
				LOC_u8Index = _2D_INDEX_TO_1D_INDEX(ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols),LOC_u8IndexRow,LOC_u8IndexCol);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	7c3a      	ldrb	r2, [r7, #16]
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4413      	add	r3, r2
 8001828:	747b      	strb	r3, [r7, #17]
                /*	Get Value	*/
				LOC_u8ReturnValue = ACCESS_STRUCT(ptr_keyPadCfg,KeysPattern)[LOC_u8Index] ;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	7c7b      	ldrb	r3, [r7, #17]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	74fb      	strb	r3, [r7, #19]
				/*  Break From Inner Loop   */
                break;
 8001836:	e006      	b.n	8001846 <HAL_KeyPadGetPressedKey+0x102>
        for(LOC_u8CounterCols = 0 ; LOC_u8CounterCols < LOC_u8NumOfCols ; LOC_u8CounterCols++)
 8001838:	7dbb      	ldrb	r3, [r7, #22]
 800183a:	3301      	adds	r3, #1
 800183c:	75bb      	strb	r3, [r7, #22]
 800183e:	7dba      	ldrb	r2, [r7, #22]
 8001840:	7b7b      	ldrb	r3, [r7, #13]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3b7      	bcc.n	80017b6 <HAL_KeyPadGetPressedKey+0x72>
            }
        }
		LOC_u8GetPin = ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8CounterRows] ;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	74bb      	strb	r3, [r7, #18]
			/*               Disable Row Number LOC_u8CounterRows */
			DISABLE_ROW(LOC_u8GetPort,LOC_u8GetPin);
 8001852:	7cb9      	ldrb	r1, [r7, #18]
 8001854:	7d7b      	ldrb	r3, [r7, #21]
 8001856:	2201      	movs	r2, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fbd9 	bl	8002010 <GPIO_voidSetPinValue>
			/*              Chk Pressed Flag        */
			if(LOC_u8PressedFlag != 0)
 800185e:	7d3b      	ldrb	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_KeyPadGetPressedKey+0x134>
				// Pressed so break from outer loop
				break;
			}
			else
			{
				LOC_u8ReturnValue = (u8)KEYPAD_NOT_PRESSED_RETURN ;
 8001864:	230a      	movs	r3, #10
 8001866:	74fb      	strb	r3, [r7, #19]
    for(LOC_u8CounterRows = 0 ; LOC_u8CounterRows < LOC_u8NumOfRow ;  LOC_u8CounterRows++)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	3301      	adds	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	429a      	cmp	r2, r3
 8001874:	d387      	bcc.n	8001786 <HAL_KeyPadGetPressedKey+0x42>
 8001876:	e000      	b.n	800187a <HAL_KeyPadGetPressedKey+0x136>
				break;
 8001878:	bf00      	nop
			}


    }
    return LOC_u8ReturnValue ;
 800187a:	7cfb      	ldrb	r3, [r7, #19]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <xDelay>:
#define WAIT_MS(x) xDelay(x)



static void xDelay(u32 time)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e00c      	b.n	80018ac <xDelay+0x28>
		for(j = 1000;j > 0;j--);
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	e002      	b.n	80018a0 <xDelay+0x1c>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <xDelay+0x16>
	for(i = time;i > 0;i--)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1ef      	bne.n	8001892 <xDelay+0xe>

}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <LCD_voidInit>:
* Function Definitions
*******************************************************************************/


void LCD_voidInit(LCD_Config* ptr_cfg)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
		
        /********************************** END OF INITILIZATION *****************************************************/      
	#elif LCD_Mode == _4_WIRE_MODE
        // Init D3 --> D7 
        GPIO_voidSetPinDirection(_4_D4_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB4
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	3304      	adds	r3, #4
 80018ca:	7818      	ldrb	r0, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	3305      	adds	r3, #5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f000 fad4 	bl	8001e84 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D5_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB5
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3306      	adds	r3, #6
 80018e2:	7818      	ldrb	r0, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	3307      	adds	r3, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2202      	movs	r2, #2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f000 fac8 	bl	8001e84 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D6_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB6
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	3308      	adds	r3, #8
 80018fa:	7818      	ldrb	r0, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	3309      	adds	r3, #9
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2202      	movs	r2, #2
 8001906:	4619      	mov	r1, r3
 8001908:	f000 fabc 	bl	8001e84 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D7_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB7
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	330a      	adds	r3, #10
 8001912:	7818      	ldrb	r0, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	330b      	adds	r3, #11
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2202      	movs	r2, #2
 800191e:	4619      	mov	r1, r3
 8001920:	f000 fab0 	bl	8001e84 <GPIO_voidSetPinDirection>
		 
        GPIO_voidSetPinDirection(RS_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //RS
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3302      	adds	r3, #2
 800192a:	7818      	ldrb	r0, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	3303      	adds	r3, #3
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2202      	movs	r2, #2
 8001936:	4619      	mov	r1, r3
 8001938:	f000 faa4 	bl	8001e84 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(EN_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //EN
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	7818      	ldrb	r0, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	3301      	adds	r3, #1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2202      	movs	r2, #2
 800194c:	4619      	mov	r1, r3
 800194e:	f000 fa99 	bl	8001e84 <GPIO_voidSetPinDirection>
		
		LCD_voidWriteCmd(ptr_cfg , LCD_RETURN_HOME) ;
 8001952:	2102      	movs	r1, #2
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f9b7 	bl	8001cc8 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_FUNCTION_4BIT_2LINES) ;
 800195a:	2128      	movs	r1, #40	; 0x28
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f9b3 	bl	8001cc8 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_CLEAR_SCREEN) ;
 8001962:	2101      	movs	r1, #1
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f9af 	bl	8001cc8 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_DISP_ON_CURSOR_BLINK) ;
 800196a:	210f      	movs	r1, #15
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f9ab 	bl	8001cc8 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f9a7 	bl	8001cc8 <LCD_voidWriteCmd>
		/********************************** END OF INITILIZATION *****************************************************/    
	#endif
	WAIT_MS(2);
 800197a:	2002      	movs	r0, #2
 800197c:	f7ff ff82 	bl	8001884 <xDelay>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <LCD_voidSendChar>:
void LCD_voidSendChar(LCD_Config* ptrCnfg , u8 copy_u8data)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
        GPIO_voidSetPinValue(_8_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
		WRITE_DATA_TO_LCD(ptrCnfg);
#elif LCD_Mode == _4_WIRE_MODE
		// Add data in Data Line
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,4));  //DB4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	3304      	adds	r3, #4
 800199a:	7818      	ldrb	r0, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	3305      	adds	r3, #5
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	f000 fb2d 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,5));  //DB5
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	3306      	adds	r3, #6
 80019bc:	7818      	ldrb	r0, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	3307      	adds	r3, #7
 80019c4:	7819      	ldrb	r1, [r3, #0]
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	f000 fb1c 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,6));  //DB6
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3308      	adds	r3, #8
 80019de:	7818      	ldrb	r0, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3309      	adds	r3, #9
 80019e6:	7819      	ldrb	r1, [r3, #0]
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	f000 fb0b 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	330a      	adds	r3, #10
 8001a00:	7818      	ldrb	r0, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	330b      	adds	r3, #11
 8001a08:	7819      	ldrb	r1, [r3, #0]
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	09db      	lsrs	r3, r3, #7
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	f000 fafd 	bl	8002010 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	7818      	ldrb	r0, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	3303      	adds	r3, #3
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f000 faf1 	bl	8002010 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	7818      	ldrb	r0, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f000 fae6 	bl	8002010 <GPIO_voidSetPinValue>
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7ff ff1d 	bl	8001884 <xDelay>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	7818      	ldrb	r0, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f000 fad8 	bl	8002010 <GPIO_voidSetPinValue>
 8001a60:	2014      	movs	r0, #20
 8001a62:	f7ff ff0f 	bl	8001884 <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,0));  //DB4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	7818      	ldrb	r0, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	3305      	adds	r3, #5
 8001a74:	7819      	ldrb	r1, [r3, #0]
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f000 fac6 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,1));  //DB5
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	3306      	adds	r3, #6
 8001a8a:	7818      	ldrb	r0, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	3307      	adds	r3, #7
 8001a92:	7819      	ldrb	r1, [r3, #0]
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f000 fab5 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,2));  //DB6
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	7818      	ldrb	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	3309      	adds	r3, #9
 8001ab4:	7819      	ldrb	r1, [r3, #0]
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f000 faa4 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,3));  //DB7 
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	330a      	adds	r3, #10
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	330b      	adds	r3, #11
 8001ad6:	7819      	ldrb	r1, [r3, #0]
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f000 fa93 	bl	8002010 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	3302      	adds	r3, #2
 8001af0:	7818      	ldrb	r0, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	3303      	adds	r3, #3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4619      	mov	r1, r3
 8001afe:	f000 fa87 	bl	8002010 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	7818      	ldrb	r0, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4619      	mov	r1, r3
 8001b14:	f000 fa7c 	bl	8002010 <GPIO_voidSetPinValue>
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff feb3 	bl	8001884 <xDelay>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	7818      	ldrb	r0, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f000 fa6e 	bl	8002010 <GPIO_voidSetPinValue>
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff fea5 	bl	8001884 <xDelay>
#endif
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <LCD_voidSendString>:

void LCD_voidSendString(LCD_Config* ptrCnfg , u8* ptr_u8data)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	u8 index =0 ; 
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 8001b50:	e00a      	b.n	8001b68 <LCD_voidSendString+0x26>
	{
		LCD_voidSendChar(ptrCnfg,ptr_u8data[index]);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff13 	bl	8001988 <LCD_voidSendChar>
		index++;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	3301      	adds	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <LCD_voidSendString+0x10>
	}
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <LCD_voidSetCursorType>:
{
	
		
}
void LCD_voidSetCursorType(LCD_Config*  ptrLCD ,cursorType copy_cursorType)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	LCD_voidWriteCmd(ptrLCD, copy_cursorType) ;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f89b 	bl	8001cc8 <LCD_voidWriteCmd>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <LCD_voidGotoXY>:
	}
			
		
}
void LCD_voidGotoXY(LCD_Config* ptrCnfg , u8 x , u8 y)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	70bb      	strb	r3, [r7, #2]
	 | DDRAM     | 0x40
	 |           |			for Row 1 and in between 0x40 -> 0x4f select Col
	 |           |	
	 |           | 0x4f	
	*/
	u8 address = 0 ; 
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
	if( y < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Rows) && x < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Cols) )
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	78ba      	ldrb	r2, [r7, #2]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d221      	bcs.n	8001bfc <LCD_voidGotoXY+0x62>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d21c      	bcs.n	8001bfc <LCD_voidGotoXY+0x62>
		 *	RS 0
		 *  RW 0 --> 0 by default
		 *  D7 1
		 * ADD
		 */	
		if(y  < 2 )
 8001bc2:	78bb      	ldrb	r3, [r7, #2]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d806      	bhi.n	8001bd6 <LCD_voidGotoXY+0x3c>
		{
			 address = y * 0x40 + x;		/*	If 0 --> Row 1 , If 0x40 Row 2	*/
 8001bc8:	78bb      	ldrb	r3, [r7, #2]
 8001bca:	019b      	lsls	r3, r3, #6
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e009      	b.n	8001bea <LCD_voidGotoXY+0x50>
		}
		else
		{
			address = (y-2) * 0x40 + 0x10  + x;
 8001bd6:	78bb      	ldrb	r3, [r7, #2]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	4413      	add	r3, r2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3310      	adds	r3, #16
 8001be8:	73fb      	strb	r3, [r7, #15]

		}
		address |= (1 << 7) ;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bf0:	73fb      	strb	r3, [r7, #15]


		LCD_voidWriteCmd(ptrCnfg , address);
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f866 	bl	8001cc8 <LCD_voidWriteCmd>

		
	}

}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <LCD_voidClear>:
void LCD_voidClear(LCD_Config* x)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	LCD_voidWriteCmd(x,LCD_CLEAR_SCREEN);	
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f85a 	bl	8001cc8 <LCD_voidWriteCmd>
	WAIT_MS(1);		
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff fe35 	bl	8001884 <xDelay>
	LCD_voidWriteCmd(x , LCD_BEGIN_AT_FIRST_ROW) ;
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f853 	bl	8001cc8 <LCD_voidWriteCmd>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <LCD_voidStoreCustomChar>:
void LCD_voidStoreCustomChar(LCD_Config*  ptrLCD ,u8* ptrToArray, u8 copy_u8CharIndex)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71fb      	strb	r3, [r7, #7]
	u8 address = 0 ,index ; 
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75bb      	strb	r3, [r7, #22]
	/*		Have 8 Places Only for Custom Char Can Store in CGRAM	*/
	if(copy_u8CharIndex < 8 )
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	d820      	bhi.n	8001c84 <LCD_voidStoreCustomChar+0x5a>
	{
		address = copy_u8CharIndex * 0x08 ;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	75bb      	strb	r3, [r7, #22]
		*		RW = 0 
		*		D7 = 0 
		*		D6 = 1
		*		D0:D6 Address
		*/
		address |= (1<<6) ; 
 8001c48:	7dbb      	ldrb	r3, [r7, #22]
 8001c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c4e:	75bb      	strb	r3, [r7, #22]
		LCD_voidWriteCmd(ptrLCD,address);
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	4619      	mov	r1, r3
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f837 	bl	8001cc8 <LCD_voidWriteCmd>
		for(index = 0 ; index < 8 ; index++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	e00a      	b.n	8001c76 <LCD_voidStoreCustomChar+0x4c>
		{
			LCD_voidSendChar(ptrLCD,ptrToArray[index]);
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff fe8c 	bl	8001988 <LCD_voidSendChar>
		for(index = 0 ; index < 8 ; index++)
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	3301      	adds	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d9f1      	bls.n	8001c60 <LCD_voidStoreCustomChar+0x36>
		}
		// Restore point to DDRAM OPTIONAL by default display from DDRAM
		LCD_voidWriteCmd(ptrLCD,LCD_RETURN_HOME);
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f822 	bl	8001cc8 <LCD_voidWriteCmd>
		
	}
	
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <LCD_voidSendNumber>:

void LCD_voidSendNumber(LCD_Config*  ptrLCD , u32 copy_u32Number)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	u8 Buffer[17] = {0} ;
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	741a      	strb	r2, [r3, #16]
	itoa(copy_u32Number,Buffer,10) ;
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	220a      	movs	r2, #10
 8001cac:	4619      	mov	r1, r3
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f000 ffbe 	bl	8002c30 <itoa>
	LCD_voidSendString(ptrLCD , Buffer);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff41 	bl	8001b42 <LCD_voidSendString>

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LCD_voidWriteCmd>:



/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	7818      	ldrb	r0, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3305      	adds	r3, #5
 8001ce2:	7819      	ldrb	r1, [r3, #0]
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f000 f98d 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	3306      	adds	r3, #6
 8001cfc:	7818      	ldrb	r0, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	3307      	adds	r3, #7
 8001d04:	7819      	ldrb	r1, [r3, #0]
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	f000 f97c 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	7818      	ldrb	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	3309      	adds	r3, #9
 8001d26:	7819      	ldrb	r1, [r3, #0]
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	f000 f96b 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	330a      	adds	r3, #10
 8001d40:	7818      	ldrb	r0, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	330b      	adds	r3, #11
 8001d48:	7819      	ldrb	r1, [r3, #0]
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	09db      	lsrs	r3, r3, #7
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	f000 f95d 	bl	8002010 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	7818      	ldrb	r0, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	3303      	adds	r3, #3
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f000 f951 	bl	8002010 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	7818      	ldrb	r0, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f000 f946 	bl	8002010 <GPIO_voidSetPinValue>
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff fd7d 	bl	8001884 <xDelay>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	7818      	ldrb	r0, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	3301      	adds	r3, #1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f000 f938 	bl	8002010 <GPIO_voidSetPinValue>
 8001da0:	2014      	movs	r0, #20
 8001da2:	f7ff fd6f 	bl	8001884 <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	7818      	ldrb	r0, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	3305      	adds	r3, #5
 8001db4:	7819      	ldrb	r1, [r3, #0]
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f000 f926 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	3306      	adds	r3, #6
 8001dca:	7818      	ldrb	r0, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	3307      	adds	r3, #7
 8001dd2:	7819      	ldrb	r1, [r3, #0]
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	f000 f915 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	3308      	adds	r3, #8
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	3309      	adds	r3, #9
 8001df4:	7819      	ldrb	r1, [r3, #0]
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	f000 f904 	bl	8002010 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	330a      	adds	r3, #10
 8001e0e:	7818      	ldrb	r0, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	330b      	adds	r3, #11
 8001e16:	7819      	ldrb	r1, [r3, #0]
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	f000 f8f3 	bl	8002010 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	7818      	ldrb	r0, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	3303      	adds	r3, #3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f000 f8e7 	bl	8002010 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	7818      	ldrb	r0, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4619      	mov	r1, r3
 8001e54:	f000 f8dc 	bl	8002010 <GPIO_voidSetPinValue>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff fd13 	bl	8001884 <xDelay>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	7818      	ldrb	r0, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f000 f8ce 	bl	8002010 <GPIO_voidSetPinValue>
 8001e74:	2014      	movs	r0, #20
 8001e76:	f7ff fd05 	bl	8001884 <xDelay>

#endif
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	71bb      	strb	r3, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	717b      	strb	r3, [r7, #5]
    switch(Copy_u8Port)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d03e      	beq.n	8001f1a <GPIO_voidSetPinDirection+0x96>
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d075      	beq.n	8001f8c <GPIO_voidSetPinDirection+0x108>
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d000      	beq.n	8001ea6 <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 8001ea4:	e0a9      	b.n	8001ffa <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	d817      	bhi.n	8001edc <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	79ba      	ldrb	r2, [r7, #6]
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	43d2      	mvns	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4a51      	ldr	r2, [pc, #324]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	7979      	ldrb	r1, [r7, #5]
 8001eca:	79ba      	ldrb	r2, [r7, #6]
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6013      	str	r3, [r2, #0]
			break;
 8001eda:	e089      	b.n	8001ff0 <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f200 8086 	bhi.w	8001ff0 <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	79ba      	ldrb	r2, [r7, #6]
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	43d2      	mvns	r2, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	4a41      	ldr	r2, [pc, #260]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001efe:	400b      	ands	r3, r1
 8001f00:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8001f02:	4b40      	ldr	r3, [pc, #256]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	7979      	ldrb	r1, [r7, #5]
 8001f08:	79ba      	ldrb	r2, [r7, #6]
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4611      	mov	r1, r2
 8001f12:	4a3c      	ldr	r2, [pc, #240]	; (8002004 <GPIO_voidSetPinDirection+0x180>)
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6053      	str	r3, [r2, #4]
			break;
 8001f18:	e06a      	b.n	8001ff0 <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d817      	bhi.n	8001f50 <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	79ba      	ldrb	r2, [r7, #6]
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	210f      	movs	r1, #15
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	43d2      	mvns	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4a35      	ldr	r2, [pc, #212]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f34:	400b      	ands	r3, r1
 8001f36:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	7979      	ldrb	r1, [r7, #5]
 8001f3e:	79ba      	ldrb	r2, [r7, #6]
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	4611      	mov	r1, r2
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	6013      	str	r3, [r2, #0]
			break;
 8001f4e:	e051      	b.n	8001ff4 <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	d84e      	bhi.n	8001ff4 <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 8001f56:	79bb      	ldrb	r3, [r7, #6]
 8001f58:	3b08      	subs	r3, #8
 8001f5a:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	79ba      	ldrb	r2, [r7, #6]
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	210f      	movs	r1, #15
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	43d2      	mvns	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f70:	400b      	ands	r3, r1
 8001f72:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	7979      	ldrb	r1, [r7, #5]
 8001f7a:	79ba      	ldrb	r2, [r7, #6]
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	4a20      	ldr	r2, [pc, #128]	; (8002008 <GPIO_voidSetPinDirection+0x184>)
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6053      	str	r3, [r2, #4]
			break;
 8001f8a:	e033      	b.n	8001ff4 <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d810      	bhi.n	8001fb4 <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	7979      	ldrb	r1, [r7, #5]
 8001fa2:	79ba      	ldrb	r2, [r7, #6]
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4a17      	ldr	r2, [pc, #92]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	6013      	str	r3, [r2, #0]
			break;
 8001fb2:	e021      	b.n	8001ff8 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 8001fb4:	79bb      	ldrb	r3, [r7, #6]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	d81e      	bhi.n	8001ff8 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	3b08      	subs	r3, #8
 8001fbe:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	79ba      	ldrb	r2, [r7, #6]
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	210f      	movs	r1, #15
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	43d2      	mvns	r2, r2
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001fd4:	400b      	ands	r3, r1
 8001fd6:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	7979      	ldrb	r1, [r7, #5]
 8001fde:	79ba      	ldrb	r2, [r7, #6]
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <GPIO_voidSetPinDirection+0x188>)
 8001fea:	430b      	orrs	r3, r1
 8001fec:	6053      	str	r3, [r2, #4]
			break;
 8001fee:	e003      	b.n	8001ff8 <GPIO_voidSetPinDirection+0x174>
			break;
 8001ff0:	bf00      	nop
 8001ff2:	e002      	b.n	8001ffa <GPIO_voidSetPinDirection+0x176>
			break;
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <GPIO_voidSetPinDirection+0x176>
			break;
 8001ff8:	bf00      	nop
	}

}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000

08002010 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	460b      	mov	r3, r1
 800201c:	71bb      	strb	r3, [r7, #6]
 800201e:	4613      	mov	r3, r2
 8002020:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <GPIO_voidSetPinValue+0x48>
 8002028:	2b04      	cmp	r3, #4
 800202a:	d028      	beq.n	800207e <GPIO_voidSetPinValue+0x6e>
 800202c:	2b02      	cmp	r3, #2
 800202e:	d000      	beq.n	8002032 <GPIO_voidSetPinValue+0x22>
					break ; 
			}	
			break ;
		default :
		//error
			break ;
 8002030:	e038      	b.n	80020a4 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8002032:	797b      	ldrb	r3, [r7, #5]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <GPIO_voidSetPinValue+0x3a>
 8002038:	2b01      	cmp	r3, #1
 800203a:	d000      	beq.n	800203e <GPIO_voidSetPinValue+0x2e>
					break ; 
 800203c:	e00b      	b.n	8002056 <GPIO_voidSetPinValue+0x46>
					GPIOA->BSRR = (1 << Copy_Pin);
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <GPIO_voidSetPinValue+0xa0>)
 8002046:	611a      	str	r2, [r3, #16]
					break ;
 8002048:	e005      	b.n	8002056 <GPIO_voidSetPinValue+0x46>
					GPIOA->BRR = (1 << Copy_Pin);
 800204a:	79bb      	ldrb	r3, [r7, #6]
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <GPIO_voidSetPinValue+0xa0>)
 8002052:	615a      	str	r2, [r3, #20]
					break ;
 8002054:	bf00      	nop
			break ; 
 8002056:	e025      	b.n	80020a4 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <GPIO_voidSetPinValue+0x60>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d000      	beq.n	8002064 <GPIO_voidSetPinValue+0x54>
					break ; 
 8002062:	e00b      	b.n	800207c <GPIO_voidSetPinValue+0x6c>
					GPIOB->BSRR = (1 << Copy_Pin);
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	2201      	movs	r2, #1
 8002068:	409a      	lsls	r2, r3
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <GPIO_voidSetPinValue+0xa4>)
 800206c:	611a      	str	r2, [r3, #16]
					break ;
 800206e:	e005      	b.n	800207c <GPIO_voidSetPinValue+0x6c>
					GPIOB->BRR = (1 << Copy_Pin);
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	2201      	movs	r2, #1
 8002074:	409a      	lsls	r2, r3
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <GPIO_voidSetPinValue+0xa4>)
 8002078:	615a      	str	r2, [r3, #20]
					break ;
 800207a:	bf00      	nop
			break ;
 800207c:	e012      	b.n	80020a4 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 800207e:	797b      	ldrb	r3, [r7, #5]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <GPIO_voidSetPinValue+0x86>
 8002084:	2b01      	cmp	r3, #1
 8002086:	d000      	beq.n	800208a <GPIO_voidSetPinValue+0x7a>
					break ; 
 8002088:	e00b      	b.n	80020a2 <GPIO_voidSetPinValue+0x92>
					GPIOC->BSRR = (1 << Copy_Pin);
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	2201      	movs	r2, #1
 800208e:	409a      	lsls	r2, r3
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <GPIO_voidSetPinValue+0xa8>)
 8002092:	611a      	str	r2, [r3, #16]
					break ;
 8002094:	e005      	b.n	80020a2 <GPIO_voidSetPinValue+0x92>
					GPIOC->BRR = (1 << Copy_Pin);
 8002096:	79bb      	ldrb	r3, [r7, #6]
 8002098:	2201      	movs	r2, #1
 800209a:	409a      	lsls	r2, r3
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <GPIO_voidSetPinValue+0xa8>)
 800209e:	615a      	str	r2, [r3, #20]
					break ;
 80020a0:	bf00      	nop
			break ;
 80020a2:	bf00      	nop
	}

}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000

080020bc <GPIO_u8GetPinValue>:


}

u8 GPIO_u8GetPinValue (u8 Copy_u8Port, Pin_t Copy_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	4613      	mov	r3, r2
 80020ca:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pin > 15)
	{
		/* error */
	}
	switch(Copy_u8Port)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d00e      	beq.n	80020f4 <GPIO_u8GetPinValue+0x38>
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d016      	beq.n	8002108 <GPIO_u8GetPinValue+0x4c>
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d000      	beq.n	80020e0 <GPIO_u8GetPinValue+0x24>
		case PORTC :
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 80020de:	e01d      	b.n	800211c <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOA->IDR , Copy_Pin ) ;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <GPIO_u8GetPinValue+0x6c>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
			break ;
 80020f2:	e013      	b.n	800211c <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOB->IDR , Copy_Pin ) ;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <GPIO_u8GetPinValue+0x70>)
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
			break ;
 8002106:	e009      	b.n	800211c <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <GPIO_u8GetPinValue+0x74>)
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
			break ;
 800211a:	bf00      	nop
	}
	return LOC_u8Result ;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40011000 	.word	0x40011000

08002134 <GPIO_u8ChoosePullMode>:

void GPIO_u8ChoosePullMode(u8 Copy_u8Port, Pin_t Copy_Pin, GPIO_PULL_MODE_t Copy_Mode)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	460b      	mov	r3, r1
 8002140:	71bb      	strb	r3, [r7, #6]
 8002142:	4613      	mov	r3, r2
 8002144:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d022      	beq.n	8002192 <GPIO_u8ChoosePullMode+0x5e>
 800214c:	2b04      	cmp	r3, #4
 800214e:	d03e      	beq.n	80021ce <GPIO_u8ChoosePullMode+0x9a>
 8002150:	2b02      	cmp	r3, #2
 8002152:	d000      	beq.n	8002156 <GPIO_u8ChoosePullMode+0x22>
                case GPIO_PULL_UP   : SET_BIT(GPIOC->ODR, Copy_Pin);break;
                default : /*!<TODO: Error Code*/break;
            }			break ;
		default :
			/* error */
			break ;
 8002154:	e059      	b.n	800220a <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8002156:	797b      	ldrb	r3, [r7, #5]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <GPIO_u8ChoosePullMode+0x2e>
 800215c:	2b01      	cmp	r3, #1
 800215e:	d00c      	beq.n	800217a <GPIO_u8ChoosePullMode+0x46>
                default : /*!<TODO: Error Code*/break;
 8002160:	e016      	b.n	8002190 <GPIO_u8ChoosePullMode+0x5c>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOA->ODR, Copy_Pin);break;
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <GPIO_u8ChoosePullMode+0xe0>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	79ba      	ldrb	r2, [r7, #6]
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	43d2      	mvns	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4a28      	ldr	r2, [pc, #160]	; (8002214 <GPIO_u8ChoosePullMode+0xe0>)
 8002174:	400b      	ands	r3, r1
 8002176:	60d3      	str	r3, [r2, #12]
 8002178:	e00a      	b.n	8002190 <GPIO_u8ChoosePullMode+0x5c>
                case GPIO_PULL_UP   : SET_BIT(GPIOA->ODR, Copy_Pin);break;
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <GPIO_u8ChoosePullMode+0xe0>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	79ba      	ldrb	r2, [r7, #6]
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	4611      	mov	r1, r2
 8002188:	4a22      	ldr	r2, [pc, #136]	; (8002214 <GPIO_u8ChoosePullMode+0xe0>)
 800218a:	430b      	orrs	r3, r1
 800218c:	60d3      	str	r3, [r2, #12]
 800218e:	bf00      	nop
            }			break ;
 8002190:	e03b      	b.n	800220a <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8002192:	797b      	ldrb	r3, [r7, #5]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <GPIO_u8ChoosePullMode+0x6a>
 8002198:	2b01      	cmp	r3, #1
 800219a:	d00c      	beq.n	80021b6 <GPIO_u8ChoosePullMode+0x82>
                default : /*!<TODO: Error Code*/break;
 800219c:	e016      	b.n	80021cc <GPIO_u8ChoosePullMode+0x98>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOB->ODR, Copy_Pin);break;
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <GPIO_u8ChoosePullMode+0xe4>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	79ba      	ldrb	r2, [r7, #6]
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	43d2      	mvns	r2, r2
 80021ac:	4611      	mov	r1, r2
 80021ae:	4a1a      	ldr	r2, [pc, #104]	; (8002218 <GPIO_u8ChoosePullMode+0xe4>)
 80021b0:	400b      	ands	r3, r1
 80021b2:	60d3      	str	r3, [r2, #12]
 80021b4:	e00a      	b.n	80021cc <GPIO_u8ChoosePullMode+0x98>
                case GPIO_PULL_UP   : SET_BIT(GPIOB->ODR, Copy_Pin);break;
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <GPIO_u8ChoosePullMode+0xe4>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	79ba      	ldrb	r2, [r7, #6]
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4611      	mov	r1, r2
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <GPIO_u8ChoosePullMode+0xe4>)
 80021c6:	430b      	orrs	r3, r1
 80021c8:	60d3      	str	r3, [r2, #12]
 80021ca:	bf00      	nop
            }			break ;
 80021cc:	e01d      	b.n	800220a <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <GPIO_u8ChoosePullMode+0xa6>
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d00c      	beq.n	80021f2 <GPIO_u8ChoosePullMode+0xbe>
                default : /*!<TODO: Error Code*/break;
 80021d8:	e016      	b.n	8002208 <GPIO_u8ChoosePullMode+0xd4>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOC->ODR, Copy_Pin);break;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <GPIO_u8ChoosePullMode+0xe8>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	79ba      	ldrb	r2, [r7, #6]
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	43d2      	mvns	r2, r2
 80021e8:	4611      	mov	r1, r2
 80021ea:	4a0c      	ldr	r2, [pc, #48]	; (800221c <GPIO_u8ChoosePullMode+0xe8>)
 80021ec:	400b      	ands	r3, r1
 80021ee:	60d3      	str	r3, [r2, #12]
 80021f0:	e00a      	b.n	8002208 <GPIO_u8ChoosePullMode+0xd4>
                case GPIO_PULL_UP   : SET_BIT(GPIOC->ODR, Copy_Pin);break;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <GPIO_u8ChoosePullMode+0xe8>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	79ba      	ldrb	r2, [r7, #6]
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4611      	mov	r1, r2
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <GPIO_u8ChoosePullMode+0xe8>)
 8002202:	430b      	orrs	r3, r1
 8002204:	60d3      	str	r3, [r2, #12]
 8002206:	bf00      	nop
            }			break ;
 8002208:	bf00      	nop
	}

}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40010800 	.word	0x40010800
 8002218:	40010c00 	.word	0x40010c00
 800221c:	40011000 	.word	0x40011000

08002220 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8002230:	79bb      	ldrb	r3, [r7, #6]
 8002232:	2b1f      	cmp	r3, #31
 8002234:	d828      	bhi.n	8002288 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d00f      	beq.n	800225c <RCC_voidEnableClock+0x3c>
 800223c:	2b02      	cmp	r3, #2
 800223e:	d018      	beq.n	8002272 <RCC_voidEnableClock+0x52>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d000      	beq.n	8002246 <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8002244:	e020      	b.n	8002288 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <RCC_voidEnableClock+0x74>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	79ba      	ldrb	r2, [r7, #6]
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4611      	mov	r1, r2
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <RCC_voidEnableClock+0x74>)
 8002256:	430b      	orrs	r3, r1
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e015      	b.n	8002288 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <RCC_voidEnableClock+0x78>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	79ba      	ldrb	r2, [r7, #6]
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4611      	mov	r1, r2
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <RCC_voidEnableClock+0x78>)
 800226c:	430b      	orrs	r3, r1
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e00a      	b.n	8002288 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <RCC_voidEnableClock+0x7c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	79ba      	ldrb	r2, [r7, #6]
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4611      	mov	r1, r2
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <RCC_voidEnableClock+0x7c>)
 8002282:	430b      	orrs	r3, r1
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	bf00      	nop
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021014 	.word	0x40021014
 8002298:	4002101c 	.word	0x4002101c
 800229c:	40021018 	.word	0x40021018

080022a0 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
			   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
			#endif
			RCC_CFGR |= RCC_CFGR_PLLXTPRE_HSE_Div2;
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE
				#if   RCC_PLL_HSE == RCC_PLL_HSE_CRYSTAL
					SET_BIT(RCC_CR, RCC_CR_CSSON);
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022ba:	6013      	str	r3, [r2, #0]
					SET_BIT(RCC_CR, RCC_CR_HSEON);
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
 80022c8:	bf00      	nop
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0c5b      	lsrs	r3, r3, #17
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f8      	beq.n	80022ca <RCC_voidInitSysClocks+0x2a>
				   #warning("Wrong PLL input from HSE...Crystal is default")
				   SET_BIT(RCC_CR, RCC_CR_CSSON);
				   SET_BIT(RCC_CR, RCC_CR_HSEON);
				   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
				#endif
				RCC_CFGR |= RCC_CFGR_PLLSRC_HSE;
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
		#endif
			/***************************** SET MUX VAL	***********************************/
				RCC_CFGR |= RCC_PLL_MUL_VAL ;
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a10      	ldr	r2, [pc, #64]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC_CR, RCC_CR_PLLRDY)));
 80022f8:	bf00      	nop
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <RCC_voidInitSysClocks+0x94>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e5b      	lsrs	r3, r3, #25
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f8      	beq.n	80022fa <RCC_voidInitSysClocks+0x5a>
			RCC_CFGR |= RCC_CFGR_SW_PLL;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 800231e:	4a06      	ldr	r2, [pc, #24]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <RCC_voidInitSysClocks+0x98>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	40021004 	.word	0x40021004

0800233c <SPI1_IRQHandler>:
	}
}
/*************************************	IRQ	************************************************/

void SPI1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <SPI1_IRQHandler+0x54>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	793b      	ldrb	r3, [r7, #4]
 8002350:	f362 0300 	bfi	r3, r2, #0, #1
 8002354:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <SPI1_IRQHandler+0x54>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	793b      	ldrb	r3, [r7, #4]
 8002362:	f362 0341 	bfi	r3, r2, #1, #1
 8002366:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <SPI1_IRQHandler+0x54>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	793b      	ldrb	r3, [r7, #4]
 8002376:	f362 0382 	bfi	r3, r2, #2, #1
 800237a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[0]->P_IRQ_CallBack(irq_src);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SPI1_IRQHandler+0x58>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	7938      	ldrb	r0, [r7, #4]
 8002384:	4798      	blx	r3
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40013000 	.word	0x40013000
 8002394:	20000080 	.word	0x20000080

08002398 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <SPI2_IRQHandler+0x54>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	793b      	ldrb	r3, [r7, #4]
 80023ac:	f362 0300 	bfi	r3, r2, #0, #1
 80023b0:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <SPI2_IRQHandler+0x54>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	793b      	ldrb	r3, [r7, #4]
 80023be:	f362 0341 	bfi	r3, r2, #1, #1
 80023c2:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <SPI2_IRQHandler+0x54>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	793b      	ldrb	r3, [r7, #4]
 80023d2:	f362 0382 	bfi	r3, r2, #2, #1
 80023d6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[1]->P_IRQ_CallBack(irq_src);
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SPI2_IRQHandler+0x58>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	7938      	ldrb	r0, [r7, #4]
 80023e0:	4798      	blx	r3
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40013000 	.word	0x40013000
 80023f0:	20000080 	.word	0x20000080

080023f4 <USART_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void USART_voidInit(USART_Number_t  USART_Number , USART_Config * usrConfig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
	u16 LOC_u16CR1 = 0 ;
 8002400:	2300      	movs	r3, #0
 8002402:	82fb      	strh	r3, [r7, #22]
	u16 LOC_u16CR2 = 0 ;
 8002404:	2300      	movs	r3, #0
 8002406:	82bb      	strh	r3, [r7, #20]
	u16 LOC_u16CR3 = 0 ;
 8002408:	2300      	movs	r3, #0
 800240a:	827b      	strh	r3, [r7, #18]

/********************************************************* CR1 REG	****************************************************************/
	LOC_u16CR1 = (1<<13)								/*	Enable	*/
				|(usrConfig->USART_DataLength)			/*	Data Length	*/
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	891a      	ldrh	r2, [r3, #8]
				|(usrConfig->USART_Parity)				/*	 Parity control	*/
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	895b      	ldrh	r3, [r3, #10]
				|(usrConfig->USART_OperationMode)		/*	Tx,Rx or Tx and Rx*/
 8002414:	4313      	orrs	r3, r2
 8002416:	b29a      	uxth	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b29a      	uxth	r2, r3
				|(usrConfig->USART_IRQ_t) ;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	8adb      	ldrh	r3, [r3, #22]
 8002426:	4313      	orrs	r3, r2
 8002428:	b29b      	uxth	r3, r3
	LOC_u16CR1 = (1<<13)								/*	Enable	*/
 800242a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800242e:	82fb      	strh	r3, [r7, #22]
			LOC_u16CR1 |= (usrConfig->USART_IRQ_t[LOC_u8Counter]) ;
		}
	}
*/
/******************************************************* CR2 REG ********************************************************************/
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	899a      	ldrh	r2, [r3, #12]
				|(usrConfig->USART_IdleLevel)			/*	Clock polarity		*/
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	8a1b      	ldrh	r3, [r3, #16]
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8002438:	4313      	orrs	r3, r2
 800243a:	b29a      	uxth	r2, r3
				|(usrConfig->USART_DataSampling);		/*	Clock phase			*/
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	8a5b      	ldrh	r3, [r3, #18]
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8002440:	4313      	orrs	r3, r2
 8002442:	82bb      	strh	r3, [r7, #20]
/******************************************************* CR3 REG ********************************************************************/
	LOC_u16CR3 = (usrConfig->USART_DMA);			/*	DMA		*/
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7d1b      	ldrb	r3, [r3, #20]
 8002448:	827b      	strh	r3, [r7, #18]

/******************************************************* BuadRate ********************************************************************/
	Global_USART_Config[USART_Number] = usrConfig ;
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	4920      	ldr	r1, [pc, #128]	; (80024d0 <USART_voidInit+0xdc>)
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u32 BRR_Reg = 0 ;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
	USART_voidBuadRateCalc(usrConfig->USART_BuadRate , 8000000 , &BRR_Reg);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	491c      	ldr	r1, [pc, #112]	; (80024d4 <USART_voidInit+0xe0>)
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f9a6 	bl	80027b4 <USART_voidBuadRateCalc>


/******************************************************* Regs ********************************************************************/


	switch(USART_Number)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d011      	beq.n	8002492 <USART_voidInit+0x9e>
 800246e:	2b02      	cmp	r3, #2
 8002470:	d01c      	beq.n	80024ac <USART_voidInit+0xb8>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d000      	beq.n	8002478 <USART_voidInit+0x84>
	{
	case USART_1 : USART1->BRR =  BRR_Reg  ; USART1->CR1 = LOC_u16CR1 ;  USART1->CR2 = LOC_u16CR2 , USART1->CR3 = LOC_u16CR3 ; 	break ;
	case USART_2 : USART2->BRR =  BRR_Reg  ; USART2->CR1 = LOC_u16CR1 ;  USART2->CR2 = LOC_u16CR2 ; USART2->CR3 = LOC_u16CR3 ;   	break ;
	case USART_3 : USART3->BRR =  BRR_Reg  ; USART3->CR1 = LOC_u16CR1 ;  USART3->CR2 = LOC_u16CR2 ; USART3->CR3 = LOC_u16CR3 ; 	break ;
	default : break ;
 8002476:	e026      	b.n	80024c6 <USART_voidInit+0xd2>
	case USART_1 : USART1->BRR =  BRR_Reg  ; USART1->CR1 = LOC_u16CR1 ;  USART1->CR2 = LOC_u16CR2 , USART1->CR3 = LOC_u16CR3 ; 	break ;
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <USART_voidInit+0xe4>)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6093      	str	r3, [r2, #8]
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <USART_voidInit+0xe4>)
 8002480:	8afb      	ldrh	r3, [r7, #22]
 8002482:	60d3      	str	r3, [r2, #12]
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <USART_voidInit+0xe4>)
 8002486:	8abb      	ldrh	r3, [r7, #20]
 8002488:	6113      	str	r3, [r2, #16]
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <USART_voidInit+0xe4>)
 800248c:	8a7b      	ldrh	r3, [r7, #18]
 800248e:	6153      	str	r3, [r2, #20]
 8002490:	e019      	b.n	80024c6 <USART_voidInit+0xd2>
	case USART_2 : USART2->BRR =  BRR_Reg  ; USART2->CR1 = LOC_u16CR1 ;  USART2->CR2 = LOC_u16CR2 ; USART2->CR3 = LOC_u16CR3 ;   	break ;
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <USART_voidInit+0xe8>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6093      	str	r3, [r2, #8]
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <USART_voidInit+0xe8>)
 800249a:	8afb      	ldrh	r3, [r7, #22]
 800249c:	60d3      	str	r3, [r2, #12]
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <USART_voidInit+0xe8>)
 80024a0:	8abb      	ldrh	r3, [r7, #20]
 80024a2:	6113      	str	r3, [r2, #16]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <USART_voidInit+0xe8>)
 80024a6:	8a7b      	ldrh	r3, [r7, #18]
 80024a8:	6153      	str	r3, [r2, #20]
 80024aa:	e00c      	b.n	80024c6 <USART_voidInit+0xd2>
	case USART_3 : USART3->BRR =  BRR_Reg  ; USART3->CR1 = LOC_u16CR1 ;  USART3->CR2 = LOC_u16CR2 ; USART3->CR3 = LOC_u16CR3 ; 	break ;
 80024ac:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <USART_voidInit+0xec>)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6093      	str	r3, [r2, #8]
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <USART_voidInit+0xec>)
 80024b4:	8afb      	ldrh	r3, [r7, #22]
 80024b6:	60d3      	str	r3, [r2, #12]
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <USART_voidInit+0xec>)
 80024ba:	8abb      	ldrh	r3, [r7, #20]
 80024bc:	6113      	str	r3, [r2, #16]
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <USART_voidInit+0xec>)
 80024c0:	8a7b      	ldrh	r3, [r7, #18]
 80024c2:	6153      	str	r3, [r2, #20]
 80024c4:	bf00      	nop

	}
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000088 	.word	0x20000088
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	40013800 	.word	0x40013800
 80024dc:	40004400 	.word	0x40004400
 80024e0:	40004800 	.word	0x40004800

080024e4 <USART_voidSendDataSynch>:

void USART_voidSendDataSynch(USART_Number_t USART_Number , u16 *P_u16Data)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
	switch(USART_Number)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d019      	beq.n	800252a <USART_voidSendDataSynch+0x46>
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d02c      	beq.n	8002554 <USART_voidSendDataSynch+0x70>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <USART_voidSendDataSynch+0x1c>
		WAIT_TO_TXE(USART3)	;
		USART3->DR = *P_u16Data ;
		WAIT_TO_TXC(USART3);
		break ;
	default:
		break ;
 80024fe:	e03e      	b.n	800257e <USART_voidSendDataSynch+0x9a>
		WAIT_TO_TXE(USART1)	;
 8002500:	bf00      	nop
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <USART_voidSendDataSynch+0xa4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	09db      	lsrs	r3, r3, #7
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f8      	beq.n	8002502 <USART_voidSendDataSynch+0x1e>
		USART1->DR = *P_u16Data ;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <USART_voidSendDataSynch+0xa4>)
 8002516:	605a      	str	r2, [r3, #4]
		WAIT_TO_TXC(USART1);
 8002518:	bf00      	nop
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <USART_voidSendDataSynch+0xa4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f8      	beq.n	800251a <USART_voidSendDataSynch+0x36>
		break ;
 8002528:	e029      	b.n	800257e <USART_voidSendDataSynch+0x9a>
		WAIT_TO_TXE(USART2)	;
 800252a:	bf00      	nop
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <USART_voidSendDataSynch+0xa8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	09db      	lsrs	r3, r3, #7
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f8      	beq.n	800252c <USART_voidSendDataSynch+0x48>
		USART2->DR = *P_u16Data ;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	881a      	ldrh	r2, [r3, #0]
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <USART_voidSendDataSynch+0xa8>)
 8002540:	605a      	str	r2, [r3, #4]
		WAIT_TO_TXC(USART2);
 8002542:	bf00      	nop
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <USART_voidSendDataSynch+0xa8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f8      	beq.n	8002544 <USART_voidSendDataSynch+0x60>
		break ;
 8002552:	e014      	b.n	800257e <USART_voidSendDataSynch+0x9a>
		WAIT_TO_TXE(USART3)	;
 8002554:	bf00      	nop
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <USART_voidSendDataSynch+0xac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	09db      	lsrs	r3, r3, #7
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f8      	beq.n	8002556 <USART_voidSendDataSynch+0x72>
		USART3->DR = *P_u16Data ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <USART_voidSendDataSynch+0xac>)
 800256a:	605a      	str	r2, [r3, #4]
		WAIT_TO_TXC(USART3);
 800256c:	bf00      	nop
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <USART_voidSendDataSynch+0xac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f8      	beq.n	800256e <USART_voidSendDataSynch+0x8a>
		break ;
 800257c:	bf00      	nop
	}
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40013800 	.word	0x40013800
 800258c:	40004400 	.word	0x40004400
 8002590:	40004800 	.word	0x40004800

08002594 <USART_voidReceiveDataSynch>:
		break ;
	}
}

void USART_voidReceiveDataSynch(USART_Number_t USART_Number , u16 *P_u16Data)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]

	if(Global_USART_Config[USART_Number]->USART_DataLength == USART_9BIT)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4a80      	ldr	r2, [pc, #512]	; (80027a4 <USART_voidReceiveDataSynch+0x210>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	891b      	ldrh	r3, [r3, #8]
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d179      	bne.n	80026a4 <USART_voidReceiveDataSynch+0x110>
	{
		if(Global_USART_Config[USART_Number]->USART_Parity == USART_DISABLE_PARITY)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	4a7c      	ldr	r2, [pc, #496]	; (80027a4 <USART_voidReceiveDataSynch+0x210>)
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	895b      	ldrh	r3, [r3, #10]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d13a      	bne.n	8002634 <USART_voidReceiveDataSynch+0xa0>
		{
			// 9-BIT DATA
			switch(USART_Number)
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d015      	beq.n	80025f0 <USART_voidReceiveDataSynch+0x5c>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d024      	beq.n	8002612 <USART_voidReceiveDataSynch+0x7e>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d000      	beq.n	80025ce <USART_voidReceiveDataSynch+0x3a>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data = (USART3->DR) & 0x1FF  ;
				break ;
			default:
				break ;
 80025cc:	e0e4      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 80025ce:	bf00      	nop
 80025d0:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f8      	beq.n	80025d0 <USART_voidReceiveDataSynch+0x3c>
				*P_u16Data = (USART1->DR) & 0x1FF ;
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	801a      	strh	r2, [r3, #0]
				break ;
 80025ee:	e0d3      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 80025f0:	bf00      	nop
 80025f2:	4b6e      	ldr	r3, [pc, #440]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f8      	beq.n	80025f2 <USART_voidReceiveDataSynch+0x5e>
				*P_u16Data = (USART2->DR) & 0x1FF  ;
 8002600:	4b6a      	ldr	r3, [pc, #424]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	b29a      	uxth	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	801a      	strh	r2, [r3, #0]
				break ;
 8002610:	e0c2      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8002612:	bf00      	nop
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f8      	beq.n	8002614 <USART_voidReceiveDataSynch+0x80>
				*P_u16Data = (USART3->DR) & 0x1FF  ;
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262c:	b29a      	uxth	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	801a      	strh	r2, [r3, #0]
				break ;
 8002632:	e0b1      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>

		}
		else
		{
			// 9-bit is parity
			switch(USART_Number)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d014      	beq.n	8002664 <USART_voidReceiveDataSynch+0xd0>
 800263a:	2b02      	cmp	r3, #2
 800263c:	d022      	beq.n	8002684 <USART_voidReceiveDataSynch+0xf0>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d000      	beq.n	8002644 <USART_voidReceiveDataSynch+0xb0>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
				break ;
			default:
				break ;
 8002642:	e0a9      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 8002644:	bf00      	nop
 8002646:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f8      	beq.n	8002646 <USART_voidReceiveDataSynch+0xb2>
				*P_u16Data = (USART1->DR)& ((u8)0xFF) ;
 8002654:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	b29b      	uxth	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	b29a      	uxth	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	801a      	strh	r2, [r3, #0]
				break ;
 8002662:	e099      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 8002664:	bf00      	nop
 8002666:	4b51      	ldr	r3, [pc, #324]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f8      	beq.n	8002666 <USART_voidReceiveDataSynch+0xd2>
				*P_u16Data = (USART2->DR) &((u8)0xFF) ;
 8002674:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	b29b      	uxth	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	b29a      	uxth	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	801a      	strh	r2, [r3, #0]
				break ;
 8002682:	e089      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8002684:	bf00      	nop
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f8      	beq.n	8002686 <USART_voidReceiveDataSynch+0xf2>
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	b29b      	uxth	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	801a      	strh	r2, [r3, #0]
				break ;
 80026a2:	e079      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
			}
		}
	}
	else
	{
		if(Global_USART_Config[USART_Number]->USART_Parity == USART_DISABLE_PARITY)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4a3f      	ldr	r2, [pc, #252]	; (80027a4 <USART_voidReceiveDataSynch+0x210>)
 80026a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ac:	895b      	ldrh	r3, [r3, #10]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d137      	bne.n	8002722 <USART_voidReceiveDataSynch+0x18e>
		{
			switch(USART_Number)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d014      	beq.n	80026e2 <USART_voidReceiveDataSynch+0x14e>
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d022      	beq.n	8002702 <USART_voidReceiveDataSynch+0x16e>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d000      	beq.n	80026c2 <USART_voidReceiveDataSynch+0x12e>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
				break ;
			default:
				break ;
 80026c0:	e06a      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 80026c2:	bf00      	nop
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f8      	beq.n	80026c4 <USART_voidReceiveDataSynch+0x130>
				*P_u16Data = (USART1->DR)& ((u8)0xFF) ;
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	b29a      	uxth	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	801a      	strh	r2, [r3, #0]
				break ;
 80026e0:	e05a      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 80026e2:	bf00      	nop
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f8      	beq.n	80026e4 <USART_voidReceiveDataSynch+0x150>
				*P_u16Data = (USART2->DR) &((u8)0xFF) ;
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	801a      	strh	r2, [r3, #0]
				break ;
 8002700:	e04a      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8002702:	bf00      	nop
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f8      	beq.n	8002704 <USART_voidReceiveDataSynch+0x170>
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	b29b      	uxth	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	801a      	strh	r2, [r3, #0]
				break ;
 8002720:	e03a      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
			}
		}
		else
		{
			// 8-bit is parity
			switch(USART_Number)
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d015      	beq.n	8002754 <USART_voidReceiveDataSynch+0x1c0>
 8002728:	2b02      	cmp	r3, #2
 800272a:	d024      	beq.n	8002776 <USART_voidReceiveDataSynch+0x1e2>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d000      	beq.n	8002732 <USART_voidReceiveDataSynch+0x19e>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data =( USART3->DR)& ((u8)0x7F) ;
				break ;
			default:
				break ;
 8002730:	e032      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 8002732:	bf00      	nop
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f8      	beq.n	8002734 <USART_voidReceiveDataSynch+0x1a0>
				*P_u16Data = (USART1->DR)& ((u8)0x7F) ;
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <USART_voidReceiveDataSynch+0x214>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274c:	b29a      	uxth	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	801a      	strh	r2, [r3, #0]
				break ;
 8002752:	e021      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 8002754:	bf00      	nop
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f8      	beq.n	8002756 <USART_voidReceiveDataSynch+0x1c2>
				*P_u16Data = (USART2->DR) &((u8)0x7F) ;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <USART_voidReceiveDataSynch+0x218>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276e:	b29a      	uxth	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	801a      	strh	r2, [r3, #0]
				break ;
 8002774:	e010      	b.n	8002798 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8002776:	bf00      	nop
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f8      	beq.n	8002778 <USART_voidReceiveDataSynch+0x1e4>
				*P_u16Data =( USART3->DR)& ((u8)0x7F) ;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <USART_voidReceiveDataSynch+0x21c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002790:	b29a      	uxth	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	801a      	strh	r2, [r3, #0]
				break ;
 8002796:	bf00      	nop
			}
		}
	}
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000088 	.word	0x20000088
 80027a8:	40013800 	.word	0x40013800
 80027ac:	40004400 	.word	0x40004400
 80027b0:	40004800 	.word	0x40004800

080027b4 <USART_voidBuadRateCalc>:

}


void USART_voidBuadRateCalc(u32 BuadRate , u32 PClock , u32 *BRR_Reg)
{
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]

	

	u32 USARTDEV = ((PClock)/(16*BuadRate)) ;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	623b      	str	r3, [r7, #32]
	u32 USARTDEV_Mull_100 = ((25.0 * PClock)/(4.0*BuadRate)) ;
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	f7fd fe11 	bl	80003f4 <__aeabi_ui2d>
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <USART_voidBuadRateCalc+0xac>)
 80027d8:	f7fd fe86 	bl	80004e8 <__aeabi_dmul>
 80027dc:	4603      	mov	r3, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	4625      	mov	r5, r4
 80027e2:	461c      	mov	r4, r3
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7fd fe05 	bl	80003f4 <__aeabi_ui2d>
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <USART_voidBuadRateCalc+0xb0>)
 80027f0:	f7fd fe7a 	bl	80004e8 <__aeabi_dmul>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4620      	mov	r0, r4
 80027fa:	4629      	mov	r1, r5
 80027fc:	f7fd ff9e 	bl	800073c <__aeabi_ddiv>
 8002800:	4603      	mov	r3, r0
 8002802:	460c      	mov	r4, r1
 8002804:	4618      	mov	r0, r3
 8002806:	4621      	mov	r1, r4
 8002808:	f7fe f880 	bl	800090c <__aeabi_d2uiz>
 800280c:	4603      	mov	r3, r0
 800280e:	61fb      	str	r3, [r7, #28]
	u32 Mantiessa_Mull_100 = USARTDEV * 100  ;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2264      	movs	r2, #100	; 0x64
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	61bb      	str	r3, [r7, #24]
	u32 Mantiessa = USARTDEV ;
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
	u32 Fraction = ((USARTDEV_Mull_100 - Mantiessa_Mull_100)*16) /100 ;
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <USART_voidBuadRateCalc+0xb4>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	617b      	str	r3, [r7, #20]

	/*u32 Mantiessa = ((PClock)/(16*BuadRate)) ;
	u32 Fraction  = ((((1.0*PClock)/(16.0*BuadRate)) * 100) - (Mantiessa * 100)) * 16 ;
	*/
	if(Fraction > 16)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d902      	bls.n	800283c <USART_voidBuadRateCalc+0x88>
	{
		Mantiessa = Mantiessa+1 ;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*BRR_Reg = (u16) ((Mantiessa<<4) | (Fraction & 0x0F)) ;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	b29b      	uxth	r3, r3
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	b29a      	uxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b29b      	uxth	r3, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	601a      	str	r2, [r3, #0]

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bdb0      	pop	{r4, r5, r7, pc}
 8002860:	40390000 	.word	0x40390000
 8002864:	40100000 	.word	0x40100000
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <USART__VoidGPIO_SetPins>:
void USART__VoidGPIO_SetPins(USART_Number_t USART_Number)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]

	if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4a7a      	ldr	r2, [pc, #488]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b08      	cmp	r3, #8
		// Trancieve


	}

	if(USART_Number == USART_1)
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d14c      	bne.n	8002922 <USART__VoidGPIO_SetPins+0xb6>
	{
		//PA9 TX	--> OUTPUT_AF_PP
		//PA10 RX	--> _AF_INPUT
		//PA11 CTS	-->	INPUT_FLO
		//PA12 RTS	--> OUTPUT_AF_PP
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d105      	bne.n	80028a2 <USART__VoidGPIO_SetPins+0x36>
		{
			GPIO_voidSetPinDirection(PORTA, PIN9, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8002896:	2209      	movs	r2, #9
 8002898:	2109      	movs	r1, #9
 800289a:	2002      	movs	r0, #2
 800289c:	f7ff faf2 	bl	8001e84 <GPIO_voidSetPinDirection>
 80028a0:	e016      	b.n	80028d0 <USART__VoidGPIO_SetPins+0x64>


		}
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	4a6f      	ldr	r2, [pc, #444]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d105      	bne.n	80028bc <USART__VoidGPIO_SetPins+0x50>
		{
			GPIO_voidSetPinDirection(PORTA, PIN10, GPIO_INPUT_FLOATING);
 80028b0:	2204      	movs	r2, #4
 80028b2:	210a      	movs	r1, #10
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7ff fae5 	bl	8001e84 <GPIO_voidSetPinDirection>
 80028ba:	e009      	b.n	80028d0 <USART__VoidGPIO_SetPins+0x64>

		}
		else
		{
			// Trancieve
			GPIO_voidSetPinDirection(PORTA, PIN10, GPIO_INPUT_FLOATING);
 80028bc:	2204      	movs	r2, #4
 80028be:	210a      	movs	r1, #10
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7ff fadf 	bl	8001e84 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN9, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80028c6:	2209      	movs	r2, #9
 80028c8:	2109      	movs	r1, #9
 80028ca:	2002      	movs	r0, #2
 80028cc:	f7ff fada 	bl	8001e84 <GPIO_voidSetPinDirection>

		}

		if(Global_USART_Config[0]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_RTS)
 80028d0:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	89db      	ldrh	r3, [r3, #14]
 80028d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028da:	d105      	bne.n	80028e8 <USART__VoidGPIO_SetPins+0x7c>
		{
			GPIO_voidSetPinDirection(PORTA, PIN12 ,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80028dc:	2209      	movs	r2, #9
 80028de:	210c      	movs	r1, #12
 80028e0:	2002      	movs	r0, #2
 80028e2:	f7ff facf 	bl	8001e84 <GPIO_voidSetPinDirection>
		// <TODO> EROOR
	}



}
 80028e6:	e0b9      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		else if (Global_USART_Config[0]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_CTS)
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	89db      	ldrh	r3, [r3, #14]
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	d105      	bne.n	8002900 <USART__VoidGPIO_SetPins+0x94>
			GPIO_voidSetPinDirection(PORTA, PIN11, GPIO_INPUT_FLOATING);
 80028f4:	2204      	movs	r2, #4
 80028f6:	210b      	movs	r1, #11
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7ff fac3 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 80028fe:	e0ad      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		else if(Global_USART_Config[0]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_DISALBED)
 8002900:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	89db      	ldrh	r3, [r3, #14]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80a8 	beq.w	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
			GPIO_voidSetPinDirection(PORTA, PIN11, GPIO_INPUT_FLOATING);
 800290c:	2204      	movs	r2, #4
 800290e:	210b      	movs	r1, #11
 8002910:	2002      	movs	r0, #2
 8002912:	f7ff fab7 	bl	8001e84 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN12 ,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8002916:	2209      	movs	r2, #9
 8002918:	210c      	movs	r1, #12
 800291a:	2002      	movs	r0, #2
 800291c:	f7ff fab2 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 8002920:	e09c      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
	else if(USART_Number == USART_2)
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d14b      	bne.n	80029c0 <USART__VoidGPIO_SetPins+0x154>
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b08      	cmp	r3, #8
 8002934:	d105      	bne.n	8002942 <USART__VoidGPIO_SetPins+0xd6>
			GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8002936:	2209      	movs	r2, #9
 8002938:	2102      	movs	r1, #2
 800293a:	2002      	movs	r0, #2
 800293c:	f7ff faa2 	bl	8001e84 <GPIO_voidSetPinDirection>
 8002940:	e016      	b.n	8002970 <USART__VoidGPIO_SetPins+0x104>
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	4a47      	ldr	r2, [pc, #284]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d105      	bne.n	800295c <USART__VoidGPIO_SetPins+0xf0>
			GPIO_voidSetPinDirection(PORTA, PIN13, GPIO_INPUT_FLOATING);
 8002950:	2204      	movs	r2, #4
 8002952:	210d      	movs	r1, #13
 8002954:	2002      	movs	r0, #2
 8002956:	f7ff fa95 	bl	8001e84 <GPIO_voidSetPinDirection>
 800295a:	e009      	b.n	8002970 <USART__VoidGPIO_SetPins+0x104>
			GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800295c:	2209      	movs	r2, #9
 800295e:	2102      	movs	r1, #2
 8002960:	2002      	movs	r0, #2
 8002962:	f7ff fa8f 	bl	8001e84 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN13, GPIO_INPUT_FLOATING);
 8002966:	2204      	movs	r2, #4
 8002968:	210d      	movs	r1, #13
 800296a:	2002      	movs	r0, #2
 800296c:	f7ff fa8a 	bl	8001e84 <GPIO_voidSetPinDirection>
		if(Global_USART_Config[1]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_RTS)
 8002970:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	89db      	ldrh	r3, [r3, #14]
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d105      	bne.n	8002988 <USART__VoidGPIO_SetPins+0x11c>
			GPIO_voidSetPinDirection(PORTA, PIN1,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800297c:	2209      	movs	r2, #9
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f7ff fa7f 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 8002986:	e069      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		else if (Global_USART_Config[1]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_CTS)
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	89db      	ldrh	r3, [r3, #14]
 800298e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002992:	d105      	bne.n	80029a0 <USART__VoidGPIO_SetPins+0x134>
			GPIO_voidSetPinDirection(PORTA, PIN0, GPIO_INPUT_FLOATING);
 8002994:	2204      	movs	r2, #4
 8002996:	2100      	movs	r1, #0
 8002998:	2002      	movs	r0, #2
 800299a:	f7ff fa73 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 800299e:	e05d      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		else if(Global_USART_Config[1]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_DISALBED)
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	89db      	ldrh	r3, [r3, #14]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d058      	beq.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
			GPIO_voidSetPinDirection(PORTA, PIN0, GPIO_INPUT_FLOATING);
 80029aa:	2204      	movs	r2, #4
 80029ac:	2100      	movs	r1, #0
 80029ae:	2002      	movs	r0, #2
 80029b0:	f7ff fa68 	bl	8001e84 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN1,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80029b4:	2209      	movs	r2, #9
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7ff fa63 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 80029be:	e04d      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
	else if (USART_Number == USART_3)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d14a      	bne.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d105      	bne.n	80029e0 <USART__VoidGPIO_SetPins+0x174>
			GPIO_voidSetPinDirection(PORTB, PIN10, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80029d4:	2209      	movs	r2, #9
 80029d6:	210a      	movs	r1, #10
 80029d8:	2003      	movs	r0, #3
 80029da:	f7ff fa53 	bl	8001e84 <GPIO_voidSetPinDirection>
 80029de:	e016      	b.n	8002a0e <USART__VoidGPIO_SetPins+0x1a2>
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d105      	bne.n	80029fa <USART__VoidGPIO_SetPins+0x18e>
			GPIO_voidSetPinDirection(PORTB, PIN11, GPIO_INPUT_FLOATING);
 80029ee:	2204      	movs	r2, #4
 80029f0:	210b      	movs	r1, #11
 80029f2:	2003      	movs	r0, #3
 80029f4:	f7ff fa46 	bl	8001e84 <GPIO_voidSetPinDirection>
 80029f8:	e009      	b.n	8002a0e <USART__VoidGPIO_SetPins+0x1a2>
			GPIO_voidSetPinDirection(PORTB, PIN10, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80029fa:	2209      	movs	r2, #9
 80029fc:	210a      	movs	r1, #10
 80029fe:	2003      	movs	r0, #3
 8002a00:	f7ff fa40 	bl	8001e84 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTB, PIN11, GPIO_INPUT_FLOATING);
 8002a04:	2204      	movs	r2, #4
 8002a06:	210b      	movs	r1, #11
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f7ff fa3b 	bl	8001e84 <GPIO_voidSetPinDirection>
		if(Global_USART_Config[2]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_RTS)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	89db      	ldrh	r3, [r3, #14]
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d105      	bne.n	8002a26 <USART__VoidGPIO_SetPins+0x1ba>
			GPIO_voidSetPinDirection(PORTB, PIN14,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8002a1a:	2209      	movs	r2, #9
 8002a1c:	210e      	movs	r1, #14
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f7ff fa30 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 8002a24:	e01a      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		else if (Global_USART_Config[2]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_CTS)
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	89db      	ldrh	r3, [r3, #14]
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a30:	d105      	bne.n	8002a3e <USART__VoidGPIO_SetPins+0x1d2>
			GPIO_voidSetPinDirection(PORTB, PIN13, GPIO_INPUT_FLOATING);
 8002a32:	2204      	movs	r2, #4
 8002a34:	210d      	movs	r1, #13
 8002a36:	2003      	movs	r0, #3
 8002a38:	f7ff fa24 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 8002a3c:	e00e      	b.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
		else if(Global_USART_Config[2]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_DISALBED)
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <USART__VoidGPIO_SetPins+0x1f8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	89db      	ldrh	r3, [r3, #14]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <USART__VoidGPIO_SetPins+0x1f0>
			GPIO_voidSetPinDirection(PORTB, PIN14,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8002a48:	2209      	movs	r2, #9
 8002a4a:	210e      	movs	r1, #14
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	f7ff fa19 	bl	8001e84 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTB, PIN13, GPIO_INPUT_FLOATING);
 8002a52:	2204      	movs	r2, #4
 8002a54:	210d      	movs	r1, #13
 8002a56:	2003      	movs	r0, #3
 8002a58:	f7ff fa14 	bl	8001e84 <GPIO_voidSetPinDirection>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000088 	.word	0x20000088

08002a68 <USART1_IRQHandler>:
/************************************* ISR		*********************************************/
void USART1_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
			Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <USART1_IRQHandler+0x30>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <USART1_IRQHandler+0x34>)
 8002a74:	6852      	ldr	r2, [r2, #4]
 8002a76:	b292      	uxth	r2, r2
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4798      	blx	r3
	//	Clear Fflags
	 USART1->SR &=~ (1<<6) ; // TXC
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <USART1_IRQHandler+0x34>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <USART1_IRQHandler+0x34>)
 8002a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a86:	6013      	str	r3, [r2, #0]
	 USART1->SR &=~  (1<<5) ; // RXNE
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <USART1_IRQHandler+0x34>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <USART1_IRQHandler+0x34>)
 8002a8e:	f023 0320 	bic.w	r3, r3, #32
 8002a92:	6013      	str	r3, [r2, #0]

}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000088 	.word	0x20000088
 8002a9c:	40013800 	.word	0x40013800

08002aa0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
			Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR);
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <USART2_IRQHandler+0x30>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <USART2_IRQHandler+0x34>)
 8002aac:	6852      	ldr	r2, [r2, #4]
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4798      	blx	r3
	//Flags
	 USART2->SR &=~  (1<<6) ; // TXC
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <USART2_IRQHandler+0x34>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <USART2_IRQHandler+0x34>)
 8002aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abe:	6013      	str	r3, [r2, #0]
	 USART2->SR &=~ (1<<5) ; // RXNE
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <USART2_IRQHandler+0x34>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <USART2_IRQHandler+0x34>)
 8002ac6:	f023 0320 	bic.w	r3, r3, #32
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000088 	.word	0x20000088
 8002ad4:	40004400 	.word	0x40004400

08002ad8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
			Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
*/
	Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR);
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <USART3_IRQHandler+0x30>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <USART3_IRQHandler+0x34>)
 8002ae4:	6852      	ldr	r2, [r2, #4]
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4798      	blx	r3
	//Flags
	 USART3->SR &=~  (1<<6) ; // TXC
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <USART3_IRQHandler+0x38>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <USART3_IRQHandler+0x38>)
 8002af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af6:	6013      	str	r3, [r2, #0]
	 USART3->SR&=~  (1<<5) ; // RXNE
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <USART3_IRQHandler+0x38>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <USART3_IRQHandler+0x38>)
 8002afe:	f023 0320 	bic.w	r3, r3, #32
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000088 	.word	0x20000088
 8002b0c:	40004400 	.word	0x40004400
 8002b10:	40004800 	.word	0x40004800

08002b14 <USART_voidSendStringWithDelimiterSynch>:
	{
		USART_voidSendDataSynch(USART_Number, (u16*)&P_u8Data[LOC_u16Counter]);
	}
}
void USART_voidSendStringWithDelimiterSynch(USART_Number_t USART_Number , u8 *P_u8Data , u8 copy_u16Delimiter )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71bb      	strb	r3, [r7, #6]
	u32 LOC_u16Counter = 0 ;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
	while (P_u8Data[LOC_u16Counter] != copy_u16Delimiter)
 8002b28:	e00a      	b.n	8002b40 <USART_voidSendStringWithDelimiterSynch+0x2c>
	{
		USART_voidSendDataSynch(USART_Number, (u16*)&P_u8Data[LOC_u16Counter]);
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	441a      	add	r2, r3
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fcd5 	bl	80024e4 <USART_voidSendDataSynch>
		LOC_u16Counter++ ;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
	while (P_u8Data[LOC_u16Counter] != copy_u16Delimiter)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	79ba      	ldrb	r2, [r7, #6]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d1ed      	bne.n	8002b2a <USART_voidSendStringWithDelimiterSynch+0x16>
	}
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <main>:

#include "APP/APP.h"

int main(void){
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0




	ECU3_Dashboard_APP_SETUP();
 8002b5a:	f7fe fd03 	bl	8001564 <ECU3_Dashboard_APP_SETUP>
	while(1)
	{
		ECU3_Dashboard_APP_LOOP();
 8002b5e:	f7fe fd1b 	bl	8001598 <ECU3_Dashboard_APP_LOOP>
 8002b62:	e7fc      	b.n	8002b5e <main+0x8>

08002b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b66:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b6e:	490d      	ldr	r1, [pc, #52]	; (8002ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <LoopForever+0xe>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b74:	e002      	b.n	8002b7c <LoopCopyDataInit>

08002b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7a:	3304      	adds	r3, #4

08002b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b80:	d3f9      	bcc.n	8002b76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b84:	4c0a      	ldr	r4, [pc, #40]	; (8002bb0 <LoopForever+0x16>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b88:	e001      	b.n	8002b8e <LoopFillZerobss>

08002b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b8c:	3204      	adds	r2, #4

08002b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b90:	d3fb      	bcc.n	8002b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b92:	f000 f811 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b96:	f7ff ffde 	bl	8002b56 <main>

08002b9a <LoopForever>:

LoopForever:
    b LoopForever
 8002b9a:	e7fe      	b.n	8002b9a <LoopForever>
  ldr   r0, =_estack
 8002b9c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8002ba8:	080030a8 	.word	0x080030a8
  ldr r2, =_sbss
 8002bac:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8002bb0:	20000118 	.word	0x20000118

08002bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC1_2_IRQHandler>
	...

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2500      	movs	r5, #0
 8002bbc:	4e0c      	ldr	r6, [pc, #48]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1ba4      	subs	r4, r4, r6
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a5      	cmp	r5, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	f000 f872 	bl	8002cb0 <_init>
 8002bcc:	2500      	movs	r5, #0
 8002bce:	4e0a      	ldr	r6, [pc, #40]	; (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1ba4      	subs	r4, r4, r6
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a5      	cmp	r5, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be0:	4798      	blx	r3
 8002be2:	3501      	adds	r5, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bea:	4798      	blx	r3
 8002bec:	3501      	adds	r5, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	080030a0 	.word	0x080030a0
 8002bf4:	080030a0 	.word	0x080030a0
 8002bf8:	080030a0 	.word	0x080030a0
 8002bfc:	080030a4 	.word	0x080030a4

08002c00 <__itoa>:
 8002c00:	1e93      	subs	r3, r2, #2
 8002c02:	2b22      	cmp	r3, #34	; 0x22
 8002c04:	b510      	push	{r4, lr}
 8002c06:	460c      	mov	r4, r1
 8002c08:	d904      	bls.n	8002c14 <__itoa+0x14>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	700b      	strb	r3, [r1, #0]
 8002c10:	4620      	mov	r0, r4
 8002c12:	bd10      	pop	{r4, pc}
 8002c14:	2a0a      	cmp	r2, #10
 8002c16:	d109      	bne.n	8002c2c <__itoa+0x2c>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	da07      	bge.n	8002c2c <__itoa+0x2c>
 8002c1c:	232d      	movs	r3, #45	; 0x2d
 8002c1e:	700b      	strb	r3, [r1, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4240      	negs	r0, r0
 8002c24:	4421      	add	r1, r4
 8002c26:	f000 f805 	bl	8002c34 <__utoa>
 8002c2a:	e7f1      	b.n	8002c10 <__itoa+0x10>
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	e7f9      	b.n	8002c24 <__itoa+0x24>

08002c30 <itoa>:
 8002c30:	f7ff bfe6 	b.w	8002c00 <__itoa>

08002c34 <__utoa>:
 8002c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c36:	b08b      	sub	sp, #44	; 0x2c
 8002c38:	4605      	mov	r5, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	466e      	mov	r6, sp
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <__utoa+0x78>)
 8002c40:	f103 0c20 	add.w	ip, r3, #32
 8002c44:	4637      	mov	r7, r6
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	c703      	stmia	r7!, {r0, r1}
 8002c4e:	4563      	cmp	r3, ip
 8002c50:	463e      	mov	r6, r7
 8002c52:	d1f7      	bne.n	8002c44 <__utoa+0x10>
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	791b      	ldrb	r3, [r3, #4]
 8002c58:	6038      	str	r0, [r7, #0]
 8002c5a:	713b      	strb	r3, [r7, #4]
 8002c5c:	1e93      	subs	r3, r2, #2
 8002c5e:	2b22      	cmp	r3, #34	; 0x22
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	d904      	bls.n	8002c70 <__utoa+0x3c>
 8002c66:	7023      	strb	r3, [r4, #0]
 8002c68:	461c      	mov	r4, r3
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	b00b      	add	sp, #44	; 0x2c
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	1e66      	subs	r6, r4, #1
 8002c72:	fbb5 f0f2 	udiv	r0, r5, r2
 8002c76:	fb02 5510 	mls	r5, r2, r0, r5
 8002c7a:	af0a      	add	r7, sp, #40	; 0x28
 8002c7c:	443d      	add	r5, r7
 8002c7e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	f806 5f01 	strb.w	r5, [r6, #1]!
 8002c88:	4605      	mov	r5, r0
 8002c8a:	b968      	cbnz	r0, 8002ca8 <__utoa+0x74>
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	5460      	strb	r0, [r4, r1]
 8002c90:	4423      	add	r3, r4
 8002c92:	1b19      	subs	r1, r3, r4
 8002c94:	1b10      	subs	r0, r2, r4
 8002c96:	4281      	cmp	r1, r0
 8002c98:	dde7      	ble.n	8002c6a <__utoa+0x36>
 8002c9a:	7811      	ldrb	r1, [r2, #0]
 8002c9c:	7818      	ldrb	r0, [r3, #0]
 8002c9e:	f802 0b01 	strb.w	r0, [r2], #1
 8002ca2:	f803 1901 	strb.w	r1, [r3], #-1
 8002ca6:	e7f4      	b.n	8002c92 <__utoa+0x5e>
 8002ca8:	460b      	mov	r3, r1
 8002caa:	e7e2      	b.n	8002c72 <__utoa+0x3e>
 8002cac:	0800307a 	.word	0x0800307a

08002cb0 <_init>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr

08002cbc <_fini>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr
