
ECU2_Dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000f08  08000f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f10  08000f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f10  08000f10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f10  08000f10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f14  08000f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  2000000c  08000f24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000f24  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001451  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000699  00000000  00000000  00021486  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b18  00000000  00000000  00021b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00022638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  000227e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000006b1  00000000  00000000  00022940  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d1b  00000000  00000000  00022ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000051c9  00000000  00000000  00023d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028ed5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  00028f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ef0 	.word	0x08000ef0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000ef0 	.word	0x08000ef0

08000170 <xDelay>:
#define WAIT_MS(x) xDelay(x)



static void xDelay(u32 time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00c      	b.n	8000198 <xDelay+0x28>
		for(j = 1000;j > 0;j--);
 800017e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	e002      	b.n	800018c <xDelay+0x1c>
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	3b01      	subs	r3, #1
 800018a:	60bb      	str	r3, [r7, #8]
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d1f9      	bne.n	8000186 <xDelay+0x16>
	for(i = time;i > 0;i--)
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3b01      	subs	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d1ef      	bne.n	800017e <xDelay+0xe>

}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_voidInit>:
* Function Definitions
*******************************************************************************/


void LCD_voidInit(LCD_Config* ptr_cfg)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
		
        /********************************** END OF INITILIZATION *****************************************************/      
	#elif LCD_Mode == _4_WIRE_MODE
        // Init D3 --> D7 
        GPIO_voidSetPinDirection(_4_D4_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB4
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	3304      	adds	r3, #4
 80001b6:	7818      	ldrb	r0, [r3, #0]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	3305      	adds	r3, #5
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2202      	movs	r2, #2
 80001c2:	4619      	mov	r1, r3
 80001c4:	f000 fa2e 	bl	8000624 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D5_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB5
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	3306      	adds	r3, #6
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	3307      	adds	r3, #7
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2202      	movs	r2, #2
 80001da:	4619      	mov	r1, r3
 80001dc:	f000 fa22 	bl	8000624 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D6_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB6
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	3308      	adds	r3, #8
 80001e6:	7818      	ldrb	r0, [r3, #0]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	3309      	adds	r3, #9
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2202      	movs	r2, #2
 80001f2:	4619      	mov	r1, r3
 80001f4:	f000 fa16 	bl	8000624 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D7_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB7
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	330a      	adds	r3, #10
 80001fe:	7818      	ldrb	r0, [r3, #0]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	330b      	adds	r3, #11
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2202      	movs	r2, #2
 800020a:	4619      	mov	r1, r3
 800020c:	f000 fa0a 	bl	8000624 <GPIO_voidSetPinDirection>
		 
        GPIO_voidSetPinDirection(RS_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //RS
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	3302      	adds	r3, #2
 8000216:	7818      	ldrb	r0, [r3, #0]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	3303      	adds	r3, #3
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2202      	movs	r2, #2
 8000222:	4619      	mov	r1, r3
 8000224:	f000 f9fe 	bl	8000624 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(EN_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //EN
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	7818      	ldrb	r0, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	3301      	adds	r3, #1
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2202      	movs	r2, #2
 8000238:	4619      	mov	r1, r3
 800023a:	f000 f9f3 	bl	8000624 <GPIO_voidSetPinDirection>
		
		LCD_voidWriteCmd(ptr_cfg , LCD_RETURN_HOME) ;
 800023e:	2102      	movs	r1, #2
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 f911 	bl	8000468 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_FUNCTION_4BIT_2LINES) ;
 8000246:	2128      	movs	r1, #40	; 0x28
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 f90d 	bl	8000468 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_CLEAR_SCREEN) ;
 800024e:	2101      	movs	r1, #1
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 f909 	bl	8000468 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_DISP_ON_CURSOR_BLINK) ;
 8000256:	210f      	movs	r1, #15
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f000 f905 	bl	8000468 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 f901 	bl	8000468 <LCD_voidWriteCmd>
		/********************************** END OF INITILIZATION *****************************************************/    
	#endif
	WAIT_MS(2);
 8000266:	2002      	movs	r0, #2
 8000268:	f7ff ff82 	bl	8000170 <xDelay>
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_voidSendChar>:
void LCD_voidSendChar(LCD_Config* ptrCnfg , u8 copy_u8data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
        GPIO_voidSetPinValue(_8_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
		WRITE_DATA_TO_LCD(ptrCnfg);
#elif LCD_Mode == _4_WIRE_MODE
		// Add data in Data Line
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,4));  //DB4
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	3304      	adds	r3, #4
 8000286:	7818      	ldrb	r0, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	3305      	adds	r3, #5
 800028e:	7819      	ldrb	r1, [r3, #0]
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	091b      	lsrs	r3, r3, #4
 8000294:	b2db      	uxtb	r3, r3
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	461a      	mov	r2, r3
 800029e:	f000 fa87 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,5));  //DB5
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	3306      	adds	r3, #6
 80002a8:	7818      	ldrb	r0, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	3307      	adds	r3, #7
 80002b0:	7819      	ldrb	r1, [r3, #0]
 80002b2:	78fb      	ldrb	r3, [r7, #3]
 80002b4:	095b      	lsrs	r3, r3, #5
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	f000 fa76 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,6));  //DB6
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	3308      	adds	r3, #8
 80002ca:	7818      	ldrb	r0, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	3309      	adds	r3, #9
 80002d2:	7819      	ldrb	r1, [r3, #0]
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	099b      	lsrs	r3, r3, #6
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	f000 fa65 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	330a      	adds	r3, #10
 80002ec:	7818      	ldrb	r0, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	330b      	adds	r3, #11
 80002f4:	7819      	ldrb	r1, [r3, #0]
 80002f6:	78fb      	ldrb	r3, [r7, #3]
 80002f8:	09db      	lsrs	r3, r3, #7
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	f000 fa57 	bl	80007b0 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	3302      	adds	r3, #2
 8000308:	7818      	ldrb	r0, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	3303      	adds	r3, #3
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2201      	movs	r2, #1
 8000314:	4619      	mov	r1, r3
 8000316:	f000 fa4b 	bl	80007b0 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	7818      	ldrb	r0, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	3301      	adds	r3, #1
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2201      	movs	r2, #1
 800032a:	4619      	mov	r1, r3
 800032c:	f000 fa40 	bl	80007b0 <GPIO_voidSetPinValue>
 8000330:	2001      	movs	r0, #1
 8000332:	f7ff ff1d 	bl	8000170 <xDelay>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	7818      	ldrb	r0, [r3, #0]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	3301      	adds	r3, #1
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2200      	movs	r2, #0
 8000346:	4619      	mov	r1, r3
 8000348:	f000 fa32 	bl	80007b0 <GPIO_voidSetPinValue>
 800034c:	2014      	movs	r0, #20
 800034e:	f7ff ff0f 	bl	8000170 <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,0));  //DB4
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	3304      	adds	r3, #4
 8000358:	7818      	ldrb	r0, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	3305      	adds	r3, #5
 8000360:	7819      	ldrb	r1, [r3, #0]
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	f000 fa20 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,1));  //DB5
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	3306      	adds	r3, #6
 8000376:	7818      	ldrb	r0, [r3, #0]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	3307      	adds	r3, #7
 800037e:	7819      	ldrb	r1, [r3, #0]
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	085b      	lsrs	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	f000 fa0f 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,2));  //DB6
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	3308      	adds	r3, #8
 8000398:	7818      	ldrb	r0, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	3309      	adds	r3, #9
 80003a0:	7819      	ldrb	r1, [r3, #0]
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	089b      	lsrs	r3, r3, #2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	f000 f9fe 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,3));  //DB7 
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	330a      	adds	r3, #10
 80003ba:	7818      	ldrb	r0, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	330b      	adds	r3, #11
 80003c2:	7819      	ldrb	r1, [r3, #0]
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	08db      	lsrs	r3, r3, #3
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	f000 f9ed 	bl	80007b0 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	3302      	adds	r3, #2
 80003dc:	7818      	ldrb	r0, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	3303      	adds	r3, #3
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	f000 f9e1 	bl	80007b0 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	7818      	ldrb	r0, [r3, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	3301      	adds	r3, #1
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	f000 f9d6 	bl	80007b0 <GPIO_voidSetPinValue>
 8000404:	2001      	movs	r0, #1
 8000406:	f7ff feb3 	bl	8000170 <xDelay>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	7818      	ldrb	r0, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	f000 f9c8 	bl	80007b0 <GPIO_voidSetPinValue>
 8000420:	2014      	movs	r0, #20
 8000422:	f7ff fea5 	bl	8000170 <xDelay>
#endif
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <LCD_voidSendString>:

void LCD_voidSendString(LCD_Config* ptrCnfg , u8* ptr_u8data)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b084      	sub	sp, #16
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
	u8 index =0 ; 
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 800043c:	e00a      	b.n	8000454 <LCD_voidSendString+0x26>
	{
		LCD_voidSendChar(ptrCnfg,ptr_u8data[index]);
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	4413      	add	r3, r2
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	4619      	mov	r1, r3
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff13 	bl	8000274 <LCD_voidSendChar>
		index++;
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	3301      	adds	r3, #1
 8000452:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	4413      	add	r3, r2
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1ee      	bne.n	800043e <LCD_voidSendString+0x10>
	}
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <LCD_voidWriteCmd>:



/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	3304      	adds	r3, #4
 800047a:	7818      	ldrb	r0, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	3305      	adds	r3, #5
 8000482:	7819      	ldrb	r1, [r3, #0]
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	091b      	lsrs	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	f000 f98d 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	3306      	adds	r3, #6
 800049c:	7818      	ldrb	r0, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	3307      	adds	r3, #7
 80004a4:	7819      	ldrb	r1, [r3, #0]
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	095b      	lsrs	r3, r3, #5
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	f000 f97c 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	3308      	adds	r3, #8
 80004be:	7818      	ldrb	r0, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	3309      	adds	r3, #9
 80004c6:	7819      	ldrb	r1, [r3, #0]
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	099b      	lsrs	r3, r3, #6
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	f000 f96b 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	330a      	adds	r3, #10
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	330b      	adds	r3, #11
 80004e8:	7819      	ldrb	r1, [r3, #0]
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	09db      	lsrs	r3, r3, #7
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	f000 f95d 	bl	80007b0 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	3302      	adds	r3, #2
 80004fc:	7818      	ldrb	r0, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	3303      	adds	r3, #3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	f000 f951 	bl	80007b0 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	7818      	ldrb	r0, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	3301      	adds	r3, #1
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	f000 f946 	bl	80007b0 <GPIO_voidSetPinValue>
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff fe23 	bl	8000170 <xDelay>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	7818      	ldrb	r0, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	3301      	adds	r3, #1
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2200      	movs	r2, #0
 800053a:	4619      	mov	r1, r3
 800053c:	f000 f938 	bl	80007b0 <GPIO_voidSetPinValue>
 8000540:	2014      	movs	r0, #20
 8000542:	f7ff fe15 	bl	8000170 <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	3304      	adds	r3, #4
 800054c:	7818      	ldrb	r0, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	3305      	adds	r3, #5
 8000554:	7819      	ldrb	r1, [r3, #0]
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f000 f926 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	3306      	adds	r3, #6
 800056a:	7818      	ldrb	r0, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	3307      	adds	r3, #7
 8000572:	7819      	ldrb	r1, [r3, #0]
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	085b      	lsrs	r3, r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	f000 f915 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	3308      	adds	r3, #8
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	3309      	adds	r3, #9
 8000594:	7819      	ldrb	r1, [r3, #0]
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	089b      	lsrs	r3, r3, #2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	f000 f904 	bl	80007b0 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	330a      	adds	r3, #10
 80005ae:	7818      	ldrb	r0, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	330b      	adds	r3, #11
 80005b6:	7819      	ldrb	r1, [r3, #0]
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	f000 f8f3 	bl	80007b0 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	3302      	adds	r3, #2
 80005d0:	7818      	ldrb	r0, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	3303      	adds	r3, #3
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	f000 f8e7 	bl	80007b0 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	7818      	ldrb	r0, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	3301      	adds	r3, #1
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f000 f8dc 	bl	80007b0 <GPIO_voidSetPinValue>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff fdb9 	bl	8000170 <xDelay>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	7818      	ldrb	r0, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f000 f8ce 	bl	80007b0 <GPIO_voidSetPinValue>
 8000614:	2014      	movs	r0, #20
 8000616:	f7ff fdab 	bl	8000170 <xDelay>

#endif
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
    switch(Copy_u8Port)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d03e      	beq.n	80006ba <GPIO_voidSetPinDirection+0x96>
 800063c:	2b04      	cmp	r3, #4
 800063e:	d075      	beq.n	800072c <GPIO_voidSetPinDirection+0x108>
 8000640:	2b02      	cmp	r3, #2
 8000642:	d000      	beq.n	8000646 <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 8000644:	e0a9      	b.n	800079a <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	2b07      	cmp	r3, #7
 800064a:	d817      	bhi.n	800067c <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 800064c:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	0092      	lsls	r2, r2, #2
 8000654:	210f      	movs	r1, #15
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a51      	ldr	r2, [pc, #324]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 8000660:	400b      	ands	r3, r1
 8000662:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000664:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7979      	ldrb	r1, [r7, #5]
 800066a:	79ba      	ldrb	r2, [r7, #6]
 800066c:	0092      	lsls	r2, r2, #2
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a4b      	ldr	r2, [pc, #300]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
			break;
 800067a:	e089      	b.n	8000790 <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	f200 8086 	bhi.w	8000790 <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	3b08      	subs	r3, #8
 8000688:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 800068a:	4b46      	ldr	r3, [pc, #280]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	210f      	movs	r1, #15
 8000694:	fa01 f202 	lsl.w	r2, r1, r2
 8000698:	43d2      	mvns	r2, r2
 800069a:	4611      	mov	r1, r2
 800069c:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 800069e:	400b      	ands	r3, r1
 80006a0:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	7979      	ldrb	r1, [r7, #5]
 80006a8:	79ba      	ldrb	r2, [r7, #6]
 80006aa:	0092      	lsls	r2, r2, #2
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a3c      	ldr	r2, [pc, #240]	; (80007a4 <GPIO_voidSetPinDirection+0x180>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6053      	str	r3, [r2, #4]
			break;
 80006b8:	e06a      	b.n	8000790 <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d817      	bhi.n	80006f0 <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	210f      	movs	r1, #15
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	43d2      	mvns	r2, r2
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a35      	ldr	r2, [pc, #212]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 80006d4:	400b      	ands	r3, r1
 80006d6:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 80006d8:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	7979      	ldrb	r1, [r7, #5]
 80006de:	79ba      	ldrb	r2, [r7, #6]
 80006e0:	0092      	lsls	r2, r2, #2
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6013      	str	r3, [r2, #0]
			break;
 80006ee:	e051      	b.n	8000794 <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d84e      	bhi.n	8000794 <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	3b08      	subs	r3, #8
 80006fa:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	79ba      	ldrb	r2, [r7, #6]
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	210f      	movs	r1, #15
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	43d2      	mvns	r2, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 8000710:	400b      	ands	r3, r1
 8000712:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	7979      	ldrb	r1, [r7, #5]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	4611      	mov	r1, r2
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <GPIO_voidSetPinDirection+0x184>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6053      	str	r3, [r2, #4]
			break;
 800072a:	e033      	b.n	8000794 <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b07      	cmp	r3, #7
 8000730:	d810      	bhi.n	8000754 <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	7979      	ldrb	r1, [r7, #5]
 8000742:	79ba      	ldrb	r2, [r7, #6]
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
			break;
 8000752:	e021      	b.n	8000798 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d81e      	bhi.n	8000798 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	3b08      	subs	r3, #8
 800075e:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	210f      	movs	r1, #15
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	43d2      	mvns	r2, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 8000774:	400b      	ands	r3, r1
 8000776:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	7979      	ldrb	r1, [r7, #5]
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <GPIO_voidSetPinDirection+0x188>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6053      	str	r3, [r2, #4]
			break;
 800078e:	e003      	b.n	8000798 <GPIO_voidSetPinDirection+0x174>
			break;
 8000790:	bf00      	nop
 8000792:	e002      	b.n	800079a <GPIO_voidSetPinDirection+0x176>
			break;
 8000794:	bf00      	nop
 8000796:	e000      	b.n	800079a <GPIO_voidSetPinDirection+0x176>
			break;
 8000798:	bf00      	nop
	}

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40010800 	.word	0x40010800
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40011000 	.word	0x40011000

080007b0 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	460b      	mov	r3, r1
 80007bc:	71bb      	strb	r3, [r7, #6]
 80007be:	4613      	mov	r3, r2
 80007c0:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d017      	beq.n	80007f8 <GPIO_voidSetPinValue+0x48>
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d028      	beq.n	800081e <GPIO_voidSetPinValue+0x6e>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d000      	beq.n	80007d2 <GPIO_voidSetPinValue+0x22>
					break ; 
			}	
			break ;
		default :
		//error
			break ;
 80007d0:	e038      	b.n	8000844 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 80007d2:	797b      	ldrb	r3, [r7, #5]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d008      	beq.n	80007ea <GPIO_voidSetPinValue+0x3a>
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d000      	beq.n	80007de <GPIO_voidSetPinValue+0x2e>
					break ; 
 80007dc:	e00b      	b.n	80007f6 <GPIO_voidSetPinValue+0x46>
					GPIOA->BSRR = (1 << Copy_Pin);
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	2201      	movs	r2, #1
 80007e2:	409a      	lsls	r2, r3
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <GPIO_voidSetPinValue+0xa0>)
 80007e6:	611a      	str	r2, [r3, #16]
					break ;
 80007e8:	e005      	b.n	80007f6 <GPIO_voidSetPinValue+0x46>
					GPIOA->BRR = (1 << Copy_Pin);
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	2201      	movs	r2, #1
 80007ee:	409a      	lsls	r2, r3
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <GPIO_voidSetPinValue+0xa0>)
 80007f2:	615a      	str	r2, [r3, #20]
					break ;
 80007f4:	bf00      	nop
			break ; 
 80007f6:	e025      	b.n	8000844 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <GPIO_voidSetPinValue+0x60>
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d000      	beq.n	8000804 <GPIO_voidSetPinValue+0x54>
					break ; 
 8000802:	e00b      	b.n	800081c <GPIO_voidSetPinValue+0x6c>
					GPIOB->BSRR = (1 << Copy_Pin);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	2201      	movs	r2, #1
 8000808:	409a      	lsls	r2, r3
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <GPIO_voidSetPinValue+0xa4>)
 800080c:	611a      	str	r2, [r3, #16]
					break ;
 800080e:	e005      	b.n	800081c <GPIO_voidSetPinValue+0x6c>
					GPIOB->BRR = (1 << Copy_Pin);
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	2201      	movs	r2, #1
 8000814:	409a      	lsls	r2, r3
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <GPIO_voidSetPinValue+0xa4>)
 8000818:	615a      	str	r2, [r3, #20]
					break ;
 800081a:	bf00      	nop
			break ;
 800081c:	e012      	b.n	8000844 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 800081e:	797b      	ldrb	r3, [r7, #5]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <GPIO_voidSetPinValue+0x86>
 8000824:	2b01      	cmp	r3, #1
 8000826:	d000      	beq.n	800082a <GPIO_voidSetPinValue+0x7a>
					break ; 
 8000828:	e00b      	b.n	8000842 <GPIO_voidSetPinValue+0x92>
					GPIOC->BSRR = (1 << Copy_Pin);
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	2201      	movs	r2, #1
 800082e:	409a      	lsls	r2, r3
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <GPIO_voidSetPinValue+0xa8>)
 8000832:	611a      	str	r2, [r3, #16]
					break ;
 8000834:	e005      	b.n	8000842 <GPIO_voidSetPinValue+0x92>
					GPIOC->BRR = (1 << Copy_Pin);
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	2201      	movs	r2, #1
 800083a:	409a      	lsls	r2, r3
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <GPIO_voidSetPinValue+0xa8>)
 800083e:	615a      	str	r2, [r3, #20]
					break ;
 8000840:	bf00      	nop
			break ;
 8000842:	bf00      	nop
	}

}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40010800 	.word	0x40010800
 8000854:	40010c00 	.word	0x40010c00
 8000858:	40011000 	.word	0x40011000

0800085c <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b1f      	cmp	r3, #31
 8000870:	d828      	bhi.n	80008c4 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00f      	beq.n	8000898 <RCC_voidEnableClock+0x3c>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d018      	beq.n	80008ae <RCC_voidEnableClock+0x52>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d000      	beq.n	8000882 <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8000880:	e020      	b.n	80008c4 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <RCC_voidEnableClock+0x74>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	79ba      	ldrb	r2, [r7, #6]
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <RCC_voidEnableClock+0x74>)
 8000892:	430b      	orrs	r3, r1
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e015      	b.n	80008c4 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <RCC_voidEnableClock+0x78>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <RCC_voidEnableClock+0x78>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	e00a      	b.n	80008c4 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <RCC_voidEnableClock+0x7c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	79ba      	ldrb	r2, [r7, #6]
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ba:	4611      	mov	r1, r2
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <RCC_voidEnableClock+0x7c>)
 80008be:	430b      	orrs	r3, r1
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	bf00      	nop
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021014 	.word	0x40021014
 80008d4:	4002101c 	.word	0x4002101c
 80008d8:	40021018 	.word	0x40021018

080008dc <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
			   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
			#endif
			RCC_CFGR |= RCC_CFGR_PLLXTPRE_HSE_Div2;
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE
				#if   RCC_PLL_HSE == RCC_PLL_HSE_CRYSTAL
					SET_BIT(RCC_CR, RCC_CR_CSSON);
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 80008f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f6:	6013      	str	r3, [r2, #0]
					SET_BIT(RCC_CR, RCC_CR_HSEON);
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 80008fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000902:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
 8000904:	bf00      	nop
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	0c5b      	lsrs	r3, r3, #17
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f8      	beq.n	8000906 <RCC_voidInitSysClocks+0x2a>
				   #warning("Wrong PLL input from HSE...Crystal is default")
				   SET_BIT(RCC_CR, RCC_CR_CSSON);
				   SET_BIT(RCC_CR, RCC_CR_HSEON);
				   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
				#endif
				RCC_CFGR |= RCC_CFGR_PLLSRC_HSE;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a16      	ldr	r2, [pc, #88]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 800091a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800091e:	6013      	str	r3, [r2, #0]
		#endif
			/***************************** SET MUX VAL	***********************************/
				RCC_CFGR |= RCC_PLL_MUL_VAL ;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 800092e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000932:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC_CR, RCC_CR_PLLRDY)));
 8000934:	bf00      	nop
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <RCC_voidInitSysClocks+0x94>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	0e5b      	lsrs	r3, r3, #25
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f8      	beq.n	8000936 <RCC_voidInitSysClocks+0x5a>
			RCC_CFGR |= RCC_CFGR_SW_PLL;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <RCC_voidInitSysClocks+0x98>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000
 8000974:	40021004 	.word	0x40021004

08000978 <SPI_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void SPI_voidInit(SPI_Select_t SPI_Number , SPI_config* SPI_UsrConfig)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
	u16 LOC_u16Reg_CR1 = 0 ;
 8000984:	2300      	movs	r3, #0
 8000986:	81fb      	strh	r3, [r7, #14]
	u16 LOC_u16Reg_CR2 = 0 ;
 8000988:	2300      	movs	r3, #0
 800098a:	81bb      	strh	r3, [r7, #12]

	/*	Enable SPI	*/
	LOC_u16Reg_CR1  = (1<<6) ;
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	81fb      	strh	r3, [r7, #14]
	/* Configuration Master/Slave	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_Mode ;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b29a      	uxth	r2, r3
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	4313      	orrs	r3, r2
 800099a:	81fb      	strh	r3, [r7, #14]
	/* Comm Mode	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_CommMode ;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	885a      	ldrh	r2, [r3, #2]
 80009a0:	89fb      	ldrh	r3, [r7, #14]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	81fb      	strh	r3, [r7, #14]
	/* Frame Format	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_DataSize ;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	88da      	ldrh	r2, [r3, #6]
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	81fb      	strh	r3, [r7, #14]
	/* Clock Polarity/Phase	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_IdleLevel ;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	7a1b      	ldrb	r3, [r3, #8]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	81fb      	strh	r3, [r7, #14]
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_DataSampling ;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	7a5b      	ldrb	r3, [r3, #9]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	81fb      	strh	r3, [r7, #14]
	/*	NSS	*/
	if(SPI_UsrConfig->SPI_SlaveSelectMangment == SPI_SSM_HW_MASTER_SS_EN)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d108      	bne.n	80009e4 <SPI_voidInit+0x6c>
	{
		LOC_u16Reg_CR2 |= SPI_UsrConfig->SPI_SlaveSelectMangment ;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80009d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b21b      	sxth	r3, r3
 80009e0:	81bb      	strh	r3, [r7, #12]
 80009e2:	e016      	b.n	8000a12 <SPI_voidInit+0x9a>
	}
	else if(SPI_UsrConfig->SPI_SlaveSelectMangment == SPI_SSM_HW_MASTER_SS_DISABLED)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009ea:	f113 0f05 	cmn.w	r3, #5
 80009ee:	d108      	bne.n	8000a02 <SPI_voidInit+0x8a>
	{
		LOC_u16Reg_CR2 &= SPI_UsrConfig->SPI_SlaveSelectMangment ;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80009f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009fa:	4013      	ands	r3, r2
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	81bb      	strh	r3, [r7, #12]
 8000a00:	e007      	b.n	8000a12 <SPI_voidInit+0x9a>
	}
	else
	{
		LOC_u16Reg_CR1 |= SPI_UsrConfig->SPI_SlaveSelectMangment ;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000a08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	81fb      	strh	r3, [r7, #14]
	}
	/* Buad Rate	*/
	LOC_u16Reg_CR1 |= SPI_UsrConfig->SPI_BuadRate ;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	7b1b      	ldrb	r3, [r3, #12]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	89fb      	ldrh	r3, [r7, #14]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	81fb      	strh	r3, [r7, #14]

	/*	Interrupt	*/
	if(SPI_UsrConfig->SPI_IRQ != SPI_IRQ_DISABLED)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	7b5b      	ldrb	r3, [r3, #13]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d005      	beq.n	8000a32 <SPI_voidInit+0xba>
	{
		LOC_u16Reg_CR2 |= SPI_UsrConfig->SPI_IRQ;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	7b5b      	ldrb	r3, [r3, #13]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	89bb      	ldrh	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	81bb      	strh	r3, [r7, #12]
	}

	if(SPI_Number == SPI_1)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d109      	bne.n	8000a4c <SPI_voidInit+0xd4>
	{
		Global_SPI_Config[0] = SPI_UsrConfig ;
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <SPI_voidInit+0xf8>)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	6013      	str	r3, [r2, #0]
		SPI1->CR1 = LOC_u16Reg_CR1 ;
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <SPI_voidInit+0xfc>)
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	6013      	str	r3, [r2, #0]
		SPI1->CR2 = LOC_u16Reg_CR2 ;
 8000a44:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <SPI_voidInit+0xfc>)
 8000a46:	89bb      	ldrh	r3, [r7, #12]
 8000a48:	6053      	str	r3, [r2, #4]
	else
	{
		// <!TODO> Error in Init
	}

}
 8000a4a:	e00b      	b.n	8000a64 <SPI_voidInit+0xec>
	else if(SPI_Number == SPI_2)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d108      	bne.n	8000a64 <SPI_voidInit+0xec>
		Global_SPI_Config[1] = SPI_UsrConfig ;
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <SPI_voidInit+0xf8>)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	6053      	str	r3, [r2, #4]
		SPI2->CR1 = LOC_u16Reg_CR1 ;
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <SPI_voidInit+0x100>)
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	6013      	str	r3, [r2, #0]
		SPI2->CR2 = LOC_u16Reg_CR2 ;
 8000a5e:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <SPI_voidInit+0x100>)
 8000a60:	89bb      	ldrh	r3, [r7, #12]
 8000a62:	6053      	str	r3, [r2, #4]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000028 	.word	0x20000028
 8000a74:	40013000 	.word	0x40013000
 8000a78:	40005800 	.word	0x40005800

08000a7c <SPI_voidSend_RecieveDataSynch>:
		// <!TODO> Error in Init
	}
}

void SPI_voidSend_RecieveDataSynch(SPI_Select_t SPI_Number , u16 *pTxBuffer, u16 *pRxBuffer)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	73fb      	strb	r3, [r7, #15]
	if(SPI_Number == SPI_1)
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d117      	bne.n	8000ac0 <SPI_voidSend_RecieveDataSynch+0x44>
	{
		SPI_WAIT_TX_EMPTY(SPI1);
 8000a90:	bf00      	nop
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <SPI_voidSend_RecieveDataSynch+0x84>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <SPI_voidSend_RecieveDataSynch+0x16>
		SPI1->DR = *pTxBuffer ;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	881a      	ldrh	r2, [r3, #0]
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <SPI_voidSend_RecieveDataSynch+0x84>)
 8000aa4:	60da      	str	r2, [r3, #12]
		SPI_WAIT_RX_EMPTY(SPI1);
 8000aa6:	bf00      	nop
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <SPI_voidSend_RecieveDataSynch+0x84>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f9      	beq.n	8000aa8 <SPI_voidSend_RecieveDataSynch+0x2c>
		*pRxBuffer = SPI1->DR  ;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <SPI_voidSend_RecieveDataSynch+0x84>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		// <!TODO> Error in Init
	}
}
 8000abe:	e019      	b.n	8000af4 <SPI_voidSend_RecieveDataSynch+0x78>
	else if(SPI_Number == SPI_2)
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d116      	bne.n	8000af4 <SPI_voidSend_RecieveDataSynch+0x78>
		SPI_WAIT_TX_EMPTY(SPI2);
 8000ac6:	bf00      	nop
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SPI_voidSend_RecieveDataSynch+0x88>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0f9      	beq.n	8000ac8 <SPI_voidSend_RecieveDataSynch+0x4c>
		SPI2->DR = *pTxBuffer ;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	881a      	ldrh	r2, [r3, #0]
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SPI_voidSend_RecieveDataSynch+0x88>)
 8000ada:	60da      	str	r2, [r3, #12]
		SPI_WAIT_RX_EMPTY(SPI2);
 8000adc:	bf00      	nop
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <SPI_voidSend_RecieveDataSynch+0x88>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f9      	beq.n	8000ade <SPI_voidSend_RecieveDataSynch+0x62>
		*pRxBuffer = SPI2->DR  ;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SPI_voidSend_RecieveDataSynch+0x88>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	801a      	strh	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40013000 	.word	0x40013000
 8000b04:	40005800 	.word	0x40005800

08000b08 <SPI_VoidGPIO_SetPins>:

void SPI_VoidGPIO_SetPins(SPI_Select_t SPI_Number)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if(SPI_Number == SPI_1)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d14f      	bne.n	8000bb8 <SPI_VoidGPIO_SetPins+0xb0>
		//   	PA4 : SPI1_NSS
		//   	PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//   	PA7 : SPI1_MOSI
		// =========================== Master ====================================
		if(Global_SPI_Config[0]->SPI_Mode == SPI_MASTER)
 8000b18:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d12a      	bne.n	8000b78 <SPI_VoidGPIO_SetPins+0x70>
		{
			// PA4 Chek
			switch(Global_SPI_Config[0]->SPI_SlaveSelectMangment)
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b2a:	f113 0f05 	cmn.w	r3, #5
 8000b2e:	d002      	beq.n	8000b36 <SPI_VoidGPIO_SetPins+0x2e>
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d006      	beq.n	8000b42 <SPI_VoidGPIO_SetPins+0x3a>
			{
				case SPI_SSM_HW_MASTER_SS_DISABLED : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_INPUT_FLOATING); 			  break ; 		// LIKE MULTIMASTER
				case SPI_SSM_HW_MASTER_SS_EN	   : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL); break ;
				default: break ;
 8000b34:	e00b      	b.n	8000b4e <SPI_VoidGPIO_SetPins+0x46>
				case SPI_SSM_HW_MASTER_SS_DISABLED : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_INPUT_FLOATING); 			  break ; 		// LIKE MULTIMASTER
 8000b36:	2204      	movs	r2, #4
 8000b38:	2104      	movs	r1, #4
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fd72 	bl	8000624 <GPIO_voidSetPinDirection>
 8000b40:	e005      	b.n	8000b4e <SPI_VoidGPIO_SetPins+0x46>
				case SPI_SSM_HW_MASTER_SS_EN	   : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL); break ;
 8000b42:	2209      	movs	r2, #9
 8000b44:	2104      	movs	r1, #4
 8000b46:	2002      	movs	r0, #2
 8000b48:	f7ff fd6c 	bl	8000624 <GPIO_voidSetPinDirection>
 8000b4c:	bf00      	nop
			}
			// PA5 : SPI1_SCK : OUTPUT AF
			GPIO_voidSetPinDirection(PORTA,PIN5,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8000b4e:	2209      	movs	r2, #9
 8000b50:	2105      	movs	r1, #5
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff fd66 	bl	8000624 <GPIO_voidSetPinDirection>
			// MISO AND MOSI
			if(Global_SPI_Config[0]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8000b58:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	885b      	ldrh	r3, [r3, #2]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d17c      	bne.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
			{
				// PA6  : SPI1_MISO
				GPIO_voidSetPinDirection(PORTA,PIN6,GPIO_INPUT_FLOATING);
 8000b62:	2204      	movs	r2, #4
 8000b64:	2106      	movs	r1, #6
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff fd5c 	bl	8000624 <GPIO_voidSetPinDirection>
				// PA7 : SPI1_MOSI
				GPIO_voidSetPinDirection(PORTA,PIN7,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8000b6c:	2209      	movs	r2, #9
 8000b6e:	2107      	movs	r1, #7
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fd57 	bl	8000624 <GPIO_voidSetPinDirection>
	}
	else
	{
		// <!TODO> Error in Init
	}
}
 8000b76:	e071      	b.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
			if(Global_SPI_Config[0]->SPI_SlaveSelectMangment == SPI_SSM_HW_SLAVE)
 8000b78:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <SPI_VoidGPIO_SetPins+0x86>
				GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_INPUT_FLOATING);
 8000b84:	2204      	movs	r2, #4
 8000b86:	2104      	movs	r1, #4
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fd4b 	bl	8000624 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA,PIN5,GPIO_INPUT_FLOATING);
 8000b8e:	2204      	movs	r2, #4
 8000b90:	2105      	movs	r1, #5
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fd46 	bl	8000624 <GPIO_voidSetPinDirection>
			if(Global_SPI_Config[0]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	885b      	ldrh	r3, [r3, #2]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d15c      	bne.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
				GPIO_voidSetPinDirection(PORTA,PIN6,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8000ba2:	2209      	movs	r2, #9
 8000ba4:	2106      	movs	r1, #6
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f7ff fd3c 	bl	8000624 <GPIO_voidSetPinDirection>
				GPIO_voidSetPinDirection(PORTA,PIN7,GPIO_INPUT_FLOATING);
 8000bac:	2204      	movs	r2, #4
 8000bae:	2107      	movs	r1, #7
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff fd37 	bl	8000624 <GPIO_voidSetPinDirection>
}
 8000bb6:	e051      	b.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
	else if(SPI_Number == SPI_2)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d14e      	bne.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
			if(Global_SPI_Config[1]->SPI_Mode == SPI_MASTER)
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d12a      	bne.n	8000c1e <SPI_VoidGPIO_SetPins+0x116>
				switch(Global_SPI_Config[1]->SPI_SlaveSelectMangment)
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bd0:	f113 0f05 	cmn.w	r3, #5
 8000bd4:	d002      	beq.n	8000bdc <SPI_VoidGPIO_SetPins+0xd4>
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d006      	beq.n	8000be8 <SPI_VoidGPIO_SetPins+0xe0>
					default: break ;
 8000bda:	e00b      	b.n	8000bf4 <SPI_VoidGPIO_SetPins+0xec>
					case SPI_SSM_HW_MASTER_SS_DISABLED : GPIO_voidSetPinDirection(PORTB,PIN12,GPIO_INPUT_FLOATING); 			  break ; 		// LIKE MULTIMASTER
 8000bdc:	2204      	movs	r2, #4
 8000bde:	210c      	movs	r1, #12
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff fd1f 	bl	8000624 <GPIO_voidSetPinDirection>
 8000be6:	e005      	b.n	8000bf4 <SPI_VoidGPIO_SetPins+0xec>
					case SPI_SSM_HW_MASTER_SS_EN	   : GPIO_voidSetPinDirection(PORTB,PIN12,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL); break ;
 8000be8:	2209      	movs	r2, #9
 8000bea:	210c      	movs	r1, #12
 8000bec:	2003      	movs	r0, #3
 8000bee:	f7ff fd19 	bl	8000624 <GPIO_voidSetPinDirection>
 8000bf2:	bf00      	nop
				GPIO_voidSetPinDirection(PORTB,PIN13,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8000bf4:	2209      	movs	r2, #9
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f7ff fd13 	bl	8000624 <GPIO_voidSetPinDirection>
				if(Global_SPI_Config[1]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	885b      	ldrh	r3, [r3, #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d129      	bne.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_INPUT_FLOATING);
 8000c08:	2204      	movs	r2, #4
 8000c0a:	210e      	movs	r1, #14
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f7ff fd09 	bl	8000624 <GPIO_voidSetPinDirection>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8000c12:	2209      	movs	r2, #9
 8000c14:	210e      	movs	r1, #14
 8000c16:	2003      	movs	r0, #3
 8000c18:	f7ff fd04 	bl	8000624 <GPIO_voidSetPinDirection>
}
 8000c1c:	e01e      	b.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
				if(Global_SPI_Config[1]->SPI_SlaveSelectMangment == SPI_SSM_HW_SLAVE)
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d104      	bne.n	8000c34 <SPI_VoidGPIO_SetPins+0x12c>
					GPIO_voidSetPinDirection(PORTB,PIN12,GPIO_INPUT_FLOATING);
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	210c      	movs	r1, #12
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f7ff fcf8 	bl	8000624 <GPIO_voidSetPinDirection>
				GPIO_voidSetPinDirection(PORTB,PIN13,GPIO_INPUT_FLOATING);
 8000c34:	2204      	movs	r2, #4
 8000c36:	210d      	movs	r1, #13
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f7ff fcf3 	bl	8000624 <GPIO_voidSetPinDirection>
				if(Global_SPI_Config[1]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SPI_VoidGPIO_SetPins+0x15c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	885b      	ldrh	r3, [r3, #2]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <SPI_VoidGPIO_SetPins+0x154>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8000c48:	2209      	movs	r2, #9
 8000c4a:	210e      	movs	r1, #14
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f7ff fce9 	bl	8000624 <GPIO_voidSetPinDirection>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_INPUT_FLOATING);
 8000c52:	2204      	movs	r2, #4
 8000c54:	210e      	movs	r1, #14
 8000c56:	2003      	movs	r0, #3
 8000c58:	f7ff fce4 	bl	8000624 <GPIO_voidSetPinDirection>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000028 	.word	0x20000028

08000c68 <SPI1_IRQHandler>:
/*************************************	IRQ	************************************************/

void SPI1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SPI1_IRQHandler+0x54>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	793b      	ldrb	r3, [r7, #4]
 8000c7c:	f362 0300 	bfi	r3, r2, #0, #1
 8000c80:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <SPI1_IRQHandler+0x54>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	793b      	ldrb	r3, [r7, #4]
 8000c8e:	f362 0341 	bfi	r3, r2, #1, #1
 8000c92:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <SPI1_IRQHandler+0x54>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	f362 0382 	bfi	r3, r2, #2, #1
 8000ca6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[0]->P_IRQ_CallBack(irq_src);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SPI1_IRQHandler+0x58>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	7938      	ldrb	r0, [r7, #4]
 8000cb0:	4798      	blx	r3
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	20000028 	.word	0x20000028

08000cc4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <SPI2_IRQHandler+0x54>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	f362 0300 	bfi	r3, r2, #0, #1
 8000cdc:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <SPI2_IRQHandler+0x54>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	f362 0341 	bfi	r3, r2, #1, #1
 8000cee:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <SPI2_IRQHandler+0x54>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	793b      	ldrb	r3, [r7, #4]
 8000cfe:	f362 0382 	bfi	r3, r2, #2, #1
 8000d02:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[1]->P_IRQ_CallBack(irq_src);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SPI2_IRQHandler+0x58>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	7938      	ldrb	r0, [r7, #4]
 8000d0c:	4798      	blx	r3
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40013000 	.word	0x40013000
 8000d1c:	20000028 	.word	0x20000028

08000d20 <xDelay>:
#include "../Inc/HAL/_7Segment/_7Segment.h"
#include "../Inc/HAL/KeyPad/KeyPad.h"
#include "../Inc/HAL/LCD/LCD.h"

volatile static void xDelay(u32 time)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e00c      	b.n	8000d48 <xDelay+0x28>
		for(j = 1000;j > 0;j--);
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	e002      	b.n	8000d3c <xDelay+0x1c>
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f9      	bne.n	8000d36 <xDelay+0x16>
	for(i = time;i > 0;i--)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1ef      	bne.n	8000d2e <xDelay+0xe>

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SPI_voidSetup>:
}

SPI_config mySPI ;

void SPI_voidSetup(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	GPIO_voidSetPinDirection(PORTA, PIN4,GPIO_OUTPUT_10MHZ_PUSH_PULL) ;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2104      	movs	r1, #4
 8000d60:	2002      	movs	r0, #2
 8000d62:	f7ff fc5f 	bl	8000624 <GPIO_voidSetPinDirection>
	// Force the Slave Select (HIGH) for idle Mode
	GPIO_voidSetPinValue(PORTA, PIN4, HIGH);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2104      	movs	r1, #4
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff fd20 	bl	80007b0 <GPIO_voidSetPinValue>


	mySPI.SPI_CommMode = SPI_FULL_DOUPLEX ;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	805a      	strh	r2, [r3, #2]
	mySPI.SPI_DataOrder = SPI_MSB_FIRST  ;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	711a      	strb	r2, [r3, #4]
	mySPI.SPI_DataSize =SPI_8_BIT_DATA  ;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	80da      	strh	r2, [r3, #6]
	mySPI.SPI_IdleLevel = SPI_IDLE_HIGH ;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	721a      	strb	r2, [r3, #8]
	mySPI.SPI_DataSampling = SPI_TRAILING_EDGE ;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	725a      	strb	r2, [r3, #9]
	mySPI.SPI_BuadRate = SPI_BUAD_PRESCALED_BY_16;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d90:	2218      	movs	r2, #24
 8000d92:	731a      	strb	r2, [r3, #12]
	mySPI.SPI_Mode = SPI_MASTER ;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	701a      	strb	r2, [r3, #0]
	mySPI.SPI_IRQ =SPI_IRQ_DISABLED ;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	735a      	strb	r2, [r3, #13]
	mySPI.SPI_SlaveSelectMangment =SPI_SSM_SW_SLAVE_SET ;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000da2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000da6:	815a      	strh	r2, [r3, #10]
	mySPI.P_IRQ_CallBack = NULL ;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
	SPI_voidInit(SPI_1, &mySPI) ;
 8000dae:	4904      	ldr	r1, [pc, #16]	; (8000dc0 <SPI_voidSetup+0x68>)
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fde1 	bl	8000978 <SPI_voidInit>
	SPI_VoidGPIO_SetPins(SPI_1);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fea6 	bl	8000b08 <SPI_VoidGPIO_SetPins>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000034 	.word	0x20000034

08000dc4 <main>:
u8 c ;
void main(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0


	/*			init clock			*/
	RCC_voidInitSysClocks();
 8000dca:	f7ff fd87 	bl	80008dc <RCC_voidInitSysClocks>
	RCC_voidEnableClock(RCC_APB2,PORTA );
 8000dce:	2102      	movs	r1, #2
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff fd43 	bl	800085c <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 0 );
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fd3f 	bl	800085c <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,12 );
 8000dde:	210c      	movs	r1, #12
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff fd3b 	bl	800085c <RCC_voidEnableClock>
	/*			init lcd			*/
	LCD_Config myLCD ;
	myLCD.LCD_SIZE_Rows = 4 ;
 8000de6:	2304      	movs	r3, #4
 8000de8:	713b      	strb	r3, [r7, #4]
	myLCD.LCD_SIZE_Cols = 16 ;
 8000dea:	2310      	movs	r3, #16
 8000dec:	717b      	strb	r3, [r7, #5]
	myLCD.LCD_PortPins = arr ;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <main+0x84>)
 8000df0:	60bb      	str	r3, [r7, #8]
	LCD_voidInit(&myLCD);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9d7 	bl	80001a8 <LCD_voidInit>
	SPI_voidSetup() ;
 8000dfa:	f7ff ffad 	bl	8000d58 <SPI_voidSetup>
	u16 x = 0 ;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	81fb      	strh	r3, [r7, #14]
	u16 y  = '+' ;
 8000e02:	232b      	movs	r3, #43	; 0x2b
 8000e04:	807b      	strh	r3, [r7, #2]
	LCD_voidSendString(&myLCD, "hELEO");
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4910      	ldr	r1, [pc, #64]	; (8000e4c <main+0x88>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb0f 	bl	800042e <LCD_voidSendString>
	while(1){

		GPIO_voidSetPinValue(PORTA, PIN4 , LOW) ;
 8000e10:	2200      	movs	r2, #0
 8000e12:	2104      	movs	r1, #4
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fccb 	bl	80007b0 <GPIO_voidSetPinValue>
		SPI_voidSend_RecieveDataSynch(SPI_1, &y,&c);
 8000e1a:	1cbb      	adds	r3, r7, #2
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <main+0x8c>)
 8000e1e:	4619      	mov	r1, r3
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fe2b 	bl	8000a7c <SPI_voidSend_RecieveDataSynch>
		LCD_voidSendChar(&myLCD,(u8)c);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <main+0x8c>)
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fa20 	bl	8000274 <LCD_voidSendChar>
		GPIO_voidSetPinValue(PORTA, PIN4 , HIGH) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	2104      	movs	r1, #4
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff fcb9 	bl	80007b0 <GPIO_voidSetPinValue>
		xDelay(1000) ;
 8000e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e42:	f7ff ff6d 	bl	8000d20 <xDelay>
		GPIO_voidSetPinValue(PORTA, PIN4 , LOW) ;
 8000e46:	e7e3      	b.n	8000e10 <main+0x4c>
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	08000f08 	.word	0x08000f08
 8000e50:	20000030 	.word	0x20000030

08000e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e56:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e82:	f000 f811 	bl	8000ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff ff9d 	bl	8000dc4 <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   r0, =_estack
 8000e8c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e98:	08000f18 	.word	0x08000f18
  ldr r2, =_sbss
 8000e9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea0:	20000048 	.word	0x20000048

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>
	...

08000ea8 <__libc_init_array>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	2500      	movs	r5, #0
 8000eac:	4e0c      	ldr	r6, [pc, #48]	; (8000ee0 <__libc_init_array+0x38>)
 8000eae:	4c0d      	ldr	r4, [pc, #52]	; (8000ee4 <__libc_init_array+0x3c>)
 8000eb0:	1ba4      	subs	r4, r4, r6
 8000eb2:	10a4      	asrs	r4, r4, #2
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	d109      	bne.n	8000ecc <__libc_init_array+0x24>
 8000eb8:	f000 f81a 	bl	8000ef0 <_init>
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	4e0a      	ldr	r6, [pc, #40]	; (8000ee8 <__libc_init_array+0x40>)
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <__libc_init_array+0x44>)
 8000ec2:	1ba4      	subs	r4, r4, r6
 8000ec4:	10a4      	asrs	r4, r4, #2
 8000ec6:	42a5      	cmp	r5, r4
 8000ec8:	d105      	bne.n	8000ed6 <__libc_init_array+0x2e>
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed0:	4798      	blx	r3
 8000ed2:	3501      	adds	r5, #1
 8000ed4:	e7ee      	b.n	8000eb4 <__libc_init_array+0xc>
 8000ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eda:	4798      	blx	r3
 8000edc:	3501      	adds	r5, #1
 8000ede:	e7f2      	b.n	8000ec6 <__libc_init_array+0x1e>
 8000ee0:	08000f10 	.word	0x08000f10
 8000ee4:	08000f10 	.word	0x08000f10
 8000ee8:	08000f10 	.word	0x08000f10
 8000eec:	08000f14 	.word	0x08000f14

08000ef0 <_init>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr

08000efc <_fini>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	bf00      	nop
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr
