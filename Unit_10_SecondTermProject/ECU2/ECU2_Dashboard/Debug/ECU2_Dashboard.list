
ECU2_Dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e90  08000e90  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000e90  08000e90  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e90  08000e90  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e90  08000e90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e94  08000e94  00010e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000014  08000eac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000eac  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016ab  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000733  00000000  00000000  000216e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d50  00000000  00000000  00021e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000220  00000000  00000000  00022b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b8  00000000  00000000  00022d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000012c0  00000000  00000000  00022f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000115e  00000000  00000000  00024208  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000053d4  00000000  00000000  00025366  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002a73a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006c8  00000000  00000000  0002a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000da4 	.word	0x08000da4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000da4 	.word	0x08000da4

08000170 <xDelay>:
/******************************************************************************
* private Callbacks Definitions
*******************************************************************************/

void xDelay(u32 time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00c      	b.n	8000198 <xDelay+0x28>
		for(j = 1000;j > 0;j--);
 800017e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	e002      	b.n	800018c <xDelay+0x1c>
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	3b01      	subs	r3, #1
 800018a:	60bb      	str	r3, [r7, #8]
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d1f9      	bne.n	8000186 <xDelay+0x16>
	for(i = time;i > 0;i--)
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3b01      	subs	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d1ef      	bne.n	800017e <xDelay+0xe>

}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_voidSetup>:
}

static LCD_Config myLCD ;

static void LCD_voidSetup(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	myLCD.LCD_SIZE_Rows = 4 ;
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <LCD_voidSetup+0x20>)
 80001ae:	2204      	movs	r2, #4
 80001b0:	701a      	strb	r2, [r3, #0]
	myLCD.LCD_SIZE_Cols = 16 ;
 80001b2:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <LCD_voidSetup+0x20>)
 80001b4:	2210      	movs	r2, #16
 80001b6:	705a      	strb	r2, [r3, #1]
	myLCD.LCD_PortPins = LCD_PortPin ;
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <LCD_voidSetup+0x20>)
 80001ba:	4a04      	ldr	r2, [pc, #16]	; (80001cc <LCD_voidSetup+0x24>)
 80001bc:	605a      	str	r2, [r3, #4]
	LCD_voidInit(&myLCD);
 80001be:	4802      	ldr	r0, [pc, #8]	; (80001c8 <LCD_voidSetup+0x20>)
 80001c0:	f000 f8d0 	bl	8000364 <LCD_voidInit>
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
	/*	Main Screen	*/
	LCD_voidMainScreen();
#endif

}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	20000030 	.word	0x20000030
 80001cc:	20000000 	.word	0x20000000

080001d0 <AddinggBar>:
	}
	LCD_voidGotoXY(myLCD,6,3);
	LCD_voidSendString(myLCD, addString("DONE"));
}
static void AddinggBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	460b      	mov	r3, r1
 80001da:	70fb      	strb	r3, [r7, #3]
 80001dc:	4613      	mov	r3, r2
 80001de:	803b      	strh	r3, [r7, #0]
	LCD_voidStoreCustomChar(myLCD ,LCD_Adding , 4);
 80001e0:	2204      	movs	r2, #4
 80001e2:	491d      	ldr	r1, [pc, #116]	; (8000258 <AddinggBar+0x88>)
 80001e4:	6878      	ldr	r0, [r7, #4]
 80001e6:	f000 fa74 	bl	80006d2 <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,5,1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2105      	movs	r1, #5
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 fa27 	bl	8000642 <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("Adding"));
 80001f4:	4919      	ldr	r1, [pc, #100]	; (800025c <AddinggBar+0x8c>)
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f9f7 	bl	80005ea <LCD_voidSendString>
	LCD_voidGotoXY(myLCD,0,2);
 80001fc:	2202      	movs	r2, #2
 80001fe:	2100      	movs	r1, #0
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 fa1e 	bl	8000642 <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ;
 8000206:	78fb      	ldrb	r3, [r7, #3]
 8000208:	011b      	lsls	r3, r3, #4
 800020a:	4a15      	ldr	r2, [pc, #84]	; (8000260 <AddinggBar+0x90>)
 800020c:	fb82 1203 	smull	r1, r2, r2, r3
 8000210:	1152      	asrs	r2, r2, #5
 8000212:	17db      	asrs	r3, r3, #31
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < prcentage ; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e00a      	b.n	8000234 <AddinggBar+0x64>
	{
		LCD_voidSendChar(myLCD,4);
 800021e:	2104      	movs	r1, #4
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f000 f905 	bl	8000430 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
 8000226:	883b      	ldrh	r3, [r7, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ffa1 	bl	8000170 <xDelay>
	for(int i = 0 ; i < prcentage ; i++)
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	429a      	cmp	r2, r3
 800023a:	dbf0      	blt.n	800021e <AddinggBar+0x4e>
	}
	LCD_voidGotoXY(myLCD,6,3);
 800023c:	2203      	movs	r2, #3
 800023e:	2106      	movs	r1, #6
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 f9fe 	bl	8000642 <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("DONE"));
 8000246:	4907      	ldr	r1, [pc, #28]	; (8000264 <AddinggBar+0x94>)
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 f9ce 	bl	80005ea <LCD_voidSendString>
}
 800024e:	bf00      	nop
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000000c 	.word	0x2000000c
 800025c:	08000dd0 	.word	0x08000dd0
 8000260:	51eb851f 	.word	0x51eb851f
 8000264:	08000dc8 	.word	0x08000dc8

08000268 <LCD_voidMainScreen>:

static void LCD_voidMainScreen(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 800026c:	210c      	movs	r1, #12
 800026e:	4813      	ldr	r0, [pc, #76]	; (80002bc <LCD_voidMainScreen+0x54>)
 8000270:	f000 f9d8 	bl	8000624 <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8000274:	4811      	ldr	r0, [pc, #68]	; (80002bc <LCD_voidMainScreen+0x54>)
 8000276:	f000 fa19 	bl	80006ac <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800027a:	4911      	ldr	r1, [pc, #68]	; (80002c0 <LCD_voidMainScreen+0x58>)
 800027c:	480f      	ldr	r0, [pc, #60]	; (80002bc <LCD_voidMainScreen+0x54>)
 800027e:	f000 f9b4 	bl	80005ea <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8000282:	2201      	movs	r2, #1
 8000284:	2100      	movs	r1, #0
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <LCD_voidMainScreen+0x54>)
 8000288:	f000 f9db 	bl	8000642 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("Select one of : "));
 800028c:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LCD_voidMainScreen+0x5c>)
 800028e:	480b      	ldr	r0, [pc, #44]	; (80002bc <LCD_voidMainScreen+0x54>)
 8000290:	f000 f9ab 	bl	80005ea <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,2);
 8000294:	2202      	movs	r2, #2
 8000296:	2100      	movs	r1, #0
 8000298:	4808      	ldr	r0, [pc, #32]	; (80002bc <LCD_voidMainScreen+0x54>)
 800029a:	f000 f9d2 	bl	8000642 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("1-Admin Options"));
 800029e:	490a      	ldr	r1, [pc, #40]	; (80002c8 <LCD_voidMainScreen+0x60>)
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <LCD_voidMainScreen+0x54>)
 80002a2:	f000 f9a2 	bl	80005ea <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 80002a6:	2203      	movs	r2, #3
 80002a8:	2100      	movs	r1, #0
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <LCD_voidMainScreen+0x54>)
 80002ac:	f000 f9c9 	bl	8000642 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("2-Garage Statues"));
 80002b0:	4906      	ldr	r1, [pc, #24]	; (80002cc <LCD_voidMainScreen+0x64>)
 80002b2:	4802      	ldr	r0, [pc, #8]	; (80002bc <LCD_voidMainScreen+0x54>)
 80002b4:	f000 f999 	bl	80005ea <LCD_voidSendString>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000030 	.word	0x20000030
 80002c0:	08000dd8 	.word	0x08000dd8
 80002c4:	08000de8 	.word	0x08000de8
 80002c8:	08000dfc 	.word	0x08000dfc
 80002cc:	08000e0c 	.word	0x08000e0c

080002d0 <LCD_AddDriver>:
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK ) ;
}


static void LCD_AddDriver(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 80002d4:	210c      	movs	r1, #12
 80002d6:	480c      	ldr	r0, [pc, #48]	; (8000308 <LCD_AddDriver+0x38>)
 80002d8:	f000 f9a4 	bl	8000624 <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 80002dc:	480a      	ldr	r0, [pc, #40]	; (8000308 <LCD_AddDriver+0x38>)
 80002de:	f000 f9e5 	bl	80006ac <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80002e2:	490a      	ldr	r1, [pc, #40]	; (800030c <LCD_AddDriver+0x3c>)
 80002e4:	4808      	ldr	r0, [pc, #32]	; (8000308 <LCD_AddDriver+0x38>)
 80002e6:	f000 f980 	bl	80005ea <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2100      	movs	r1, #0
 80002ee:	4806      	ldr	r0, [pc, #24]	; (8000308 <LCD_AddDriver+0x38>)
 80002f0:	f000 f9a7 	bl	8000642 <LCD_voidGotoXY>
	AddinggBar(&myLCD,100,1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2164      	movs	r1, #100	; 0x64
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <LCD_AddDriver+0x38>)
 80002fa:	f7ff ff69 	bl	80001d0 <AddinggBar>
	LCD_voidMainScreen();
 80002fe:	f7ff ffb3 	bl	8000268 <LCD_voidMainScreen>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000030 	.word	0x20000030
 800030c:	08000dd8 	.word	0x08000dd8

08000310 <ECU3_Dashboard_APP_SETUP>:
*******************************************************************************/


/*				MAIN FCNs				*/
void ECU3_Dashboard_APP_SETUP(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	/*			Init MCU Clock			*/
	RCC_voidInitSysClocks();
 8000314:	f000 fc48 	bl	8000ba8 <RCC_voidInitSysClocks>
	RCC_voidEnableClock(RCC_APB2,PORTA );
 8000318:	2102      	movs	r1, #2
 800031a:	2002      	movs	r0, #2
 800031c:	f000 fc04 	bl	8000b28 <RCC_voidEnableClock>
	
	/*			MCAL					*/
	//SPI_voidSetup() ;

	/*			HAL					*/
	LCD_voidSetup();
 8000320:	f7ff ff42 	bl	80001a8 <LCD_voidSetup>
	LCD_AddDriver();
 8000324:	f7ff ffd4 	bl	80002d0 <LCD_AddDriver>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <xDelay>:
#define WAIT_MS(x) xDelay(x)



static void xDelay(u32 time)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	e00c      	b.n	8000354 <xDelay+0x28>
		for(j = 1000;j > 0;j--);
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	e002      	b.n	8000348 <xDelay+0x1c>
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	3b01      	subs	r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f9      	bne.n	8000342 <xDelay+0x16>
	for(i = time;i > 0;i--)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3b01      	subs	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ef      	bne.n	800033a <xDelay+0xe>

}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <LCD_voidInit>:
* Function Definitions
*******************************************************************************/


void LCD_voidInit(LCD_Config* ptr_cfg)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
		
        /********************************** END OF INITILIZATION *****************************************************/      
	#elif LCD_Mode == _4_WIRE_MODE
        // Init D3 --> D7 
        GPIO_voidSetPinDirection(_4_D4_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB4
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	3304      	adds	r3, #4
 8000372:	7818      	ldrb	r0, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	3305      	adds	r3, #5
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2202      	movs	r2, #2
 800037e:	4619      	mov	r1, r3
 8000380:	f000 fab6 	bl	80008f0 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D5_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB5
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	3306      	adds	r3, #6
 800038a:	7818      	ldrb	r0, [r3, #0]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	3307      	adds	r3, #7
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2202      	movs	r2, #2
 8000396:	4619      	mov	r1, r3
 8000398:	f000 faaa 	bl	80008f0 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D6_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB6
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	3308      	adds	r3, #8
 80003a2:	7818      	ldrb	r0, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	3309      	adds	r3, #9
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2202      	movs	r2, #2
 80003ae:	4619      	mov	r1, r3
 80003b0:	f000 fa9e 	bl	80008f0 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D7_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB7
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	330a      	adds	r3, #10
 80003ba:	7818      	ldrb	r0, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	330b      	adds	r3, #11
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2202      	movs	r2, #2
 80003c6:	4619      	mov	r1, r3
 80003c8:	f000 fa92 	bl	80008f0 <GPIO_voidSetPinDirection>
		 
        GPIO_voidSetPinDirection(RS_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //RS
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	3302      	adds	r3, #2
 80003d2:	7818      	ldrb	r0, [r3, #0]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	3303      	adds	r3, #3
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2202      	movs	r2, #2
 80003de:	4619      	mov	r1, r3
 80003e0:	f000 fa86 	bl	80008f0 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(EN_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //EN
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	7818      	ldrb	r0, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2202      	movs	r2, #2
 80003f4:	4619      	mov	r1, r3
 80003f6:	f000 fa7b 	bl	80008f0 <GPIO_voidSetPinDirection>
		
		LCD_voidWriteCmd(ptr_cfg , LCD_RETURN_HOME) ;
 80003fa:	2102      	movs	r1, #2
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 f999 	bl	8000734 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_FUNCTION_4BIT_2LINES) ;
 8000402:	2128      	movs	r1, #40	; 0x28
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f000 f995 	bl	8000734 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_CLEAR_SCREEN) ;
 800040a:	2101      	movs	r1, #1
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f991 	bl	8000734 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_DISP_ON_CURSOR_BLINK) ;
 8000412:	210f      	movs	r1, #15
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f000 f98d 	bl	8000734 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f989 	bl	8000734 <LCD_voidWriteCmd>
		/********************************** END OF INITILIZATION *****************************************************/    
	#endif
	WAIT_MS(2);
 8000422:	2002      	movs	r0, #2
 8000424:	f7ff ff82 	bl	800032c <xDelay>
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <LCD_voidSendChar>:
void LCD_voidSendChar(LCD_Config* ptrCnfg , u8 copy_u8data)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]
        GPIO_voidSetPinValue(_8_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
		WRITE_DATA_TO_LCD(ptrCnfg);
#elif LCD_Mode == _4_WIRE_MODE
		// Add data in Data Line
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,4));  //DB4
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	3304      	adds	r3, #4
 8000442:	7818      	ldrb	r0, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	3305      	adds	r3, #5
 800044a:	7819      	ldrb	r1, [r3, #0]
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	091b      	lsrs	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	b2db      	uxtb	r3, r3
 8000458:	461a      	mov	r2, r3
 800045a:	f000 fb0f 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,5));  //DB5
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	3306      	adds	r3, #6
 8000464:	7818      	ldrb	r0, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	3307      	adds	r3, #7
 800046c:	7819      	ldrb	r1, [r3, #0]
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	095b      	lsrs	r3, r3, #5
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	b2db      	uxtb	r3, r3
 800047a:	461a      	mov	r2, r3
 800047c:	f000 fafe 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,6));  //DB6
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	3308      	adds	r3, #8
 8000486:	7818      	ldrb	r0, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	3309      	adds	r3, #9
 800048e:	7819      	ldrb	r1, [r3, #0]
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	099b      	lsrs	r3, r3, #6
 8000494:	b2db      	uxtb	r3, r3
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	f000 faed 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	330a      	adds	r3, #10
 80004a8:	7818      	ldrb	r0, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	330b      	adds	r3, #11
 80004b0:	7819      	ldrb	r1, [r3, #0]
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	09db      	lsrs	r3, r3, #7
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	f000 fadf 	bl	8000a7c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	3302      	adds	r3, #2
 80004c4:	7818      	ldrb	r0, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	3303      	adds	r3, #3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	f000 fad3 	bl	8000a7c <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	7818      	ldrb	r0, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	f000 fac8 	bl	8000a7c <GPIO_voidSetPinValue>
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ff1d 	bl	800032c <xDelay>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	7818      	ldrb	r0, [r3, #0]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	3301      	adds	r3, #1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	f000 faba 	bl	8000a7c <GPIO_voidSetPinValue>
 8000508:	2014      	movs	r0, #20
 800050a:	f7ff ff0f 	bl	800032c <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,0));  //DB4
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	3304      	adds	r3, #4
 8000514:	7818      	ldrb	r0, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	3305      	adds	r3, #5
 800051c:	7819      	ldrb	r1, [r3, #0]
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	f000 faa8 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,1));  //DB5
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3306      	adds	r3, #6
 8000532:	7818      	ldrb	r0, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	3307      	adds	r3, #7
 800053a:	7819      	ldrb	r1, [r3, #0]
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	085b      	lsrs	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f000 fa97 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,2));  //DB6
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	3308      	adds	r3, #8
 8000554:	7818      	ldrb	r0, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	3309      	adds	r3, #9
 800055c:	7819      	ldrb	r1, [r3, #0]
 800055e:	78fb      	ldrb	r3, [r7, #3]
 8000560:	089b      	lsrs	r3, r3, #2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	f000 fa86 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,3));  //DB7 
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	330a      	adds	r3, #10
 8000576:	7818      	ldrb	r0, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	330b      	adds	r3, #11
 800057e:	7819      	ldrb	r1, [r3, #0]
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	08db      	lsrs	r3, r3, #3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	f000 fa75 	bl	8000a7c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	3302      	adds	r3, #2
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	3303      	adds	r3, #3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	f000 fa69 	bl	8000a7c <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	7818      	ldrb	r0, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	f000 fa5e 	bl	8000a7c <GPIO_voidSetPinValue>
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff feb3 	bl	800032c <xDelay>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	7818      	ldrb	r0, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f000 fa50 	bl	8000a7c <GPIO_voidSetPinValue>
 80005dc:	2014      	movs	r0, #20
 80005de:	f7ff fea5 	bl	800032c <xDelay>
#endif
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <LCD_voidSendString>:

void LCD_voidSendString(LCD_Config* ptrCnfg , u8* ptr_u8data)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
	u8 index =0 ; 
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 80005f8:	e00a      	b.n	8000610 <LCD_voidSendString+0x26>
	{
		LCD_voidSendChar(ptrCnfg,ptr_u8data[index]);
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff13 	bl	8000430 <LCD_voidSendChar>
		index++;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	3301      	adds	r3, #1
 800060e:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1ee      	bne.n	80005fa <LCD_voidSendString+0x10>
	}
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <LCD_voidSetCursorType>:
{
	
		
}
void LCD_voidSetCursorType(LCD_Config*  ptrLCD ,cursorType copy_cursorType)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
	LCD_voidWriteCmd(ptrLCD, copy_cursorType) ;
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	4619      	mov	r1, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f87d 	bl	8000734 <LCD_voidWriteCmd>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <LCD_voidGotoXY>:
	}
			
		
}
void LCD_voidGotoXY(LCD_Config* ptrCnfg , u8 x , u8 y)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	70fb      	strb	r3, [r7, #3]
 800064e:	4613      	mov	r3, r2
 8000650:	70bb      	strb	r3, [r7, #2]
	 | DDRAM     | 0x40
	 |           |			for Row 1 and in between 0x40 -> 0x4f select Col
	 |           |	
	 |           | 0x4f	
	*/
	u8 address = 0 ; 
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
	if( y < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Rows) && x < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Cols) )
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	78ba      	ldrb	r2, [r7, #2]
 800065c:	429a      	cmp	r2, r3
 800065e:	d221      	bcs.n	80006a4 <LCD_voidGotoXY+0x62>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	78fa      	ldrb	r2, [r7, #3]
 8000666:	429a      	cmp	r2, r3
 8000668:	d21c      	bcs.n	80006a4 <LCD_voidGotoXY+0x62>
		 *	RS 0
		 *  RW 0 --> 0 by default
		 *  D7 1
		 * ADD
		 */	
		if(y  < 2 )
 800066a:	78bb      	ldrb	r3, [r7, #2]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d806      	bhi.n	800067e <LCD_voidGotoXY+0x3c>
		{
			 address = y * 0x40 + x;		/*	If 0 --> Row 1 , If 0x40 Row 2	*/
 8000670:	78bb      	ldrb	r3, [r7, #2]
 8000672:	019b      	lsls	r3, r3, #6
 8000674:	b2da      	uxtb	r2, r3
 8000676:	78fb      	ldrb	r3, [r7, #3]
 8000678:	4413      	add	r3, r2
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e009      	b.n	8000692 <LCD_voidGotoXY+0x50>
		}
		else
		{
			address = (y-2) * 0x40 + 0x10  + x;
 800067e:	78bb      	ldrb	r3, [r7, #2]
 8000680:	3302      	adds	r3, #2
 8000682:	b2db      	uxtb	r3, r3
 8000684:	019b      	lsls	r3, r3, #6
 8000686:	b2da      	uxtb	r2, r3
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	4413      	add	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	3310      	adds	r3, #16
 8000690:	73fb      	strb	r3, [r7, #15]

		}
		address |= (1 << 7) ;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	73fb      	strb	r3, [r7, #15]


		LCD_voidWriteCmd(ptrCnfg , address);
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f848 	bl	8000734 <LCD_voidWriteCmd>

		
	}

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <LCD_voidClear>:
void LCD_voidClear(LCD_Config* x)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	LCD_voidWriteCmd(x,LCD_CLEAR_SCREEN);	
 80006b4:	2101      	movs	r1, #1
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f83c 	bl	8000734 <LCD_voidWriteCmd>
	WAIT_MS(1);		
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fe35 	bl	800032c <xDelay>
	LCD_voidWriteCmd(x , LCD_BEGIN_AT_FIRST_ROW) ;
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f835 	bl	8000734 <LCD_voidWriteCmd>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LCD_voidStoreCustomChar>:
void LCD_voidStoreCustomChar(LCD_Config*  ptrLCD ,u8* ptrToArray, u8 copy_u8CharIndex)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	4613      	mov	r3, r2
 80006de:	71fb      	strb	r3, [r7, #7]
	u8 address = 0 ,index ; 
 80006e0:	2300      	movs	r3, #0
 80006e2:	75bb      	strb	r3, [r7, #22]
	/*		Have 8 Places Only for Custom Char Can Store in CGRAM	*/
	if(copy_u8CharIndex < 8 )
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d820      	bhi.n	800072c <LCD_voidStoreCustomChar+0x5a>
	{
		address = copy_u8CharIndex * 0x08 ;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	75bb      	strb	r3, [r7, #22]
		*		RW = 0 
		*		D7 = 0 
		*		D6 = 1
		*		D0:D6 Address
		*/
		address |= (1<<6) ; 
 80006f0:	7dbb      	ldrb	r3, [r7, #22]
 80006f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f6:	75bb      	strb	r3, [r7, #22]
		LCD_voidWriteCmd(ptrLCD,address);
 80006f8:	7dbb      	ldrb	r3, [r7, #22]
 80006fa:	4619      	mov	r1, r3
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 f819 	bl	8000734 <LCD_voidWriteCmd>
		for(index = 0 ; index < 8 ; index++)
 8000702:	2300      	movs	r3, #0
 8000704:	75fb      	strb	r3, [r7, #23]
 8000706:	e00a      	b.n	800071e <LCD_voidStoreCustomChar+0x4c>
		{
			LCD_voidSendChar(ptrLCD,ptrToArray[index]);
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff fe8c 	bl	8000430 <LCD_voidSendChar>
		for(index = 0 ; index < 8 ; index++)
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	3301      	adds	r3, #1
 800071c:	75fb      	strb	r3, [r7, #23]
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	2b07      	cmp	r3, #7
 8000722:	d9f1      	bls.n	8000708 <LCD_voidStoreCustomChar+0x36>
		}
		// Restore point to DDRAM OPTIONAL by default display from DDRAM
		LCD_voidWriteCmd(ptrLCD,LCD_RETURN_HOME);
 8000724:	2102      	movs	r1, #2
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f804 	bl	8000734 <LCD_voidWriteCmd>
		
	}
	
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <LCD_voidWriteCmd>:



/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	3304      	adds	r3, #4
 8000746:	7818      	ldrb	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	3305      	adds	r3, #5
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	091b      	lsrs	r3, r3, #4
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	f000 f98d 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	3306      	adds	r3, #6
 8000768:	7818      	ldrb	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	3307      	adds	r3, #7
 8000770:	7819      	ldrb	r1, [r3, #0]
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	095b      	lsrs	r3, r3, #5
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	f000 f97c 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	3308      	adds	r3, #8
 800078a:	7818      	ldrb	r0, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	3309      	adds	r3, #9
 8000792:	7819      	ldrb	r1, [r3, #0]
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	099b      	lsrs	r3, r3, #6
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	f000 f96b 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	330a      	adds	r3, #10
 80007ac:	7818      	ldrb	r0, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	330b      	adds	r3, #11
 80007b4:	7819      	ldrb	r1, [r3, #0]
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	09db      	lsrs	r3, r3, #7
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	f000 f95d 	bl	8000a7c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	3302      	adds	r3, #2
 80007c8:	7818      	ldrb	r0, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	3303      	adds	r3, #3
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f000 f951 	bl	8000a7c <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	7818      	ldrb	r0, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	3301      	adds	r3, #1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f000 f946 	bl	8000a7c <GPIO_voidSetPinValue>
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fd9b 	bl	800032c <xDelay>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	7818      	ldrb	r0, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	f000 f938 	bl	8000a7c <GPIO_voidSetPinValue>
 800080c:	2014      	movs	r0, #20
 800080e:	f7ff fd8d 	bl	800032c <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	3304      	adds	r3, #4
 8000818:	7818      	ldrb	r0, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	3305      	adds	r3, #5
 8000820:	7819      	ldrb	r1, [r3, #0]
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	f000 f926 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	3306      	adds	r3, #6
 8000836:	7818      	ldrb	r0, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	3307      	adds	r3, #7
 800083e:	7819      	ldrb	r1, [r3, #0]
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	f000 f915 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	3308      	adds	r3, #8
 8000858:	7818      	ldrb	r0, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	3309      	adds	r3, #9
 8000860:	7819      	ldrb	r1, [r3, #0]
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	f000 f904 	bl	8000a7c <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	330a      	adds	r3, #10
 800087a:	7818      	ldrb	r0, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	330b      	adds	r3, #11
 8000882:	7819      	ldrb	r1, [r3, #0]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	f000 f8f3 	bl	8000a7c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	3302      	adds	r3, #2
 800089c:	7818      	ldrb	r0, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	3303      	adds	r3, #3
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	f000 f8e7 	bl	8000a7c <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	7818      	ldrb	r0, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	f000 f8dc 	bl	8000a7c <GPIO_voidSetPinValue>
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fd31 	bl	800032c <xDelay>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	7818      	ldrb	r0, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	f000 f8ce 	bl	8000a7c <GPIO_voidSetPinValue>
 80008e0:	2014      	movs	r0, #20
 80008e2:	f7ff fd23 	bl	800032c <xDelay>

#endif
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	460b      	mov	r3, r1
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	4613      	mov	r3, r2
 8000900:	717b      	strb	r3, [r7, #5]
    switch(Copy_u8Port)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d03e      	beq.n	8000986 <GPIO_voidSetPinDirection+0x96>
 8000908:	2b04      	cmp	r3, #4
 800090a:	d075      	beq.n	80009f8 <GPIO_voidSetPinDirection+0x108>
 800090c:	2b02      	cmp	r3, #2
 800090e:	d000      	beq.n	8000912 <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 8000910:	e0a9      	b.n	8000a66 <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	2b07      	cmp	r3, #7
 8000916:	d817      	bhi.n	8000948 <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 8000918:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	79ba      	ldrb	r2, [r7, #6]
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	210f      	movs	r1, #15
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	43d2      	mvns	r2, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a51      	ldr	r2, [pc, #324]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 800092c:	400b      	ands	r3, r1
 800092e:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000930:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	7979      	ldrb	r1, [r7, #5]
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a4b      	ldr	r2, [pc, #300]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 8000942:	430b      	orrs	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
			break;
 8000946:	e089      	b.n	8000a5c <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	f200 8086 	bhi.w	8000a5c <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	3b08      	subs	r3, #8
 8000954:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 8000956:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	210f      	movs	r1, #15
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	43d2      	mvns	r2, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4a41      	ldr	r2, [pc, #260]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 800096a:	400b      	ands	r3, r1
 800096c:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 800096e:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	7979      	ldrb	r1, [r7, #5]
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	4611      	mov	r1, r2
 800097e:	4a3c      	ldr	r2, [pc, #240]	; (8000a70 <GPIO_voidSetPinDirection+0x180>)
 8000980:	430b      	orrs	r3, r1
 8000982:	6053      	str	r3, [r2, #4]
			break;
 8000984:	e06a      	b.n	8000a5c <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d817      	bhi.n	80009bc <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 800098c:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	210f      	movs	r1, #15
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	4611      	mov	r1, r2
 800099e:	4a35      	ldr	r2, [pc, #212]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009a0:	400b      	ands	r3, r1
 80009a2:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 80009a4:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	7979      	ldrb	r1, [r7, #5]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6013      	str	r3, [r2, #0]
			break;
 80009ba:	e051      	b.n	8000a60 <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	d84e      	bhi.n	8000a60 <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	3b08      	subs	r3, #8
 80009c6:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	79ba      	ldrb	r2, [r7, #6]
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	210f      	movs	r1, #15
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	43d2      	mvns	r2, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009dc:	400b      	ands	r3, r1
 80009de:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	7979      	ldrb	r1, [r7, #5]
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <GPIO_voidSetPinDirection+0x184>)
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6053      	str	r3, [r2, #4]
			break;
 80009f6:	e033      	b.n	8000a60 <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d810      	bhi.n	8000a20 <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	7979      	ldrb	r1, [r7, #5]
 8000a0e:	79ba      	ldrb	r2, [r7, #6]
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	4611      	mov	r1, r2
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	6013      	str	r3, [r2, #0]
			break;
 8000a1e:	e021      	b.n	8000a64 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d81e      	bhi.n	8000a64 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	79ba      	ldrb	r2, [r7, #6]
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	210f      	movs	r1, #15
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a40:	400b      	ands	r3, r1
 8000a42:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	7979      	ldrb	r1, [r7, #5]
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	4611      	mov	r1, r2
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <GPIO_voidSetPinDirection+0x188>)
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6053      	str	r3, [r2, #4]
			break;
 8000a5a:	e003      	b.n	8000a64 <GPIO_voidSetPinDirection+0x174>
			break;
 8000a5c:	bf00      	nop
 8000a5e:	e002      	b.n	8000a66 <GPIO_voidSetPinDirection+0x176>
			break;
 8000a60:	bf00      	nop
 8000a62:	e000      	b.n	8000a66 <GPIO_voidSetPinDirection+0x176>
			break;
 8000a64:	bf00      	nop
	}

}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40011000 	.word	0x40011000

08000a7c <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	460b      	mov	r3, r1
 8000a88:	71bb      	strb	r3, [r7, #6]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d017      	beq.n	8000ac4 <GPIO_voidSetPinValue+0x48>
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d028      	beq.n	8000aea <GPIO_voidSetPinValue+0x6e>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d000      	beq.n	8000a9e <GPIO_voidSetPinValue+0x22>
					break ; 
			}	
			break ;
		default :
		//error
			break ;
 8000a9c:	e038      	b.n	8000b10 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d008      	beq.n	8000ab6 <GPIO_voidSetPinValue+0x3a>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d000      	beq.n	8000aaa <GPIO_voidSetPinValue+0x2e>
					break ; 
 8000aa8:	e00b      	b.n	8000ac2 <GPIO_voidSetPinValue+0x46>
					GPIOA->BSRR = (1 << Copy_Pin);
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	2201      	movs	r2, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <GPIO_voidSetPinValue+0xa0>)
 8000ab2:	611a      	str	r2, [r3, #16]
					break ;
 8000ab4:	e005      	b.n	8000ac2 <GPIO_voidSetPinValue+0x46>
					GPIOA->BRR = (1 << Copy_Pin);
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	409a      	lsls	r2, r3
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <GPIO_voidSetPinValue+0xa0>)
 8000abe:	615a      	str	r2, [r3, #20]
					break ;
 8000ac0:	bf00      	nop
			break ; 
 8000ac2:	e025      	b.n	8000b10 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000ac4:	797b      	ldrb	r3, [r7, #5]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d008      	beq.n	8000adc <GPIO_voidSetPinValue+0x60>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d000      	beq.n	8000ad0 <GPIO_voidSetPinValue+0x54>
					break ; 
 8000ace:	e00b      	b.n	8000ae8 <GPIO_voidSetPinValue+0x6c>
					GPIOB->BSRR = (1 << Copy_Pin);
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <GPIO_voidSetPinValue+0xa4>)
 8000ad8:	611a      	str	r2, [r3, #16]
					break ;
 8000ada:	e005      	b.n	8000ae8 <GPIO_voidSetPinValue+0x6c>
					GPIOB->BRR = (1 << Copy_Pin);
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <GPIO_voidSetPinValue+0xa4>)
 8000ae4:	615a      	str	r2, [r3, #20]
					break ;
 8000ae6:	bf00      	nop
			break ;
 8000ae8:	e012      	b.n	8000b10 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000aea:	797b      	ldrb	r3, [r7, #5]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <GPIO_voidSetPinValue+0x86>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d000      	beq.n	8000af6 <GPIO_voidSetPinValue+0x7a>
					break ; 
 8000af4:	e00b      	b.n	8000b0e <GPIO_voidSetPinValue+0x92>
					GPIOC->BSRR = (1 << Copy_Pin);
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	2201      	movs	r2, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <GPIO_voidSetPinValue+0xa8>)
 8000afe:	611a      	str	r2, [r3, #16]
					break ;
 8000b00:	e005      	b.n	8000b0e <GPIO_voidSetPinValue+0x92>
					GPIOC->BRR = (1 << Copy_Pin);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	2201      	movs	r2, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <GPIO_voidSetPinValue+0xa8>)
 8000b0a:	615a      	str	r2, [r3, #20]
					break ;
 8000b0c:	bf00      	nop
			break ;
 8000b0e:	bf00      	nop
	}

}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000

08000b28 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b1f      	cmp	r3, #31
 8000b3c:	d828      	bhi.n	8000b90 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d00f      	beq.n	8000b64 <RCC_voidEnableClock+0x3c>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d018      	beq.n	8000b7a <RCC_voidEnableClock+0x52>
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d000      	beq.n	8000b4e <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8000b4c:	e020      	b.n	8000b90 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <RCC_voidEnableClock+0x74>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	2101      	movs	r1, #1
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <RCC_voidEnableClock+0x74>)
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e015      	b.n	8000b90 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <RCC_voidEnableClock+0x78>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	79ba      	ldrb	r2, [r7, #6]
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <RCC_voidEnableClock+0x78>)
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e00a      	b.n	8000b90 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <RCC_voidEnableClock+0x7c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	79ba      	ldrb	r2, [r7, #6]
 8000b80:	2101      	movs	r1, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <RCC_voidEnableClock+0x7c>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	bf00      	nop
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021014 	.word	0x40021014
 8000ba0:	4002101c 	.word	0x4002101c
 8000ba4:	40021018 	.word	0x40021018

08000ba8 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
			   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
			#endif
			RCC_CFGR |= RCC_CFGR_PLLXTPRE_HSE_Div2;
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE
				#if   RCC_PLL_HSE == RCC_PLL_HSE_CRYSTAL
					SET_BIT(RCC_CR, RCC_CR_CSSON);
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc2:	6013      	str	r3, [r2, #0]
					SET_BIT(RCC_CR, RCC_CR_HSEON);
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
 8000bd0:	bf00      	nop
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	0c5b      	lsrs	r3, r3, #17
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f8      	beq.n	8000bd2 <RCC_voidInitSysClocks+0x2a>
				   #warning("Wrong PLL input from HSE...Crystal is default")
				   SET_BIT(RCC_CR, RCC_CR_CSSON);
				   SET_BIT(RCC_CR, RCC_CR_HSEON);
				   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
				#endif
				RCC_CFGR |= RCC_CFGR_PLLSRC_HSE;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
		#endif
			/***************************** SET MUX VAL	***********************************/
				RCC_CFGR |= RCC_PLL_MUL_VAL ;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bfe:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC_CR, RCC_CR_PLLRDY)));
 8000c00:	bf00      	nop
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <RCC_voidInitSysClocks+0x94>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	0e5b      	lsrs	r3, r3, #25
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0f8      	beq.n	8000c02 <RCC_voidInitSysClocks+0x5a>
			RCC_CFGR |= RCC_CFGR_SW_PLL;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c26:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <RCC_voidInitSysClocks+0x98>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40021004 	.word	0x40021004

08000c44 <SPI1_IRQHandler>:
	}
}
/*************************************	IRQ	************************************************/

void SPI1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <SPI1_IRQHandler+0x54>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	085b      	lsrs	r3, r3, #1
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	793b      	ldrb	r3, [r7, #4]
 8000c58:	f362 0300 	bfi	r3, r2, #0, #1
 8000c5c:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <SPI1_IRQHandler+0x54>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	793b      	ldrb	r3, [r7, #4]
 8000c6a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c6e:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <SPI1_IRQHandler+0x54>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	793b      	ldrb	r3, [r7, #4]
 8000c7e:	f362 0382 	bfi	r3, r2, #2, #1
 8000c82:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[0]->P_IRQ_CallBack(irq_src);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SPI1_IRQHandler+0x58>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	7938      	ldrb	r0, [r7, #4]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40013000 	.word	0x40013000
 8000c9c:	20000038 	.word	0x20000038

08000ca0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <SPI2_IRQHandler+0x54>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	793b      	ldrb	r3, [r7, #4]
 8000cb4:	f362 0300 	bfi	r3, r2, #0, #1
 8000cb8:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <SPI2_IRQHandler+0x54>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	793b      	ldrb	r3, [r7, #4]
 8000cc6:	f362 0341 	bfi	r3, r2, #1, #1
 8000cca:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <SPI2_IRQHandler+0x54>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	793b      	ldrb	r3, [r7, #4]
 8000cda:	f362 0382 	bfi	r3, r2, #2, #1
 8000cde:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[1]->P_IRQ_CallBack(irq_src);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SPI2_IRQHandler+0x58>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	7938      	ldrb	r0, [r7, #4]
 8000ce8:	4798      	blx	r3
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	20000038 	.word	0x20000038

08000cfc <main>:




u8 c ;
int main(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0




	ECU3_Dashboard_APP_SETUP();
 8000d00:	f7ff fb06 	bl	8000310 <ECU3_Dashboard_APP_SETUP>
	while(1)
 8000d04:	e7fe      	b.n	8000d04 <main+0x8>
	...

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d36:	f000 f811 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3a:	f7ff ffdf 	bl	8000cfc <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d4c:	08000e98 	.word	0x08000e98
  ldr r2, =_sbss
 8000d50:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d54:	20000040 	.word	0x20000040

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	2500      	movs	r5, #0
 8000d60:	4e0c      	ldr	r6, [pc, #48]	; (8000d94 <__libc_init_array+0x38>)
 8000d62:	4c0d      	ldr	r4, [pc, #52]	; (8000d98 <__libc_init_array+0x3c>)
 8000d64:	1ba4      	subs	r4, r4, r6
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	f000 f81a 	bl	8000da4 <_init>
 8000d70:	2500      	movs	r5, #0
 8000d72:	4e0a      	ldr	r6, [pc, #40]	; (8000d9c <__libc_init_array+0x40>)
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <__libc_init_array+0x44>)
 8000d76:	1ba4      	subs	r4, r4, r6
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d84:	4798      	blx	r3
 8000d86:	3501      	adds	r5, #1
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d8e:	4798      	blx	r3
 8000d90:	3501      	adds	r5, #1
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	08000e90 	.word	0x08000e90
 8000d98:	08000e90 	.word	0x08000e90
 8000d9c:	08000e90 	.word	0x08000e90
 8000da0:	08000e94 	.word	0x08000e94

08000da4 <_init>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr

08000db0 <_fini>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr
