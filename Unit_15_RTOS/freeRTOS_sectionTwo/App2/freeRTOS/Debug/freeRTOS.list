
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002094  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  2000000c  0800220c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002168  0800220c  00022168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d87  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000101d  00000000  00000000  00025dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00026de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  00027290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c78  00000000  00000000  000276a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003cf4  00000000  00000000  0002a320  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001102b  00000000  00000000  0002e014  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003f03f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011b4  00000000  00000000  0003f0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080021ac 	.word	0x080021ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080021ac 	.word	0x080021ac

08000170 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b1f      	cmp	r3, #31
 8000184:	d828      	bhi.n	80001d8 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d00f      	beq.n	80001ac <RCC_voidEnableClock+0x3c>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d018      	beq.n	80001c2 <RCC_voidEnableClock+0x52>
 8000190:	2b00      	cmp	r3, #0
 8000192:	d000      	beq.n	8000196 <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8000194:	e020      	b.n	80001d8 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8000196:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <RCC_voidEnableClock+0x74>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	79ba      	ldrb	r2, [r7, #6]
 800019c:	2101      	movs	r1, #1
 800019e:	fa01 f202 	lsl.w	r2, r1, r2
 80001a2:	4611      	mov	r1, r2
 80001a4:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <RCC_voidEnableClock+0x74>)
 80001a6:	430b      	orrs	r3, r1
 80001a8:	6013      	str	r3, [r2, #0]
 80001aa:	e015      	b.n	80001d8 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <RCC_voidEnableClock+0x78>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	79ba      	ldrb	r2, [r7, #6]
 80001b2:	2101      	movs	r1, #1
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <RCC_voidEnableClock+0x78>)
 80001bc:	430b      	orrs	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
 80001c0:	e00a      	b.n	80001d8 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80001c2:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	79ba      	ldrb	r2, [r7, #6]
 80001c8:	2101      	movs	r1, #1
 80001ca:	fa01 f202 	lsl.w	r2, r1, r2
 80001ce:	4611      	mov	r1, r2
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001d2:	430b      	orrs	r3, r1
 80001d4:	6013      	str	r3, [r2, #0]
 80001d6:	bf00      	nop
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021014 	.word	0x40021014
 80001e8:	4002101c 	.word	0x4002101c
 80001ec:	40021018 	.word	0x40021018

080001f0 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80001f4:	4b23      	ldr	r3, [pc, #140]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 80001f6:	2280      	movs	r2, #128	; 0x80
 80001f8:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
			   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
			#endif
			RCC_CFGR |= RCC_CFGR_PLLXTPRE_HSE_Div2;
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE
				#if   RCC_PLL_HSE == RCC_PLL_HSE_CRYSTAL
					SET_BIT(RCC_CR, RCC_CR_CSSON);
 8000200:	4b20      	ldr	r3, [pc, #128]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800020a:	6013      	str	r3, [r2, #0]
					SET_BIT(RCC_CR, RCC_CR_HSEON);
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000216:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
 8000218:	bf00      	nop
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	0c5b      	lsrs	r3, r3, #17
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0f8      	beq.n	800021a <RCC_voidInitSysClocks+0x2a>
				   #warning("Wrong PLL input from HSE...Crystal is default")
				   SET_BIT(RCC_CR, RCC_CR_CSSON);
				   SET_BIT(RCC_CR, RCC_CR_HSEON);
				   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
				#endif
				RCC_CFGR |= RCC_CFGR_PLLSRC_HSE;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800022e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000232:	6013      	str	r3, [r2, #0]
		#endif
			/***************************** SET MUX VAL	***********************************/
				RCC_CFGR |= RCC_PLL_MUL_VAL ;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a10      	ldr	r2, [pc, #64]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000246:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC_CR, RCC_CR_PLLRDY)));
 8000248:	bf00      	nop
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	0e5b      	lsrs	r3, r3, #25
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f8      	beq.n	800024a <RCC_voidInitSysClocks+0x5a>
			RCC_CFGR |= RCC_CFGR_SW_PLL;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000266:	4a08      	ldr	r2, [pc, #32]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000276:	4a04      	ldr	r2, [pc, #16]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000
 8000288:	40021004 	.word	0x40021004

0800028c <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	460b      	mov	r3, r1
 8000298:	71bb      	strb	r3, [r7, #6]
 800029a:	4613      	mov	r3, r2
 800029c:	717b      	strb	r3, [r7, #5]
    	switch(Copy_u8Port)
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d03e      	beq.n	8000322 <GPIO_voidSetPinDirection+0x96>
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d075      	beq.n	8000394 <GPIO_voidSetPinDirection+0x108>
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d000      	beq.n	80002ae <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 80002ac:	e0a9      	b.n	8000402 <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d817      	bhi.n	80002e4 <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 80002b4:	4b55      	ldr	r3, [pc, #340]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	79ba      	ldrb	r2, [r7, #6]
 80002ba:	0092      	lsls	r2, r2, #2
 80002bc:	210f      	movs	r1, #15
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	43d2      	mvns	r2, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a51      	ldr	r2, [pc, #324]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002c8:	400b      	ands	r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80002cc:	4b4f      	ldr	r3, [pc, #316]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	7979      	ldrb	r1, [r7, #5]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	4611      	mov	r1, r2
 80002dc:	4a4b      	ldr	r2, [pc, #300]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	6013      	str	r3, [r2, #0]
			break;
 80002e2:	e089      	b.n	80003f8 <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b0f      	cmp	r3, #15
 80002e8:	f200 8086 	bhi.w	80003f8 <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	3b08      	subs	r3, #8
 80002f0:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 80002f2:	4b46      	ldr	r3, [pc, #280]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a41      	ldr	r2, [pc, #260]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 8000306:	400b      	ands	r3, r1
 8000308:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 800030a:	4b40      	ldr	r3, [pc, #256]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a3c      	ldr	r2, [pc, #240]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6053      	str	r3, [r2, #4]
			break;
 8000320:	e06a      	b.n	80003f8 <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d817      	bhi.n	8000358 <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8000328:	4b39      	ldr	r3, [pc, #228]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a35      	ldr	r2, [pc, #212]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800033c:	400b      	ands	r3, r1
 800033e:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a2f      	ldr	r2, [pc, #188]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
			break;
 8000356:	e051      	b.n	80003fc <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2b0f      	cmp	r3, #15
 800035c:	d84e      	bhi.n	80003fc <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3b08      	subs	r3, #8
 8000362:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	210f      	movs	r1, #15
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a26      	ldr	r2, [pc, #152]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000378:	400b      	ands	r3, r1
 800037a:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	7979      	ldrb	r1, [r7, #5]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800038e:	430b      	orrs	r3, r1
 8000390:	6053      	str	r3, [r2, #4]
			break;
 8000392:	e033      	b.n	80003fc <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	2b07      	cmp	r3, #7
 8000398:	d810      	bhi.n	80003bc <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	7979      	ldrb	r1, [r7, #5]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	0092      	lsls	r2, r2, #2
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a17      	ldr	r2, [pc, #92]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
			break;
 80003ba:	e021      	b.n	8000400 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	2b0f      	cmp	r3, #15
 80003c0:	d81e      	bhi.n	8000400 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	3b08      	subs	r3, #8
 80003c6:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	79ba      	ldrb	r2, [r7, #6]
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	210f      	movs	r1, #15
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003dc:	400b      	ands	r3, r1
 80003de:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	7979      	ldrb	r1, [r7, #5]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a08      	ldr	r2, [pc, #32]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6053      	str	r3, [r2, #4]
			break;
 80003f6:	e003      	b.n	8000400 <GPIO_voidSetPinDirection+0x174>
			break;
 80003f8:	bf00      	nop
 80003fa:	e002      	b.n	8000402 <GPIO_voidSetPinDirection+0x176>
			break;
 80003fc:	bf00      	nop
 80003fe:	e000      	b.n	8000402 <GPIO_voidSetPinDirection+0x176>
			break;
 8000400:	bf00      	nop
	}

}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40010800 	.word	0x40010800
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40011000 	.word	0x40011000

08000418 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	460b      	mov	r3, r1
 8000424:	71bb      	strb	r3, [r7, #6]
 8000426:	4613      	mov	r3, r2
 8000428:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d017      	beq.n	8000460 <GPIO_voidSetPinValue+0x48>
 8000430:	2b04      	cmp	r3, #4
 8000432:	d028      	beq.n	8000486 <GPIO_voidSetPinValue+0x6e>
 8000434:	2b02      	cmp	r3, #2
 8000436:	d000      	beq.n	800043a <GPIO_voidSetPinValue+0x22>
					break ; 
			}	
			break ;
		default :
		//error
			break ;
 8000438:	e038      	b.n	80004ac <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d008      	beq.n	8000452 <GPIO_voidSetPinValue+0x3a>
 8000440:	2b01      	cmp	r3, #1
 8000442:	d000      	beq.n	8000446 <GPIO_voidSetPinValue+0x2e>
					break ; 
 8000444:	e00b      	b.n	800045e <GPIO_voidSetPinValue+0x46>
					GPIOA->BSRR = (1 << Copy_Pin);
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	2201      	movs	r2, #1
 800044a:	409a      	lsls	r2, r3
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <GPIO_voidSetPinValue+0xa0>)
 800044e:	611a      	str	r2, [r3, #16]
					break ;
 8000450:	e005      	b.n	800045e <GPIO_voidSetPinValue+0x46>
					GPIOA->BRR = (1 << Copy_Pin);
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2201      	movs	r2, #1
 8000456:	409a      	lsls	r2, r3
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <GPIO_voidSetPinValue+0xa0>)
 800045a:	615a      	str	r2, [r3, #20]
					break ;
 800045c:	bf00      	nop
			break ; 
 800045e:	e025      	b.n	80004ac <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000460:	797b      	ldrb	r3, [r7, #5]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <GPIO_voidSetPinValue+0x60>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d000      	beq.n	800046c <GPIO_voidSetPinValue+0x54>
					break ; 
 800046a:	e00b      	b.n	8000484 <GPIO_voidSetPinValue+0x6c>
					GPIOB->BSRR = (1 << Copy_Pin);
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	2201      	movs	r2, #1
 8000470:	409a      	lsls	r2, r3
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <GPIO_voidSetPinValue+0xa4>)
 8000474:	611a      	str	r2, [r3, #16]
					break ;
 8000476:	e005      	b.n	8000484 <GPIO_voidSetPinValue+0x6c>
					GPIOB->BRR = (1 << Copy_Pin);
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2201      	movs	r2, #1
 800047c:	409a      	lsls	r2, r3
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <GPIO_voidSetPinValue+0xa4>)
 8000480:	615a      	str	r2, [r3, #20]
					break ;
 8000482:	bf00      	nop
			break ;
 8000484:	e012      	b.n	80004ac <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000486:	797b      	ldrb	r3, [r7, #5]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <GPIO_voidSetPinValue+0x86>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d000      	beq.n	8000492 <GPIO_voidSetPinValue+0x7a>
					break ; 
 8000490:	e00b      	b.n	80004aa <GPIO_voidSetPinValue+0x92>
					GPIOC->BSRR = (1 << Copy_Pin);
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	2201      	movs	r2, #1
 8000496:	409a      	lsls	r2, r3
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <GPIO_voidSetPinValue+0xa8>)
 800049a:	611a      	str	r2, [r3, #16]
					break ;
 800049c:	e005      	b.n	80004aa <GPIO_voidSetPinValue+0x92>
					GPIOC->BRR = (1 << Copy_Pin);
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2201      	movs	r2, #1
 80004a2:	409a      	lsls	r2, r3
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GPIO_voidSetPinValue+0xa8>)
 80004a6:	615a      	str	r2, [r3, #20]
					break ;
 80004a8:	bf00      	nop
			break ;
 80004aa:	bf00      	nop
	}

}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000

080004c4 <GPIO_voidTogglePinValue>:
		break ;
	}

}
void GPIO_voidTogglePinValue	(u8 Copy_u8Port, Pin_t Copy_Pin)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Port){
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d00f      	beq.n	80004fa <GPIO_voidTogglePinValue+0x36>
 80004da:	2b04      	cmp	r3, #4
 80004dc:	d018      	beq.n	8000510 <GPIO_voidTogglePinValue+0x4c>
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d000      	beq.n	80004e4 <GPIO_voidTogglePinValue+0x20>
		case PORTC :
			TOG_BIT(GPIOC->ODR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 80004e2:	e020      	b.n	8000526 <GPIO_voidTogglePinValue+0x62>
			TOG_BIT(GPIOA->ODR , Copy_Pin ) ;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <GPIO_voidTogglePinValue+0x6c>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <GPIO_voidTogglePinValue+0x6c>)
 80004f4:	404b      	eors	r3, r1
 80004f6:	60d3      	str	r3, [r2, #12]
			break ;
 80004f8:	e015      	b.n	8000526 <GPIO_voidTogglePinValue+0x62>
			TOG_BIT(GPIOB->ODR , Copy_Pin ) ;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <GPIO_voidTogglePinValue+0x70>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	79ba      	ldrb	r2, [r7, #6]
 8000500:	2101      	movs	r1, #1
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <GPIO_voidTogglePinValue+0x70>)
 800050a:	404b      	eors	r3, r1
 800050c:	60d3      	str	r3, [r2, #12]
			break ;
 800050e:	e00a      	b.n	8000526 <GPIO_voidTogglePinValue+0x62>
			TOG_BIT(GPIOC->ODR , Copy_Pin ) ;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <GPIO_voidTogglePinValue+0x74>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	79ba      	ldrb	r2, [r7, #6]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <GPIO_voidTogglePinValue+0x74>)
 8000520:	404b      	eors	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
			break ;
 8000524:	bf00      	nop

	}


}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40010800 	.word	0x40010800
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40011000 	.word	0x40011000

0800053c <USART1_IRQHandler>:


}
/************************************* ISR		*********************************************/
void USART1_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
			Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR);
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <USART1_IRQHandler+0x30>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <USART1_IRQHandler+0x34>)
 8000548:	6852      	ldr	r2, [r2, #4]
 800054a:	b292      	uxth	r2, r2
 800054c:	4610      	mov	r0, r2
 800054e:	4798      	blx	r3
	//	Clear Fflags
	 USART1->SR &=~ (1<<6) ; // TXC
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <USART1_IRQHandler+0x34>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <USART1_IRQHandler+0x34>)
 8000556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800055a:	6013      	str	r3, [r2, #0]
	 USART1->SR &=~  (1<<5) ; // RXNE
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <USART1_IRQHandler+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <USART1_IRQHandler+0x34>)
 8000562:	f023 0320 	bic.w	r3, r3, #32
 8000566:	6013      	str	r3, [r2, #0]

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000028 	.word	0x20000028
 8000570:	40013800 	.word	0x40013800

08000574 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
			Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR);
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <USART2_IRQHandler+0x30>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <USART2_IRQHandler+0x34>)
 8000580:	6852      	ldr	r2, [r2, #4]
 8000582:	b292      	uxth	r2, r2
 8000584:	4610      	mov	r0, r2
 8000586:	4798      	blx	r3
	//Flags
	 USART2->SR &=~  (1<<6) ; // TXC
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <USART2_IRQHandler+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <USART2_IRQHandler+0x34>)
 800058e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000592:	6013      	str	r3, [r2, #0]
	 USART2->SR &=~ (1<<5) ; // RXNE
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <USART2_IRQHandler+0x34>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <USART2_IRQHandler+0x34>)
 800059a:	f023 0320 	bic.w	r3, r3, #32
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40004400 	.word	0x40004400

080005ac <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
			Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
*/
	Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR);
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <USART3_IRQHandler+0x30>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <USART3_IRQHandler+0x34>)
 80005b8:	6852      	ldr	r2, [r2, #4]
 80005ba:	b292      	uxth	r2, r2
 80005bc:	4610      	mov	r0, r2
 80005be:	4798      	blx	r3
	//Flags
	 USART3->SR &=~  (1<<6) ; // TXC
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ca:	6013      	str	r3, [r2, #0]
	 USART3->SR&=~  (1<<5) ; // RXNE
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005d2:	f023 0320 	bic.w	r3, r3, #32
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000028 	.word	0x20000028
 80005e0:	40004400 	.word	0x40004400
 80005e4:	40004800 	.word	0x40004800

080005e8 <main>:
;



int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
	RCC_voidInitSysClocks();
 80005ee:	f7ff fdff 	bl	80001f0 <RCC_voidInitSysClocks>



    /* Create the task, storing the handle. */
    xTaskCreate(slaveFCN,"Master Generate CMDs",  STACK_SIZE, NULL , 2,&LEDHandler );
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0x48>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <main+0x4c>)
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0x50>)
 8000602:	f000 fc6b 	bl	8000edc <xTaskCreate>
    xTaskCreate(MasterFCN,"Slave Receive CMDs",  STACK_SIZE, NULL , 1,&ButtonHandler );
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x54>)
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <main+0x58>)
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x5c>)
 8000616:	f000 fc61 	bl	8000edc <xTaskCreate>

    /*	Create Semaphore		*/
    xQueue = xQueueCreate(10, sizeof(u8));	// 10 element with sizez u8 for each elemnet
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	200a      	movs	r0, #10
 8000620:	f000 f9aa 	bl	8000978 <xQueueGenericCreate>
 8000624:	4602      	mov	r2, r0
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <main+0x60>)
 8000628:	601a      	str	r2, [r3, #0]

    /*			START SCHEDULER		*/
    vTaskStartScheduler();
 800062a:	f000 fdc7 	bl	80011bc <vTaskStartScheduler>

    /* Loop forever */
	for(;;);
 800062e:	e7fe      	b.n	800062e <main+0x46>
 8000630:	20000034 	.word	0x20000034
 8000634:	080021c4 	.word	0x080021c4
 8000638:	0800064d 	.word	0x0800064d
 800063c:	20000038 	.word	0x20000038
 8000640:	080021dc 	.word	0x080021dc
 8000644:	080006ad 	.word	0x080006ad
 8000648:	2000003c 	.word	0x2000003c

0800064c <slaveFCN>:
}

void slaveFCN(void* vPTR)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	RCC_voidEnableClock(RCC_APB2, PORTA);
 8000654:	2102      	movs	r1, #2
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff fd8a 	bl	8000170 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_OUTPUT_10MHZ_PUSH_PULL);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff fe13 	bl	800028c <GPIO_voidSetPinDirection>
	u8 cmdReceived = 0 ;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		xQueueReceive(xQueue, &cmdReceived	,(TickType_t)5) ;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <slaveFCN+0x58>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f107 010f 	add.w	r1, r7, #15
 8000672:	2205      	movs	r2, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fa8d 	bl	8000b94 <xQueueReceive>
		if(cmdReceived != TOGG)
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <slaveFCN+0x5c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d006      	beq.n	8000692 <slaveFCN+0x46>
			GPIO_voidSetPinValue(PORTA,PIN2,cmdReceived);
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	461a      	mov	r2, r3
 8000688:	2102      	movs	r1, #2
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff fec4 	bl	8000418 <GPIO_voidSetPinValue>
 8000690:	e003      	b.n	800069a <slaveFCN+0x4e>
		else
			GPIO_voidTogglePinValue(PORTA, PIN2);
 8000692:	2102      	movs	r1, #2
 8000694:	2002      	movs	r0, #2
 8000696:	f7ff ff15 	bl	80004c4 <GPIO_voidTogglePinValue>
		vTaskDelay(10);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fd6a 	bl	8001174 <vTaskDelay>
		xQueueReceive(xQueue, &cmdReceived	,(TickType_t)5) ;
 80006a0:	e7e3      	b.n	800066a <slaveFCN+0x1e>
 80006a2:	bf00      	nop
 80006a4:	2000003c 	.word	0x2000003c
 80006a8:	20000001 	.word	0x20000001

080006ac <MasterFCN>:
	}

}
void MasterFCN(void* vPTR)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		xQueueSend(xQueue,&ON,(TickType_t)5);
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MasterFCN+0x5c>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	2205      	movs	r2, #5
 80006bc:	4913      	ldr	r1, [pc, #76]	; (800070c <MasterFCN+0x60>)
 80006be:	f000 f9bf 	bl	8000a40 <xQueueGenericSend>
		vTaskDelay(15);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 fd56 	bl	8001174 <vTaskDelay>
		xQueueSend(xQueue,&OFF,(TickType_t)5);
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MasterFCN+0x5c>)
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	2205      	movs	r2, #5
 80006d0:	490f      	ldr	r1, [pc, #60]	; (8000710 <MasterFCN+0x64>)
 80006d2:	f000 f9b5 	bl	8000a40 <xQueueGenericSend>
		vTaskDelay(15);
 80006d6:	200f      	movs	r0, #15
 80006d8:	f000 fd4c 	bl	8001174 <vTaskDelay>
		xQueueSend(xQueue,&TOGG,(TickType_t)5);
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MasterFCN+0x5c>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	2205      	movs	r2, #5
 80006e4:	490b      	ldr	r1, [pc, #44]	; (8000714 <MasterFCN+0x68>)
 80006e6:	f000 f9ab 	bl	8000a40 <xQueueGenericSend>
		vTaskDelay(15);
 80006ea:	200f      	movs	r0, #15
 80006ec:	f000 fd42 	bl	8001174 <vTaskDelay>
		xQueueSend(xQueue,&TOGG,(TickType_t)5);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MasterFCN+0x5c>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	2205      	movs	r2, #5
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <MasterFCN+0x68>)
 80006fa:	f000 f9a1 	bl	8000a40 <xQueueGenericSend>
		vTaskDelay(15);
 80006fe:	200f      	movs	r0, #15
 8000700:	f000 fd38 	bl	8001174 <vTaskDelay>
		xQueueSend(xQueue,&ON,(TickType_t)5);
 8000704:	e7d6      	b.n	80006b4 <MasterFCN+0x8>
 8000706:	bf00      	nop
 8000708:	2000003c 	.word	0x2000003c
 800070c:	20000000 	.word	0x20000000
 8000710:	20000040 	.word	0x20000040
 8000714:	20000001 	.word	0x20000001

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800071c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f001 fcf9 	bl	800213c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff ff4d 	bl	80005e8 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800075c:	08002200 	.word	0x08002200
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000764:	20002168 	.word	0x20002168

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>

0800076a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0208 	add.w	r2, r3, #8
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f04f 32ff 	mov.w	r2, #4294967295
 8000782:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f103 0208 	add.w	r2, r3, #8
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f103 0208 	add.w	r2, r3, #8
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d103      	bne.n	80007e0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e00c      	b.n	80007fa <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3308      	adds	r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e002      	b.n	80007ee <vListInsert+0x2e>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d2f6      	bcs.n	80007e8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	6892      	ldr	r2, [r2, #8]
 8000846:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	6852      	ldr	r2, [r2, #4]
 8000850:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	d103      	bne.n	8000864 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d063      	beq.n	8000964 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d05f      	beq.n	8000964 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ac:	2000      	movs	r0, #0
 80008ae:	fba2 1203 	umull	r1, r2, r2, r3
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	f04f 0400 	mov.w	r4, #0
 80008ba:	0013      	movs	r3, r2
 80008bc:	2400      	movs	r4, #0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d000      	beq.n	80008c4 <xQueueGenericReset+0x40>
 80008c2:	2001      	movs	r0, #1
 80008c4:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14c      	bne.n	8000964 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80008ca:	f001 f9ff 	bl	8001ccc <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	441a      	add	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fa:	3b01      	subs	r3, #1
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	441a      	add	r2, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d114      	bne.n	800094a <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d01a      	beq.n	800095e <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	3310      	adds	r3, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fedb 	bl	80016e8 <xTaskRemoveFromEventList>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d012      	beq.n	800095e <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <xQueueGenericReset+0xf0>)
 800093a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	e009      	b.n	800095e <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3310      	adds	r3, #16
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff0b 	bl	800076a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	3324      	adds	r3, #36	; 0x24
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff06 	bl	800076a <vListInitialise>
        }
        taskEXIT_CRITICAL();
 800095e:	f001 f9cd 	bl	8001cfc <vPortExitCritical>
 8000962:	e001      	b.n	8000968 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000968:	68fb      	ldr	r3, [r7, #12]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	bf00      	nop
 8000974:	e000ed04 	.word	0xe000ed04

08000978 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b08b      	sub	sp, #44	; 0x2c
 800097c:	af02      	add	r7, sp, #8
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	4613      	mov	r3, r2
 8000984:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d033      	beq.n	80009f8 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000990:	2000      	movs	r0, #0
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	fba2 1203 	umull	r1, r2, r2, r3
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	f04f 0400 	mov.w	r4, #0
 80009a2:	0013      	movs	r3, r2
 80009a4:	2400      	movs	r4, #0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d000      	beq.n	80009ac <xQueueGenericCreate+0x34>
 80009aa:	2001      	movs	r0, #1
 80009ac:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d122      	bne.n	80009f8 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80009ba:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80009be:	d81b      	bhi.n	80009f8 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	3348      	adds	r3, #72	; 0x48
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fa0c 	bl	8001dec <pvPortMalloc>
 80009d4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00d      	beq.n	80009f8 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3348      	adds	r3, #72	; 0x48
 80009e4:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4613      	mov	r3, r2
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f805 	bl	8000a02 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80009f8:	69fb      	ldr	r3, [r7, #28]
    }
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}

08000a02 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b084      	sub	sp, #16
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e002      	b.n	8000a24 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a30:	2101      	movs	r1, #1
 8000a32:	69b8      	ldr	r0, [r7, #24]
 8000a34:	f7ff ff26 	bl	8000884 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a56:	f001 f939 	bl	8001ccc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d302      	bcc.n	8000a6c <xQueueGenericSend+0x2c>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d129      	bne.n	8000ac0 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	68b9      	ldr	r1, [r7, #8]
 8000a70:	6a38      	ldr	r0, [r7, #32]
 8000a72:	f000 f931 	bl	8000cd8 <prvCopyDataToQueue>
 8000a76:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d010      	beq.n	8000aa2 <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	3324      	adds	r3, #36	; 0x24
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fe2f 	bl	80016e8 <xTaskRemoveFromEventList>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d013      	beq.n	8000ab8 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000a90:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <xQueueGenericSend+0x150>)
 8000a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	f3bf 8f6f 	isb	sy
 8000aa0:	e00a      	b.n	8000ab8 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d007      	beq.n	8000ab8 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <xQueueGenericSend+0x150>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000ab8:	f001 f920 	bl	8001cfc <vPortExitCritical>
                return pdPASS;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e063      	b.n	8000b88 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000ac6:	f001 f919 	bl	8001cfc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e05c      	b.n	8000b88 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d106      	bne.n	8000ae2 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fecd 	bl	8001878 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ae2:	f001 f90b 	bl	8001cfc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ae6:	f000 fba3 	bl	8001230 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000aea:	f001 f8ef 	bl	8001ccc <vPortEnterCritical>
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afa:	d103      	bne.n	8000b04 <xQueueGenericSend+0xc4>
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d103      	bne.n	8000b1a <xQueueGenericSend+0xda>
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b1a:	f001 f8ef 	bl	8001cfc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b1e:	1d3a      	adds	r2, r7, #4
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 febc 	bl	80018a4 <xTaskCheckForTimeOut>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d124      	bne.n	8000b7c <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b32:	6a38      	ldr	r0, [r7, #32]
 8000b34:	f000 f9ba 	bl	8000eac <prvIsQueueFull>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d018      	beq.n	8000b70 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	3310      	adds	r3, #16
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fdb8 	bl	80016bc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000b4c:	6a38      	ldr	r0, [r7, #32]
 8000b4e:	f000 f945 	bl	8000ddc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000b52:	f000 fb7b 	bl	800124c <xTaskResumeAll>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f47f af7c 	bne.w	8000a56 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <xQueueGenericSend+0x150>)
 8000b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	f3bf 8f4f 	dsb	sy
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	e772      	b.n	8000a56 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000b70:	6a38      	ldr	r0, [r7, #32]
 8000b72:	f000 f933 	bl	8000ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b76:	f000 fb69 	bl	800124c <xTaskResumeAll>
 8000b7a:	e76c      	b.n	8000a56 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000b7c:	6a38      	ldr	r0, [r7, #32]
 8000b7e:	f000 f92d 	bl	8000ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b82:	f000 fb63 	bl	800124c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000b86:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000ed04 	.word	0xe000ed04

08000b94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ba8:	f001 f890 	bl	8001ccc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d01f      	beq.n	8000bf8 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6a38      	ldr	r0, [r7, #32]
 8000bbc:	f000 f8e8 	bl	8000d90 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	1e5a      	subs	r2, r3, #1
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00f      	beq.n	8000bf0 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	3310      	adds	r3, #16
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fd87 	bl	80016e8 <xTaskRemoveFromEventList>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d007      	beq.n	8000bf0 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <xQueueReceive+0x140>)
 8000be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bf0:	f001 f884 	bl	8001cfc <vPortExitCritical>
                return pdPASS;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e069      	b.n	8000ccc <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d103      	bne.n	8000c06 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bfe:	f001 f87d 	bl	8001cfc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e062      	b.n	8000ccc <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fe31 	bl	8001878 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c1a:	f001 f86f 	bl	8001cfc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c1e:	f000 fb07 	bl	8001230 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c22:	f001 f853 	bl	8001ccc <vPortEnterCritical>
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c32:	d103      	bne.n	8000c3c <xQueueReceive+0xa8>
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d103      	bne.n	8000c52 <xQueueReceive+0xbe>
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c52:	f001 f853 	bl	8001cfc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c56:	1d3a      	adds	r2, r7, #4
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fe20 	bl	80018a4 <xTaskCheckForTimeOut>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d123      	bne.n	8000cb2 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c6a:	6a38      	ldr	r0, [r7, #32]
 8000c6c:	f000 f908 	bl	8000e80 <prvIsQueueEmpty>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d017      	beq.n	8000ca6 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	3324      	adds	r3, #36	; 0x24
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fd1c 	bl	80016bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c84:	6a38      	ldr	r0, [r7, #32]
 8000c86:	f000 f8a9 	bl	8000ddc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c8a:	f000 fadf 	bl	800124c <xTaskResumeAll>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d189      	bne.n	8000ba8 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <xQueueReceive+0x140>)
 8000c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	f3bf 8f6f 	isb	sy
 8000ca4:	e780      	b.n	8000ba8 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000ca6:	6a38      	ldr	r0, [r7, #32]
 8000ca8:	f000 f898 	bl	8000ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cac:	f000 face 	bl	800124c <xTaskResumeAll>
 8000cb0:	e77a      	b.n	8000ba8 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000cb2:	6a38      	ldr	r0, [r7, #32]
 8000cb4:	f000 f892 	bl	8000ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cb8:	f000 fac8 	bl	800124c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cbc:	6a38      	ldr	r0, [r7, #32]
 8000cbe:	f000 f8df 	bl	8000e80 <prvIsQueueEmpty>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f43f af6f 	beq.w	8000ba8 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000cca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000ed04 	.word	0xe000ed04

08000cd8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cec:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d043      	beq.n	8000d7e <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d119      	bne.n	8000d30 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6858      	ldr	r0, [r3, #4]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	461a      	mov	r2, r3
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	f001 fa3c 	bl	8002184 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	441a      	add	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d32b      	bcc.n	8000d7e <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	e026      	b.n	8000d7e <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	68d8      	ldr	r0, [r3, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	f001 fa22 	bl	8002184 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	425b      	negs	r3, r3
 8000d4a:	441a      	add	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	425b      	negs	r3, r3
 8000d66:	441a      	add	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d105      	bne.n	8000d7e <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000d86:	693b      	ldr	r3, [r7, #16]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d018      	beq.n	8000dd4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	441a      	add	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d303      	bcc.n	8000dc4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68d9      	ldr	r1, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6838      	ldr	r0, [r7, #0]
 8000dd0:	f001 f9d8 	bl	8002184 <memcpy>
    }
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000de4:	f000 ff72 	bl	8001ccc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000df0:	e011      	b.n	8000e16 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d012      	beq.n	8000e20 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3324      	adds	r3, #36	; 0x24
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fc72 	bl	80016e8 <xTaskRemoveFromEventList>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000e0a:	f000 fd95 	bl	8001938 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dce9      	bgt.n	8000df2 <prvUnlockQueue+0x16>
 8000e1e:	e000      	b.n	8000e22 <prvUnlockQueue+0x46>
                        break;
 8000e20:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	22ff      	movs	r2, #255	; 0xff
 8000e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000e2a:	f000 ff67 	bl	8001cfc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000e2e:	f000 ff4d 	bl	8001ccc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e38:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e3a:	e011      	b.n	8000e60 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d012      	beq.n	8000e6a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3310      	adds	r3, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fc4d 	bl	80016e8 <xTaskRemoveFromEventList>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e54:	f000 fd70 	bl	8001938 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	dce9      	bgt.n	8000e3c <prvUnlockQueue+0x60>
 8000e68:	e000      	b.n	8000e6c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e6a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e74:	f000 ff42 	bl	8001cfc <vPortExitCritical>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e88:	f000 ff20 	bl	8001ccc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e001      	b.n	8000e9e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e9e:	f000 ff2d 	bl	8001cfc <vPortExitCritical>

    return xReturn;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000eb4:	f000 ff0a 	bl	8001ccc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d102      	bne.n	8000eca <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e001      	b.n	8000ece <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ece:	f000 ff15 	bl	8001cfc <vPortExitCritical>

    return xReturn;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af04      	add	r7, sp, #16
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 ff7b 	bl	8001dec <pvPortMalloc>
 8000ef6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00e      	beq.n	8000f1c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000efe:	204c      	movs	r0, #76	; 0x4c
 8000f00:	f000 ff74 	bl	8001dec <pvPortMalloc>
 8000f04:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
 8000f12:	e005      	b.n	8000f20 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	f001 f817 	bl	8001f48 <vPortFree>
 8000f1a:	e001      	b.n	8000f20 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d013      	beq.n	8000f4e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9303      	str	r3, [sp, #12]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f80e 	bl	8000f5e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000f42:	69f8      	ldr	r0, [r7, #28]
 8000f44:	f000 f884 	bl	8001050 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	e002      	b.n	8000f54 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000f54:	69bb      	ldr	r3, [r7, #24]
    }
 8000f56:	4618      	mov	r0, r3
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f76:	3b01      	subs	r3, #1
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	f023 0307 	bic.w	r3, r3, #7
 8000f84:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01f      	beq.n	8000fcc <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e012      	b.n	8000fb8 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	4413      	add	r3, r2
 8000f98:	7819      	ldrb	r1, [r3, #0]
 8000f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3334      	adds	r3, #52	; 0x34
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	d9e9      	bls.n	8000f92 <prvInitialiseNewTask+0x34>
 8000fbe:	e000      	b.n	8000fc2 <prvInitialiseNewTask+0x64>
            {
                break;
 8000fc0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000fca:	e003      	b.n	8000fd4 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d901      	bls.n	8000fde <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	6a3a      	ldr	r2, [r7, #32]
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fbdd 	bl	80007a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	3318      	adds	r3, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fbd8 	bl	80007a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ffc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	f1c3 0205 	rsb	r2, r3, #5
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001010:	3344      	adds	r3, #68	; 0x44
 8001012:	2204      	movs	r2, #4
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f001 f8bf 	bl	800219a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	3348      	adds	r3, #72	; 0x48
 8001020:	2201      	movs	r2, #1
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f001 f8b8 	bl	800219a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	6938      	ldr	r0, [r7, #16]
 8001030:	f000 fdbc 	bl	8001bac <pxPortInitialiseStack>
 8001034:	4602      	mov	r2, r0
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001044:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001058:	f000 fe38 	bl	8001ccc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <prvAddNewTaskToReadyList+0x108>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a3d      	ldr	r2, [pc, #244]	; (8001158 <prvAddNewTaskToReadyList+0x108>)
 8001064:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001066:	4b3d      	ldr	r3, [pc, #244]	; (800115c <prvAddNewTaskToReadyList+0x10c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800106e:	4a3b      	ldr	r2, [pc, #236]	; (800115c <prvAddNewTaskToReadyList+0x10c>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001074:	4b38      	ldr	r3, [pc, #224]	; (8001158 <prvAddNewTaskToReadyList+0x108>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d110      	bne.n	800109e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800107c:	f000 fc80 	bl	8001980 <prvInitialiseTaskLists>
 8001080:	e00d      	b.n	800109e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <prvAddNewTaskToReadyList+0x110>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <prvAddNewTaskToReadyList+0x10c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	429a      	cmp	r2, r3
 8001096:	d802      	bhi.n	800109e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <prvAddNewTaskToReadyList+0x10c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <prvAddNewTaskToReadyList+0x114>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <prvAddNewTaskToReadyList+0x114>)
 80010a6:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	2201      	movs	r2, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <prvAddNewTaskToReadyList+0x118>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <prvAddNewTaskToReadyList+0x118>)
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010be:	492b      	ldr	r1, [pc, #172]	; (800116c <prvAddNewTaskToReadyList+0x11c>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	3304      	adds	r3, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	3204      	adds	r2, #4
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1d1a      	adds	r2, r3, #4
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <prvAddNewTaskToReadyList+0x11c>)
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001108:	4918      	ldr	r1, [pc, #96]	; (800116c <prvAddNewTaskToReadyList+0x11c>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1c59      	adds	r1, r3, #1
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <prvAddNewTaskToReadyList+0x11c>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4403      	add	r3, r0
 8001124:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001126:	f000 fde9 	bl	8001cfc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <prvAddNewTaskToReadyList+0x110>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00e      	beq.n	8001150 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <prvAddNewTaskToReadyList+0x10c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <prvAddNewTaskToReadyList+0x120>)
 8001142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	f3bf 8f4f 	dsb	sy
 800114c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000011c 	.word	0x2000011c
 800115c:	20000044 	.word	0x20000044
 8001160:	20000128 	.word	0x20000128
 8001164:	20000138 	.word	0x20000138
 8001168:	20000124 	.word	0x20000124
 800116c:	20000048 	.word	0x20000048
 8001170:	e000ed04 	.word	0xe000ed04

08001174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8001186:	f000 f853 	bl	8001230 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fc8d 	bl	8001aac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001192:	f000 f85b 	bl	800124c <xTaskResumeAll>
 8001196:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d107      	bne.n	80011ae <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <vTaskDelay+0x44>)
 80011a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	f3bf 8f4f 	dsb	sy
 80011aa:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000ed04 	.word	0xe000ed04

080011bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <vTaskStartScheduler+0x58>)
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	4912      	ldr	r1, [pc, #72]	; (8001218 <vTaskStartScheduler+0x5c>)
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <vTaskStartScheduler+0x60>)
 80011d2:	f7ff fe83 	bl	8000edc <xTaskCreate>
 80011d6:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d114      	bne.n	8001208 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80011de:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	f3bf 8f4f 	dsb	sy
 80011ee:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <vTaskStartScheduler+0x64>)
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <vTaskStartScheduler+0x68>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <vTaskStartScheduler+0x6c>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001204:	f000 fd42 	bl	8001c8c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <vTaskStartScheduler+0x70>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000140 	.word	0x20000140
 8001218:	080021f0 	.word	0x080021f0
 800121c:	08001951 	.word	0x08001951
 8001220:	2000013c 	.word	0x2000013c
 8001224:	20000128 	.word	0x20000128
 8001228:	20000120 	.word	0x20000120
 800122c:	20000004 	.word	0x20000004

08001230 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <vTaskSuspendAll+0x18>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <vTaskSuspendAll+0x18>)
 800123c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000144 	.word	0x20000144

0800124c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800125a:	f000 fd37 	bl	8001ccc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <xTaskResumeAll+0x1b4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a66      	ldr	r2, [pc, #408]	; (8001400 <xTaskResumeAll+0x1b4>)
 8001266:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001268:	4b65      	ldr	r3, [pc, #404]	; (8001400 <xTaskResumeAll+0x1b4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 80c0 	bne.w	80013f2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001272:	4b64      	ldr	r3, [pc, #400]	; (8001404 <xTaskResumeAll+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80bb 	beq.w	80013f2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800127c:	e08a      	b.n	8001394 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800127e:	4b62      	ldr	r3, [pc, #392]	; (8001408 <xTaskResumeAll+0x1bc>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	6a12      	ldr	r2, [r2, #32]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	69d2      	ldr	r2, [r2, #28]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3318      	adds	r3, #24
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <xTaskResumeAll+0x68>
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2200      	movs	r2, #0
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	68d2      	ldr	r2, [r2, #12]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	6892      	ldr	r2, [r2, #8]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3304      	adds	r3, #4
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d103      	bne.n	80012f2 <xTaskResumeAll+0xa6>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	2201      	movs	r2, #1
 8001308:	409a      	lsls	r2, r3
 800130a:	4b40      	ldr	r3, [pc, #256]	; (800140c <xTaskResumeAll+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	4a3e      	ldr	r2, [pc, #248]	; (800140c <xTaskResumeAll+0x1c0>)
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	493d      	ldr	r1, [pc, #244]	; (8001410 <xTaskResumeAll+0x1c4>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	3204      	adds	r2, #4
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	1d1a      	adds	r2, r3, #4
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <xTaskResumeAll+0x1c4>)
 8001358:	441a      	add	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001362:	492b      	ldr	r1, [pc, #172]	; (8001410 <xTaskResumeAll+0x1c4>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c59      	adds	r1, r3, #1
 8001372:	4827      	ldr	r0, [pc, #156]	; (8001410 <xTaskResumeAll+0x1c4>)
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4403      	add	r3, r0
 800137e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <xTaskResumeAll+0x1c8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	429a      	cmp	r2, r3
 800138c:	d302      	bcc.n	8001394 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <xTaskResumeAll+0x1cc>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <xTaskResumeAll+0x1bc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f47f af70 	bne.w	800127e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80013a4:	f000 fb68 	bl	8001a78 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <xTaskResumeAll+0x1d0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d010      	beq.n	80013d6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80013b4:	f000 f836 	bl	8001424 <xTaskIncrementTick>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <xTaskResumeAll+0x1cc>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f1      	bne.n	80013b4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <xTaskResumeAll+0x1d0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <xTaskResumeAll+0x1cc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <xTaskResumeAll+0x1d4>)
 80013e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80013f2:	f000 fc83 	bl	8001cfc <vPortExitCritical>

    return xAlreadyYielded;
 80013f6:	693b      	ldr	r3, [r7, #16]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000144 	.word	0x20000144
 8001404:	2000011c 	.word	0x2000011c
 8001408:	200000dc 	.word	0x200000dc
 800140c:	20000124 	.word	0x20000124
 8001410:	20000048 	.word	0x20000048
 8001414:	20000044 	.word	0x20000044
 8001418:	20000130 	.word	0x20000130
 800141c:	2000012c 	.word	0x2000012c
 8001420:	e000ed04 	.word	0xe000ed04

08001424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800142e:	4b75      	ldr	r3, [pc, #468]	; (8001604 <xTaskIncrementTick+0x1e0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 80dc 	bne.w	80015f0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001438:	4b73      	ldr	r3, [pc, #460]	; (8001608 <xTaskIncrementTick+0x1e4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001440:	4a71      	ldr	r2, [pc, #452]	; (8001608 <xTaskIncrementTick+0x1e4>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d110      	bne.n	800146e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800144c:	4b6f      	ldr	r3, [pc, #444]	; (800160c <xTaskIncrementTick+0x1e8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	4b6f      	ldr	r3, [pc, #444]	; (8001610 <xTaskIncrementTick+0x1ec>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6d      	ldr	r2, [pc, #436]	; (800160c <xTaskIncrementTick+0x1e8>)
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4a6d      	ldr	r2, [pc, #436]	; (8001610 <xTaskIncrementTick+0x1ec>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <xTaskIncrementTick+0x1f0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a6b      	ldr	r2, [pc, #428]	; (8001614 <xTaskIncrementTick+0x1f0>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	f000 fb05 	bl	8001a78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800146e:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <xTaskIncrementTick+0x1f4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	429a      	cmp	r2, r3
 8001476:	f0c0 80a6 	bcc.w	80015c6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <xTaskIncrementTick+0x1e8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d104      	bne.n	800148e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <xTaskIncrementTick+0x1f4>)
 8001486:	f04f 32ff 	mov.w	r2, #4294967295
 800148a:	601a      	str	r2, [r3, #0]
                    break;
 800148c:	e09b      	b.n	80015c6 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <xTaskIncrementTick+0x1e8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d203      	bcs.n	80014ae <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80014a6:	4a5c      	ldr	r2, [pc, #368]	; (8001618 <xTaskIncrementTick+0x1f4>)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80014ac:	e08b      	b.n	80015c6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68d2      	ldr	r2, [r2, #12]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	6892      	ldr	r2, [r2, #8]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3304      	adds	r3, #4
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d103      	bne.n	80014dc <xTaskIncrementTick+0xb8>
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01e      	beq.n	8001532 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	6a12      	ldr	r2, [r2, #32]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	69d2      	ldr	r2, [r2, #28]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	3318      	adds	r3, #24
 8001516:	429a      	cmp	r2, r3
 8001518:	d103      	bne.n	8001522 <xTaskIncrementTick+0xfe>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	2201      	movs	r2, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <xTaskIncrementTick+0x1f8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4313      	orrs	r3, r2
 8001540:	4a36      	ldr	r2, [pc, #216]	; (800161c <xTaskIncrementTick+0x1f8>)
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001548:	4935      	ldr	r1, [pc, #212]	; (8001620 <xTaskIncrementTick+0x1fc>)
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	3204      	adds	r2, #4
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1d1a      	adds	r2, r3, #4
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4a26      	ldr	r2, [pc, #152]	; (8001620 <xTaskIncrementTick+0x1fc>)
 8001588:	441a      	add	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	4923      	ldr	r1, [pc, #140]	; (8001620 <xTaskIncrementTick+0x1fc>)
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1c59      	adds	r1, r3, #1
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <xTaskIncrementTick+0x1fc>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <xTaskIncrementTick+0x200>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f4ff af5d 	bcc.w	800147a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015c4:	e759      	b.n	800147a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <xTaskIncrementTick+0x200>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015cc:	4914      	ldr	r1, [pc, #80]	; (8001620 <xTaskIncrementTick+0x1fc>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d901      	bls.n	80015e2 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <xTaskIncrementTick+0x204>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e004      	b.n	80015fa <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <xTaskIncrementTick+0x208>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <xTaskIncrementTick+0x208>)
 80015f8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80015fa:	69fb      	ldr	r3, [r7, #28]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000144 	.word	0x20000144
 8001608:	20000120 	.word	0x20000120
 800160c:	200000d4 	.word	0x200000d4
 8001610:	200000d8 	.word	0x200000d8
 8001614:	20000134 	.word	0x20000134
 8001618:	2000013c 	.word	0x2000013c
 800161c:	20000124 	.word	0x20000124
 8001620:	20000048 	.word	0x20000048
 8001624:	20000044 	.word	0x20000044
 8001628:	20000130 	.word	0x20000130
 800162c:	2000012c 	.word	0x2000012c

08001630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <vTaskSwitchContext+0x78>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <vTaskSwitchContext+0x7c>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001644:	e02a      	b.n	800169c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <vTaskSwitchContext+0x7c>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <vTaskSwitchContext+0x80>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	f1c3 031f 	rsb	r3, r3, #31
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <vTaskSwitchContext+0x84>)
 800166e:	4413      	add	r3, r2
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3308      	adds	r3, #8
 8001684:	429a      	cmp	r2, r3
 8001686:	d104      	bne.n	8001692 <vTaskSwitchContext+0x62>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <vTaskSwitchContext+0x88>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000144 	.word	0x20000144
 80016ac:	20000130 	.word	0x20000130
 80016b0:	20000124 	.word	0x20000124
 80016b4:	20000048 	.word	0x20000048
 80016b8:	20000044 	.word	0x20000044

080016bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <vTaskPlaceOnEventList+0x28>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3318      	adds	r3, #24
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff f876 	bl	80007c0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016d4:	2101      	movs	r1, #1
 80016d6:	6838      	ldr	r0, [r7, #0]
 80016d8:	f000 f9e8 	bl	8001aac <prvAddCurrentTaskToDelayedList>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000044 	.word	0x20000044

080016e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	6a12      	ldr	r2, [r2, #32]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	69d2      	ldr	r2, [r2, #28]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	3318      	adds	r3, #24
 800171a:	429a      	cmp	r2, r3
 800171c:	d103      	bne.n	8001726 <xTaskRemoveFromEventList+0x3e>
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <xTaskRemoveFromEventList+0x178>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d15e      	bne.n	80017fc <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	68d2      	ldr	r2, [r2, #12]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	6892      	ldr	r2, [r2, #8]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3304      	adds	r3, #4
 8001760:	429a      	cmp	r2, r3
 8001762:	d103      	bne.n	800176c <xTaskRemoveFromEventList+0x84>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2201      	movs	r2, #1
 8001782:	409a      	lsls	r2, r3
 8001784:	4b37      	ldr	r3, [pc, #220]	; (8001864 <xTaskRemoveFromEventList+0x17c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	4a36      	ldr	r2, [pc, #216]	; (8001864 <xTaskRemoveFromEventList+0x17c>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001792:	4935      	ldr	r1, [pc, #212]	; (8001868 <xTaskRemoveFromEventList+0x180>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	3204      	adds	r2, #4
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4a25      	ldr	r2, [pc, #148]	; (8001868 <xTaskRemoveFromEventList+0x180>)
 80017d2:	441a      	add	r2, r3
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	4922      	ldr	r1, [pc, #136]	; (8001868 <xTaskRemoveFromEventList+0x180>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	481e      	ldr	r0, [pc, #120]	; (8001868 <xTaskRemoveFromEventList+0x180>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4403      	add	r3, r0
 80017f8:	6019      	str	r1, [r3, #0]
 80017fa:	e01b      	b.n	8001834 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <xTaskRemoveFromEventList+0x184>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	61da      	str	r2, [r3, #28]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	621a      	str	r2, [r3, #32]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	3218      	adds	r2, #24
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f103 0218 	add.w	r2, r3, #24
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <xTaskRemoveFromEventList+0x184>)
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <xTaskRemoveFromEventList+0x184>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <xTaskRemoveFromEventList+0x184>)
 8001832:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <xTaskRemoveFromEventList+0x188>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	429a      	cmp	r2, r3
 8001840:	d905      	bls.n	800184e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001842:	2301      	movs	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <xTaskRemoveFromEventList+0x18c>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e001      	b.n	8001852 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001852:	69fb      	ldr	r3, [r7, #28]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3724      	adds	r7, #36	; 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000144 	.word	0x20000144
 8001864:	20000124 	.word	0x20000124
 8001868:	20000048 	.word	0x20000048
 800186c:	200000dc 	.word	0x200000dc
 8001870:	20000044 	.word	0x20000044
 8001874:	20000130 	.word	0x20000130

08001878 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <vTaskInternalSetTimeOutState+0x24>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <vTaskInternalSetTimeOutState+0x28>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	605a      	str	r2, [r3, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000134 	.word	0x20000134
 80018a0:	20000120 	.word	0x20000120

080018a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80018ae:	f000 fa0d 	bl	8001ccc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <xTaskCheckForTimeOut+0x8c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ca:	d102      	bne.n	80018d2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e026      	b.n	8001920 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <xTaskCheckForTimeOut+0x90>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d00a      	beq.n	80018f4 <xTaskCheckForTimeOut+0x50>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d305      	bcc.n	80018f4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e015      	b.n	8001920 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d20b      	bcs.n	8001916 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffb4 	bl	8001878 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e004      	b.n	8001920 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001920:	f000 f9ec 	bl	8001cfc <vPortExitCritical>

    return xReturn;
 8001924:	697b      	ldr	r3, [r7, #20]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000120 	.word	0x20000120
 8001934:	20000134 	.word	0x20000134

08001938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <vTaskMissedYield+0x14>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000130 	.word	0x20000130

08001950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001958:	f000 f852 	bl	8001a00 <prvCheckTasksWaitingTermination>
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */

							if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <prvIdleTask+0x28>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d9f9      	bls.n	8001958 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <prvIdleTask+0x2c>)
 8001966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f3bf 8f4f 	dsb	sy
 8001970:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001974:	e7f0      	b.n	8001958 <prvIdleTask+0x8>
 8001976:	bf00      	nop
 8001978:	20000048 	.word	0x20000048
 800197c:	e000ed04 	.word	0xe000ed04

08001980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	e00c      	b.n	80019a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <prvInitialiseTaskLists+0x60>)
 8001998:	4413      	add	r3, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fee5 	bl	800076a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3301      	adds	r3, #1
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d9ef      	bls.n	800198c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <prvInitialiseTaskLists+0x64>)
 80019ae:	f7fe fedc 	bl	800076a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <prvInitialiseTaskLists+0x68>)
 80019b4:	f7fe fed9 	bl	800076a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <prvInitialiseTaskLists+0x6c>)
 80019ba:	f7fe fed6 	bl	800076a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <prvInitialiseTaskLists+0x70>)
 80019c0:	f7fe fed3 	bl	800076a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <prvInitialiseTaskLists+0x74>)
 80019c6:	f7fe fed0 	bl	800076a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <prvInitialiseTaskLists+0x78>)
 80019cc:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <prvInitialiseTaskLists+0x64>)
 80019ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <prvInitialiseTaskLists+0x7c>)
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <prvInitialiseTaskLists+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000048 	.word	0x20000048
 80019e4:	200000ac 	.word	0x200000ac
 80019e8:	200000c0 	.word	0x200000c0
 80019ec:	200000dc 	.word	0x200000dc
 80019f0:	200000f0 	.word	0x200000f0
 80019f4:	20000108 	.word	0x20000108
 80019f8:	200000d4 	.word	0x200000d4
 80019fc:	200000d8 	.word	0x200000d8

08001a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a06:	e019      	b.n	8001a3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001a08:	f000 f960 	bl	8001ccc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <prvCheckTasksWaitingTermination+0x4c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe ff09 	bl	8000830 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <prvCheckTasksWaitingTermination+0x50>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <prvCheckTasksWaitingTermination+0x50>)
 8001a26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <prvCheckTasksWaitingTermination+0x54>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <prvCheckTasksWaitingTermination+0x54>)
 8001a30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001a32:	f000 f963 	bl	8001cfc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f80e 	bl	8001a58 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <prvCheckTasksWaitingTermination+0x54>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e1      	bne.n	8001a08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000f0 	.word	0x200000f0
 8001a50:	2000011c 	.word	0x2000011c
 8001a54:	20000104 	.word	0x20000104

08001a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fa6f 	bl	8001f48 <vPortFree>
                vPortFree( pxTCB );
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fa6c 	bl	8001f48 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <prvResetNextTaskUnblockTime+0x2c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <prvResetNextTaskUnblockTime+0x30>)
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a8e:	e005      	b.n	8001a9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <prvResetNextTaskUnblockTime+0x2c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <prvResetNextTaskUnblockTime+0x30>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	200000d4 	.word	0x200000d4
 8001aa8:	2000013c 	.word	0x2000013c

08001aac <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001abc:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe feb4 	bl	8000830 <uxListRemove>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10b      	bne.n	8001ae6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <prvAddCurrentTaskToDelayedList+0xec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <prvAddCurrentTaskToDelayedList+0xec>)
 8001ae4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d124      	bne.n	8001b38 <prvAddCurrentTaskToDelayedList+0x8c>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	6892      	ldr	r2, [r2, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	3204      	adds	r2, #4
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1d1a      	adds	r2, r3, #4
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b36:	e026      	b.n	8001b86 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d209      	bcs.n	8001b64 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7fe fe2f 	bl	80007c0 <vListInsert>
}
 8001b62:	e010      	b.n	8001b86 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7fe fe25 	bl	80007c0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d202      	bcs.n	8001b86 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001b80:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000120 	.word	0x20000120
 8001b94:	20000044 	.word	0x20000044
 8001b98:	20000124 	.word	0x20000124
 8001b9c:	20000108 	.word	0x20000108
 8001ba0:	200000d8 	.word	0x200000d8
 8001ba4:	200000d4 	.word	0x200000d4
 8001ba8:	2000013c 	.word	0x2000013c

08001bac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3b04      	subs	r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f023 0201 	bic.w	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b04      	subs	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001bdc:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <pxPortInitialiseStack+0x54>)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3b14      	subs	r3, #20
 8001be6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b20      	subs	r3, #32
 8001bf2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	08001c05 	.word	0x08001c05

08001c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c0e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001c20:	bf00      	nop
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0fc      	beq.n	8001c22 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
	...

08001c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <pxCurrentTCBConst2>)
 8001c42:	6819      	ldr	r1, [r3, #0]
 8001c44:	6808      	ldr	r0, [r1, #0]
 8001c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c4a:	f380 8809 	msr	PSP, r0
 8001c4e:	f3bf 8f6f 	isb	sy
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f380 8811 	msr	BASEPRI, r0
 8001c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001c5e:	4770      	bx	lr

08001c60 <pxCurrentTCBConst2>:
 8001c60:	20000044 	.word	0x20000044
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop

08001c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <prvPortStartFirstTask+0x1c>)
 8001c6a:	6800      	ldr	r0, [r0, #0]
 8001c6c:	6800      	ldr	r0, [r0, #0]
 8001c6e:	f380 8808 	msr	MSP, r0
 8001c72:	b662      	cpsie	i
 8001c74:	b661      	cpsie	f
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	df00      	svc	0
 8001c80:	bf00      	nop
 8001c82:	0000      	.short	0x0000
 8001c84:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop

08001c8c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <xPortStartScheduler+0x38>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <xPortStartScheduler+0x38>)
 8001c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <xPortStartScheduler+0x38>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <xPortStartScheduler+0x38>)
 8001ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ca6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001ca8:	f000 f886 	bl	8001db8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <xPortStartScheduler+0x3c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001cb2:	f7ff ffd9 	bl	8001c68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001cb6:	f7ff fcbb 	bl	8001630 <vTaskSwitchContext>
    prvTaskExitError();
 8001cba:	f7ff ffa3 	bl	8001c04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	e000ed20 	.word	0xe000ed20
 8001cc8:	20000008 	.word	0x20000008

08001ccc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <vPortEnterCritical+0x2c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <vPortEnterCritical+0x2c>)
 8001cec:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000008 	.word	0x20000008

08001cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <vPortExitCritical+0x2c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <vPortExitCritical+0x2c>)
 8001d0a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <vPortExitCritical+0x2c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <vPortExitCritical+0x22>
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	00000000 	.word	0x00000000

08001d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001d30:	f3ef 8009 	mrs	r0, PSP
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <pxCurrentTCBConst>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d40:	6010      	str	r0, [r2, #0]
 8001d42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001d46:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001d4a:	f380 8811 	msr	BASEPRI, r0
 8001d4e:	f7ff fc6f 	bl	8001630 <vTaskSwitchContext>
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f380 8811 	msr	BASEPRI, r0
 8001d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	6808      	ldr	r0, [r1, #0]
 8001d62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d66:	f380 8809 	msr	PSP, r0
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	4770      	bx	lr

08001d70 <pxCurrentTCBConst>:
 8001d70:	20000044 	.word	0x20000044
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop

08001d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8001d7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001d90:	f7ff fb48 	bl	8001424 <xTaskIncrementTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <SysTick_Handler+0x3c>)
 8001d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	e000ed04 	.word	0xe000ed04

08001db8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <vPortSetupTimerInterrupt+0x24>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <vPortSetupTimerInterrupt+0x28>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <vPortSetupTimerInterrupt+0x2c>)
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <vPortSetupTimerInterrupt+0x30>)
 8001dcc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001dce:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <vPortSetupTimerInterrupt+0x24>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	e000e010 	.word	0xe000e010
 8001de0:	e000e018 	.word	0xe000e018
 8001de4:	e000e014 	.word	0xe000e014
 8001de8:	0001193f 	.word	0x0001193f

08001dec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8001df8:	f7ff fa1a 	bl	8001230 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <pvPortMalloc+0x144>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001e04:	f000 f8e0 	bl	8001fc8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e08:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <pvPortMalloc+0x148>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 8086 	bne.w	8001f22 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01e      	beq.n	8001e5a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d218      	bcs.n	8001e5a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8001e28:	2208      	movs	r2, #8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f023 0307 	bic.w	r3, r3, #7
 8001e40:	3308      	adds	r3, #8
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d205      	bcs.n	8001e54 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	3308      	adds	r3, #8
 8001e50:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e52:	e004      	b.n	8001e5e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e58:	e001      	b.n	8001e5e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05e      	beq.n	8001f22 <pvPortMalloc+0x136>
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <pvPortMalloc+0x14c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d859      	bhi.n	8001f22 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <pvPortMalloc+0x150>)
 8001e70:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <pvPortMalloc+0x150>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e78:	e004      	b.n	8001e84 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d903      	bls.n	8001e96 <pvPortMalloc+0xaa>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f1      	bne.n	8001e7a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <pvPortMalloc+0x144>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d040      	beq.n	8001f22 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	1ad2      	subs	r2, r2, r3
 8001eba:	2308      	movs	r3, #8
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d90f      	bls.n	8001ee2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f000 f8d5 	bl	800208c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <pvPortMalloc+0x14c>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <pvPortMalloc+0x14c>)
 8001eee:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <pvPortMalloc+0x14c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <pvPortMalloc+0x154>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d203      	bcs.n	8001f04 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <pvPortMalloc+0x14c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <pvPortMalloc+0x154>)
 8001f02:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <pvPortMalloc+0x148>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <pvPortMalloc+0x158>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <pvPortMalloc+0x158>)
 8001f20:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001f22:	f7ff f993 	bl	800124c <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20002150 	.word	0x20002150
 8001f34:	20002164 	.word	0x20002164
 8001f38:	20002154 	.word	0x20002154
 8001f3c:	20002148 	.word	0x20002148
 8001f40:	20002158 	.word	0x20002158
 8001f44:	2000215c 	.word	0x2000215c

08001f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d02c      	beq.n	8001fb4 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <vPortFree+0x74>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01e      	beq.n	8001fb4 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d11a      	bne.n	8001fb4 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <vPortFree+0x74>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001f8e:	f7ff f94f 	bl	8001230 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <vPortFree+0x78>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <vPortFree+0x78>)
 8001f9e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001fa0:	68b8      	ldr	r0, [r7, #8]
 8001fa2:	f000 f873 	bl	800208c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <vPortFree+0x7c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <vPortFree+0x7c>)
 8001fae:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001fb0:	f7ff f94c 	bl	800124c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20002164 	.word	0x20002164
 8001fc0:	20002154 	.word	0x20002154
 8001fc4:	20002160 	.word	0x20002160

08001fc8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <prvHeapInit+0xac>)
 8001fd6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3307      	adds	r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <prvHeapInit+0xac>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <prvHeapInit+0xb0>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <prvHeapInit+0xb0>)
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	4413      	add	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002014:	2208      	movs	r2, #8
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0307 	bic.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <prvHeapInit+0xb4>)
 8002028:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <prvHeapInit+0xb4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <prvHeapInit+0xb4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <prvHeapInit+0xb4>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <prvHeapInit+0xb8>)
 8002056:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a09      	ldr	r2, [pc, #36]	; (8002084 <prvHeapInit+0xbc>)
 800205e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <prvHeapInit+0xc0>)
 8002062:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000148 	.word	0x20000148
 8002078:	20002148 	.word	0x20002148
 800207c:	20002150 	.word	0x20002150
 8002080:	20002158 	.word	0x20002158
 8002084:	20002154 	.word	0x20002154
 8002088:	20002164 	.word	0x20002164

0800208c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <prvInsertBlockIntoFreeList+0xa8>)
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e002      	b.n	80020a0 <prvInsertBlockIntoFreeList+0x14>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d8f7      	bhi.n	800209a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4413      	add	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d108      	bne.n	80020ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	441a      	add	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d118      	bne.n	8002114 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <prvInsertBlockIntoFreeList+0xac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d00d      	beq.n	800210a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e008      	b.n	800211c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <prvInsertBlockIntoFreeList+0xac>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e003      	b.n	800211c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d002      	beq.n	800212a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	20002148 	.word	0x20002148
 8002138:	20002150 	.word	0x20002150

0800213c <__libc_init_array>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	2500      	movs	r5, #0
 8002140:	4e0c      	ldr	r6, [pc, #48]	; (8002174 <__libc_init_array+0x38>)
 8002142:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <__libc_init_array+0x3c>)
 8002144:	1ba4      	subs	r4, r4, r6
 8002146:	10a4      	asrs	r4, r4, #2
 8002148:	42a5      	cmp	r5, r4
 800214a:	d109      	bne.n	8002160 <__libc_init_array+0x24>
 800214c:	f000 f82e 	bl	80021ac <_init>
 8002150:	2500      	movs	r5, #0
 8002152:	4e0a      	ldr	r6, [pc, #40]	; (800217c <__libc_init_array+0x40>)
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <__libc_init_array+0x44>)
 8002156:	1ba4      	subs	r4, r4, r6
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	42a5      	cmp	r5, r4
 800215c:	d105      	bne.n	800216a <__libc_init_array+0x2e>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002164:	4798      	blx	r3
 8002166:	3501      	adds	r5, #1
 8002168:	e7ee      	b.n	8002148 <__libc_init_array+0xc>
 800216a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800216e:	4798      	blx	r3
 8002170:	3501      	adds	r5, #1
 8002172:	e7f2      	b.n	800215a <__libc_init_array+0x1e>
 8002174:	080021f8 	.word	0x080021f8
 8002178:	080021f8 	.word	0x080021f8
 800217c:	080021f8 	.word	0x080021f8
 8002180:	080021fc 	.word	0x080021fc

08002184 <memcpy>:
 8002184:	b510      	push	{r4, lr}
 8002186:	1e43      	subs	r3, r0, #1
 8002188:	440a      	add	r2, r1
 800218a:	4291      	cmp	r1, r2
 800218c:	d100      	bne.n	8002190 <memcpy+0xc>
 800218e:	bd10      	pop	{r4, pc}
 8002190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002198:	e7f7      	b.n	800218a <memcpy+0x6>

0800219a <memset>:
 800219a:	4603      	mov	r3, r0
 800219c:	4402      	add	r2, r0
 800219e:	4293      	cmp	r3, r2
 80021a0:	d100      	bne.n	80021a4 <memset+0xa>
 80021a2:	4770      	bx	lr
 80021a4:	f803 1b01 	strb.w	r1, [r3], #1
 80021a8:	e7f9      	b.n	800219e <memset+0x4>
	...

080021ac <_init>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	bf00      	nop
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr

080021b8 <_fini>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	bf00      	nop
 80021bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021be:	bc08      	pop	{r3}
 80021c0:	469e      	mov	lr, r3
 80021c2:	4770      	bx	lr
