
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002160  08002160  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002160  08002160  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002160  08002160  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  20000008  08002170  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002164  08002170  00022164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d5d  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ffd  00000000  00000000  00025d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00026d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  00027240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c74  00000000  00000000  00027658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003ccc  00000000  00000000  0002a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00011020  00000000  00000000  0002df98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003efb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011b4  00000000  00000000  0003f034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	0800212c 	.word	0x0800212c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	0800212c 	.word	0x0800212c

08000170 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b1f      	cmp	r3, #31
 8000184:	d828      	bhi.n	80001d8 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d00f      	beq.n	80001ac <RCC_voidEnableClock+0x3c>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d018      	beq.n	80001c2 <RCC_voidEnableClock+0x52>
 8000190:	2b00      	cmp	r3, #0
 8000192:	d000      	beq.n	8000196 <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8000194:	e020      	b.n	80001d8 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8000196:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <RCC_voidEnableClock+0x74>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	79ba      	ldrb	r2, [r7, #6]
 800019c:	2101      	movs	r1, #1
 800019e:	fa01 f202 	lsl.w	r2, r1, r2
 80001a2:	4611      	mov	r1, r2
 80001a4:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <RCC_voidEnableClock+0x74>)
 80001a6:	430b      	orrs	r3, r1
 80001a8:	6013      	str	r3, [r2, #0]
 80001aa:	e015      	b.n	80001d8 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <RCC_voidEnableClock+0x78>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	79ba      	ldrb	r2, [r7, #6]
 80001b2:	2101      	movs	r1, #1
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <RCC_voidEnableClock+0x78>)
 80001bc:	430b      	orrs	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
 80001c0:	e00a      	b.n	80001d8 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80001c2:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	79ba      	ldrb	r2, [r7, #6]
 80001c8:	2101      	movs	r1, #1
 80001ca:	fa01 f202 	lsl.w	r2, r1, r2
 80001ce:	4611      	mov	r1, r2
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001d2:	430b      	orrs	r3, r1
 80001d4:	6013      	str	r3, [r2, #0]
 80001d6:	bf00      	nop
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021014 	.word	0x40021014
 80001e8:	4002101c 	.word	0x4002101c
 80001ec:	40021018 	.word	0x40021018

080001f0 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80001f4:	4b23      	ldr	r3, [pc, #140]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 80001f6:	2280      	movs	r2, #128	; 0x80
 80001f8:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
			   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
			#endif
			RCC_CFGR |= RCC_CFGR_PLLXTPRE_HSE_Div2;
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE
				#if   RCC_PLL_HSE == RCC_PLL_HSE_CRYSTAL
					SET_BIT(RCC_CR, RCC_CR_CSSON);
 8000200:	4b20      	ldr	r3, [pc, #128]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800020a:	6013      	str	r3, [r2, #0]
					SET_BIT(RCC_CR, RCC_CR_HSEON);
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000216:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
 8000218:	bf00      	nop
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	0c5b      	lsrs	r3, r3, #17
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0f8      	beq.n	800021a <RCC_voidInitSysClocks+0x2a>
				   #warning("Wrong PLL input from HSE...Crystal is default")
				   SET_BIT(RCC_CR, RCC_CR_CSSON);
				   SET_BIT(RCC_CR, RCC_CR_HSEON);
				   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
				#endif
				RCC_CFGR |= RCC_CFGR_PLLSRC_HSE;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800022e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000232:	6013      	str	r3, [r2, #0]
		#endif
			/***************************** SET MUX VAL	***********************************/
				RCC_CFGR |= RCC_PLL_MUL_VAL ;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a10      	ldr	r2, [pc, #64]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 8000242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000246:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC_CR, RCC_CR_PLLRDY)));
 8000248:	bf00      	nop
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <RCC_voidInitSysClocks+0x94>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	0e5b      	lsrs	r3, r3, #25
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f8      	beq.n	800024a <RCC_voidInitSysClocks+0x5a>
			RCC_CFGR |= RCC_CFGR_SW_PLL;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000266:	4a08      	ldr	r2, [pc, #32]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000276:	4a04      	ldr	r2, [pc, #16]	; (8000288 <RCC_voidInitSysClocks+0x98>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000
 8000288:	40021004 	.word	0x40021004

0800028c <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	460b      	mov	r3, r1
 8000298:	71bb      	strb	r3, [r7, #6]
 800029a:	4613      	mov	r3, r2
 800029c:	717b      	strb	r3, [r7, #5]
    	switch(Copy_u8Port)
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d03e      	beq.n	8000322 <GPIO_voidSetPinDirection+0x96>
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d075      	beq.n	8000394 <GPIO_voidSetPinDirection+0x108>
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d000      	beq.n	80002ae <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 80002ac:	e0a9      	b.n	8000402 <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d817      	bhi.n	80002e4 <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 80002b4:	4b55      	ldr	r3, [pc, #340]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	79ba      	ldrb	r2, [r7, #6]
 80002ba:	0092      	lsls	r2, r2, #2
 80002bc:	210f      	movs	r1, #15
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	43d2      	mvns	r2, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a51      	ldr	r2, [pc, #324]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002c8:	400b      	ands	r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80002cc:	4b4f      	ldr	r3, [pc, #316]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	7979      	ldrb	r1, [r7, #5]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	4611      	mov	r1, r2
 80002dc:	4a4b      	ldr	r2, [pc, #300]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	6013      	str	r3, [r2, #0]
			break;
 80002e2:	e089      	b.n	80003f8 <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b0f      	cmp	r3, #15
 80002e8:	f200 8086 	bhi.w	80003f8 <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	3b08      	subs	r3, #8
 80002f0:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 80002f2:	4b46      	ldr	r3, [pc, #280]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a41      	ldr	r2, [pc, #260]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 8000306:	400b      	ands	r3, r1
 8000308:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 800030a:	4b40      	ldr	r3, [pc, #256]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a3c      	ldr	r2, [pc, #240]	; (800040c <GPIO_voidSetPinDirection+0x180>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6053      	str	r3, [r2, #4]
			break;
 8000320:	e06a      	b.n	80003f8 <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d817      	bhi.n	8000358 <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8000328:	4b39      	ldr	r3, [pc, #228]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a35      	ldr	r2, [pc, #212]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800033c:	400b      	ands	r3, r1
 800033e:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a2f      	ldr	r2, [pc, #188]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
			break;
 8000356:	e051      	b.n	80003fc <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2b0f      	cmp	r3, #15
 800035c:	d84e      	bhi.n	80003fc <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3b08      	subs	r3, #8
 8000362:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	210f      	movs	r1, #15
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a26      	ldr	r2, [pc, #152]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 8000378:	400b      	ands	r3, r1
 800037a:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	7979      	ldrb	r1, [r7, #5]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <GPIO_voidSetPinDirection+0x184>)
 800038e:	430b      	orrs	r3, r1
 8000390:	6053      	str	r3, [r2, #4]
			break;
 8000392:	e033      	b.n	80003fc <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	2b07      	cmp	r3, #7
 8000398:	d810      	bhi.n	80003bc <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	7979      	ldrb	r1, [r7, #5]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	0092      	lsls	r2, r2, #2
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a17      	ldr	r2, [pc, #92]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
			break;
 80003ba:	e021      	b.n	8000400 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	2b0f      	cmp	r3, #15
 80003c0:	d81e      	bhi.n	8000400 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	3b08      	subs	r3, #8
 80003c6:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	79ba      	ldrb	r2, [r7, #6]
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	210f      	movs	r1, #15
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003dc:	400b      	ands	r3, r1
 80003de:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	7979      	ldrb	r1, [r7, #5]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a08      	ldr	r2, [pc, #32]	; (8000414 <GPIO_voidSetPinDirection+0x188>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6053      	str	r3, [r2, #4]
			break;
 80003f6:	e003      	b.n	8000400 <GPIO_voidSetPinDirection+0x174>
			break;
 80003f8:	bf00      	nop
 80003fa:	e002      	b.n	8000402 <GPIO_voidSetPinDirection+0x176>
			break;
 80003fc:	bf00      	nop
 80003fe:	e000      	b.n	8000402 <GPIO_voidSetPinDirection+0x176>
			break;
 8000400:	bf00      	nop
	}

}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40010800 	.word	0x40010800
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40011000 	.word	0x40011000

08000418 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	460b      	mov	r3, r1
 8000424:	71bb      	strb	r3, [r7, #6]
 8000426:	4613      	mov	r3, r2
 8000428:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d017      	beq.n	8000460 <GPIO_voidSetPinValue+0x48>
 8000430:	2b04      	cmp	r3, #4
 8000432:	d028      	beq.n	8000486 <GPIO_voidSetPinValue+0x6e>
 8000434:	2b02      	cmp	r3, #2
 8000436:	d000      	beq.n	800043a <GPIO_voidSetPinValue+0x22>
					break ; 
			}	
			break ;
		default :
		//error
			break ;
 8000438:	e038      	b.n	80004ac <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d008      	beq.n	8000452 <GPIO_voidSetPinValue+0x3a>
 8000440:	2b01      	cmp	r3, #1
 8000442:	d000      	beq.n	8000446 <GPIO_voidSetPinValue+0x2e>
					break ; 
 8000444:	e00b      	b.n	800045e <GPIO_voidSetPinValue+0x46>
					GPIOA->BSRR = (1 << Copy_Pin);
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	2201      	movs	r2, #1
 800044a:	409a      	lsls	r2, r3
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <GPIO_voidSetPinValue+0xa0>)
 800044e:	611a      	str	r2, [r3, #16]
					break ;
 8000450:	e005      	b.n	800045e <GPIO_voidSetPinValue+0x46>
					GPIOA->BRR = (1 << Copy_Pin);
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2201      	movs	r2, #1
 8000456:	409a      	lsls	r2, r3
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <GPIO_voidSetPinValue+0xa0>)
 800045a:	615a      	str	r2, [r3, #20]
					break ;
 800045c:	bf00      	nop
			break ; 
 800045e:	e025      	b.n	80004ac <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000460:	797b      	ldrb	r3, [r7, #5]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <GPIO_voidSetPinValue+0x60>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d000      	beq.n	800046c <GPIO_voidSetPinValue+0x54>
					break ; 
 800046a:	e00b      	b.n	8000484 <GPIO_voidSetPinValue+0x6c>
					GPIOB->BSRR = (1 << Copy_Pin);
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	2201      	movs	r2, #1
 8000470:	409a      	lsls	r2, r3
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <GPIO_voidSetPinValue+0xa4>)
 8000474:	611a      	str	r2, [r3, #16]
					break ;
 8000476:	e005      	b.n	8000484 <GPIO_voidSetPinValue+0x6c>
					GPIOB->BRR = (1 << Copy_Pin);
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2201      	movs	r2, #1
 800047c:	409a      	lsls	r2, r3
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <GPIO_voidSetPinValue+0xa4>)
 8000480:	615a      	str	r2, [r3, #20]
					break ;
 8000482:	bf00      	nop
			break ;
 8000484:	e012      	b.n	80004ac <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8000486:	797b      	ldrb	r3, [r7, #5]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <GPIO_voidSetPinValue+0x86>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d000      	beq.n	8000492 <GPIO_voidSetPinValue+0x7a>
					break ; 
 8000490:	e00b      	b.n	80004aa <GPIO_voidSetPinValue+0x92>
					GPIOC->BSRR = (1 << Copy_Pin);
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	2201      	movs	r2, #1
 8000496:	409a      	lsls	r2, r3
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <GPIO_voidSetPinValue+0xa8>)
 800049a:	611a      	str	r2, [r3, #16]
					break ;
 800049c:	e005      	b.n	80004aa <GPIO_voidSetPinValue+0x92>
					GPIOC->BRR = (1 << Copy_Pin);
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2201      	movs	r2, #1
 80004a2:	409a      	lsls	r2, r3
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GPIO_voidSetPinValue+0xa8>)
 80004a6:	615a      	str	r2, [r3, #20]
					break ;
 80004a8:	bf00      	nop
			break ;
 80004aa:	bf00      	nop
	}

}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000

080004c4 <GPIO_u8GetPinValue>:


}

u8 GPIO_u8GetPinValue (u8 Copy_u8Port, Pin_t Copy_Pin)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pin > 15)
	{
		/* error */
	}
	switch(Copy_u8Port)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d00e      	beq.n	80004fc <GPIO_u8GetPinValue+0x38>
 80004de:	2b04      	cmp	r3, #4
 80004e0:	d016      	beq.n	8000510 <GPIO_u8GetPinValue+0x4c>
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d000      	beq.n	80004e8 <GPIO_u8GetPinValue+0x24>
		case PORTC :
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 80004e6:	e01d      	b.n	8000524 <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOA->IDR , Copy_Pin ) ;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <GPIO_u8GetPinValue+0x6c>)
 80004ea:	689a      	ldr	r2, [r3, #8]
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	fa22 f303 	lsr.w	r3, r2, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
			break ;
 80004fa:	e013      	b.n	8000524 <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOB->IDR , Copy_Pin ) ;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <GPIO_u8GetPinValue+0x70>)
 80004fe:	689a      	ldr	r2, [r3, #8]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	fa22 f303 	lsr.w	r3, r2, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]
			break ;
 800050e:	e009      	b.n	8000524 <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <GPIO_u8GetPinValue+0x74>)
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	fa22 f303 	lsr.w	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
			break ;
 8000522:	bf00      	nop
	}
	return LOC_u8Result ;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40010800 	.word	0x40010800
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40011000 	.word	0x40011000

0800053c <USART1_IRQHandler>:


}
/************************************* ISR		*********************************************/
void USART1_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
			Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR);
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <USART1_IRQHandler+0x30>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <USART1_IRQHandler+0x34>)
 8000548:	6852      	ldr	r2, [r2, #4]
 800054a:	b292      	uxth	r2, r2
 800054c:	4610      	mov	r0, r2
 800054e:	4798      	blx	r3
	//	Clear Fflags
	 USART1->SR &=~ (1<<6) ; // TXC
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <USART1_IRQHandler+0x34>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <USART1_IRQHandler+0x34>)
 8000556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800055a:	6013      	str	r3, [r2, #0]
	 USART1->SR &=~  (1<<5) ; // RXNE
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <USART1_IRQHandler+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <USART1_IRQHandler+0x34>)
 8000562:	f023 0320 	bic.w	r3, r3, #32
 8000566:	6013      	str	r3, [r2, #0]

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000024 	.word	0x20000024
 8000570:	40013800 	.word	0x40013800

08000574 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
			Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR);
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <USART2_IRQHandler+0x30>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <USART2_IRQHandler+0x34>)
 8000580:	6852      	ldr	r2, [r2, #4]
 8000582:	b292      	uxth	r2, r2
 8000584:	4610      	mov	r0, r2
 8000586:	4798      	blx	r3
	//Flags
	 USART2->SR &=~  (1<<6) ; // TXC
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <USART2_IRQHandler+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <USART2_IRQHandler+0x34>)
 800058e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000592:	6013      	str	r3, [r2, #0]
	 USART2->SR &=~ (1<<5) ; // RXNE
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <USART2_IRQHandler+0x34>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <USART2_IRQHandler+0x34>)
 800059a:	f023 0320 	bic.w	r3, r3, #32
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000024 	.word	0x20000024
 80005a8:	40004400 	.word	0x40004400

080005ac <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
			Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
*/
	Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR);
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <USART3_IRQHandler+0x30>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <USART3_IRQHandler+0x34>)
 80005b8:	6852      	ldr	r2, [r2, #4]
 80005ba:	b292      	uxth	r2, r2
 80005bc:	4610      	mov	r0, r2
 80005be:	4798      	blx	r3
	//Flags
	 USART3->SR &=~  (1<<6) ; // TXC
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ca:	6013      	str	r3, [r2, #0]
	 USART3->SR&=~  (1<<5) ; // RXNE
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <USART3_IRQHandler+0x38>)
 80005d2:	f023 0320 	bic.w	r3, r3, #32
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000024 	.word	0x20000024
 80005e0:	40004400 	.word	0x40004400
 80005e4:	40004800 	.word	0x40004800

080005e8 <main>:

/*	Semaphores	*/
SemaphoreHandle_t	xSemaphore = NULL;

int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
	RCC_voidInitSysClocks();
 80005ee:	f7ff fdff 	bl	80001f0 <RCC_voidInitSysClocks>



    /* Create the task, storing the handle. */
    xTaskCreate(LED_Control,"Blink Led",  STACK_SIZE, NULL , 2,&LEDHandler );
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0x48>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <main+0x4c>)
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0x50>)
 8000602:	f000 fc31 	bl	8000e68 <xTaskCreate>
    xTaskCreate(ButtonStates,"Button",  STACK_SIZE, NULL , 1,&ButtonHandler );
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x54>)
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <main+0x58>)
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x5c>)
 8000616:	f000 fc27 	bl	8000e68 <xTaskCreate>

    /*	Create Semaphore		*/
    xSemaphore = xSemaphoreCreateBinary();
 800061a:	2203      	movs	r2, #3
 800061c:	2100      	movs	r1, #0
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f99a 	bl	8000958 <xQueueGenericCreate>
 8000624:	4602      	mov	r2, r0
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <main+0x60>)
 8000628:	601a      	str	r2, [r3, #0]

    /*			START SCHEDULER		*/
    vTaskStartScheduler();
 800062a:	f000 fd8d 	bl	8001148 <vTaskStartScheduler>

    /* Loop forever */
	for(;;);
 800062e:	e7fe      	b.n	800062e <main+0x46>
 8000630:	20000030 	.word	0x20000030
 8000634:	08002144 	.word	0x08002144
 8000638:	0800064d 	.word	0x0800064d
 800063c:	20000034 	.word	0x20000034
 8000640:	08002150 	.word	0x08002150
 8000644:	08000699 	.word	0x08000699
 8000648:	20000038 	.word	0x20000038

0800064c <LED_Control>:
}

void LED_Control(void* vPTR)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	RCC_voidEnableClock(RCC_APB2, PORTA);
 8000654:	2102      	movs	r1, #2
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff fd8a 	bl	8000170 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_OUTPUT_10MHZ_PUSH_PULL);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff fe13 	bl	800028c <GPIO_voidSetPinDirection>
	while(1)
	{
		if(xSemaphoreTake(xSemaphore , (TickType_t)5))
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <LED_Control+0x44>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2105      	movs	r1, #5
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fa81 	bl	8000b74 <xQueueSemaphoreTake>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d006      	beq.n	8000686 <LED_Control+0x3a>
		{
			GPIO_voidSetPinValue(PORTA,PIN2,BTN_currentState);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <LED_Control+0x48>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	2102      	movs	r1, #2
 8000680:	2002      	movs	r0, #2
 8000682:	f7ff fec9 	bl	8000418 <GPIO_voidSetPinValue>
		}
		vTaskDelay(50);
 8000686:	2032      	movs	r0, #50	; 0x32
 8000688:	f000 fd3a 	bl	8001100 <vTaskDelay>
		if(xSemaphoreTake(xSemaphore , (TickType_t)5))
 800068c:	e7eb      	b.n	8000666 <LED_Control+0x1a>
 800068e:	bf00      	nop
 8000690:	20000038 	.word	0x20000038
 8000694:	20002161 	.word	0x20002161

08000698 <ButtonStates>:
	}

}
void ButtonStates(void* vPTR)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	RCC_voidEnableClock(RCC_APB2, PORTA);
 80006a0:	2102      	movs	r1, #2
 80006a2:	2002      	movs	r0, #2
 80006a4:	f7ff fd64 	bl	8000170 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(PORTA, PIN0, GPIO_INPUT_FLOATING);
 80006a8:	2204      	movs	r2, #4
 80006aa:	2100      	movs	r1, #0
 80006ac:	2002      	movs	r0, #2
 80006ae:	f7ff fded 	bl	800028c <GPIO_voidSetPinDirection>
	while(1)
	{
		BTN_currentState =  GPIO_u8GetPinValue(PORTA,PIN0);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2002      	movs	r0, #2
 80006b6:	f7ff ff05 	bl	80004c4 <GPIO_u8GetPinValue>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <ButtonStates+0x54>)
 80006c0:	701a      	strb	r2, [r3, #0]
		// Give Semaphore when state changes
		if(BTN_currentState != BTN_prevState)
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <ButtonStates+0x54>)
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <ButtonStates+0x58>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d006      	beq.n	80006dc <ButtonStates+0x44>
		{
			// Give Semaphore
			xSemaphoreGive(xSemaphore);
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <ButtonStates+0x5c>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	f000 f9a2 	bl	8000a20 <xQueueGenericSend>
		}
		BTN_prevState = BTN_currentState ;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <ButtonStates+0x54>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <ButtonStates+0x58>)
 80006e2:	701a      	strb	r2, [r3, #0]

		vTaskDelay(25);
 80006e4:	2019      	movs	r0, #25
 80006e6:	f000 fd0b 	bl	8001100 <vTaskDelay>
		BTN_currentState =  GPIO_u8GetPinValue(PORTA,PIN0);
 80006ea:	e7e2      	b.n	80006b2 <ButtonStates+0x1a>
 80006ec:	20002161 	.word	0x20002161
 80006f0:	20002160 	.word	0x20002160
 80006f4:	20000038 	.word	0x20000038

080006f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000726:	f001 fcc9 	bl	80020bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff ff5d 	bl	80005e8 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   r0, =_estack
 8000730:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800073c:	08002168 	.word	0x08002168
  ldr r2, =_sbss
 8000740:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000744:	20002164 	.word	0x20002164

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>

0800074a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f103 0208 	add.w	r2, r3, #8
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 0208 	add.w	r2, r3, #8
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f103 0208 	add.w	r2, r3, #8
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b6:	d103      	bne.n	80007c0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	e00c      	b.n	80007da <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3308      	adds	r3, #8
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e002      	b.n	80007ce <vListInsert+0x2e>
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d2f6      	bcs.n	80007c8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	6892      	ldr	r2, [r2, #8]
 8000826:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	6852      	ldr	r2, [r2, #4]
 8000830:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	d103      	bne.n	8000844 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800086e:	2301      	movs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d063      	beq.n	8000944 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000880:	2b00      	cmp	r3, #0
 8000882:	d05f      	beq.n	8000944 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088c:	2000      	movs	r0, #0
 800088e:	fba2 1203 	umull	r1, r2, r2, r3
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	f04f 0400 	mov.w	r4, #0
 800089a:	0013      	movs	r3, r2
 800089c:	2400      	movs	r4, #0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d000      	beq.n	80008a4 <xQueueGenericReset+0x40>
 80008a2:	2001      	movs	r0, #1
 80008a4:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d14c      	bne.n	8000944 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80008aa:	f001 f9cf 	bl	8001c4c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008b6:	68b9      	ldr	r1, [r7, #8]
 80008b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008ba:	fb01 f303 	mul.w	r3, r1, r3
 80008be:	441a      	add	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2200      	movs	r2, #0
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008da:	3b01      	subs	r3, #1
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
 80008e4:	441a      	add	r2, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	22ff      	movs	r2, #255	; 0xff
 80008f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d114      	bne.n	800092a <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d01a      	beq.n	800093e <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3310      	adds	r3, #16
 800090c:	4618      	mov	r0, r3
 800090e:	f000 feb1 	bl	8001674 <xTaskRemoveFromEventList>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d012      	beq.n	800093e <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <xQueueGenericReset+0xf0>)
 800091a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	f3bf 8f4f 	dsb	sy
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	e009      	b.n	800093e <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	3310      	adds	r3, #16
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff0b 	bl	800074a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3324      	adds	r3, #36	; 0x24
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff06 	bl	800074a <vListInitialise>
        }
        taskEXIT_CRITICAL();
 800093e:	f001 f99d 	bl	8001c7c <vPortExitCritical>
 8000942:	e001      	b.n	8000948 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000948:	68fb      	ldr	r3, [r7, #12]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	bf00      	nop
 8000954:	e000ed04 	.word	0xe000ed04

08000958 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af02      	add	r7, sp, #8
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	4613      	mov	r3, r2
 8000964:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d033      	beq.n	80009d8 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000970:	2000      	movs	r0, #0
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	fba2 1203 	umull	r1, r2, r2, r3
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	f04f 0400 	mov.w	r4, #0
 8000982:	0013      	movs	r3, r2
 8000984:	2400      	movs	r4, #0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d000      	beq.n	800098c <xQueueGenericCreate+0x34>
 800098a:	2001      	movs	r0, #1
 800098c:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800098e:	2b00      	cmp	r3, #0
 8000990:	d122      	bne.n	80009d8 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800099a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800099e:	d81b      	bhi.n	80009d8 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	3348      	adds	r3, #72	; 0x48
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f9dc 	bl	8001d6c <pvPortMalloc>
 80009b4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00d      	beq.n	80009d8 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3348      	adds	r3, #72	; 0x48
 80009c4:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f000 f805 	bl	80009e2 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80009d8:	69fb      	ldr	r3, [r7, #28]
    }
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd90      	pop	{r4, r7, pc}

080009e2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e002      	b.n	8000a04 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a10:	2101      	movs	r1, #1
 8000a12:	69b8      	ldr	r0, [r7, #24]
 8000a14:	f7ff ff26 	bl	8000864 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a36:	f001 f909 	bl	8001c4c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d302      	bcc.n	8000a4c <xQueueGenericSend+0x2c>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d129      	bne.n	8000aa0 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	68b9      	ldr	r1, [r7, #8]
 8000a50:	6a38      	ldr	r0, [r7, #32]
 8000a52:	f000 f92d 	bl	8000cb0 <prvCopyDataToQueue>
 8000a56:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d010      	beq.n	8000a82 <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	3324      	adds	r3, #36	; 0x24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fe05 	bl	8001674 <xTaskRemoveFromEventList>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d013      	beq.n	8000a98 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000a70:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <xQueueGenericSend+0x150>)
 8000a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	f3bf 8f6f 	isb	sy
 8000a80:	e00a      	b.n	8000a98 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <xQueueGenericSend+0x150>)
 8000a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	f3bf 8f4f 	dsb	sy
 8000a94:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a98:	f001 f8f0 	bl	8001c7c <vPortExitCritical>
                return pdPASS;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e063      	b.n	8000b68 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000aa6:	f001 f8e9 	bl	8001c7c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e05c      	b.n	8000b68 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d106      	bne.n	8000ac2 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fea3 	bl	8001804 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ac2:	f001 f8db 	bl	8001c7c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ac6:	f000 fb79 	bl	80011bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000aca:	f001 f8bf 	bl	8001c4c <vPortEnterCritical>
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ada:	d103      	bne.n	8000ae4 <xQueueGenericSend+0xc4>
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
 8000ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d103      	bne.n	8000afa <xQueueGenericSend+0xda>
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000afa:	f001 f8bf 	bl	8001c7c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000afe:	1d3a      	adds	r2, r7, #4
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fe92 	bl	8001830 <xTaskCheckForTimeOut>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d124      	bne.n	8000b5c <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b12:	6a38      	ldr	r0, [r7, #32]
 8000b14:	f000 f990 	bl	8000e38 <prvIsQueueFull>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d018      	beq.n	8000b50 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	3310      	adds	r3, #16
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fd8e 	bl	8001648 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000b2c:	6a38      	ldr	r0, [r7, #32]
 8000b2e:	f000 f91b 	bl	8000d68 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000b32:	f000 fb51 	bl	80011d8 <xTaskResumeAll>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f47f af7c 	bne.w	8000a36 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <xQueueGenericSend+0x150>)
 8000b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	f3bf 8f4f 	dsb	sy
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	e772      	b.n	8000a36 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000b50:	6a38      	ldr	r0, [r7, #32]
 8000b52:	f000 f909 	bl	8000d68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b56:	f000 fb3f 	bl	80011d8 <xTaskResumeAll>
 8000b5a:	e76c      	b.n	8000a36 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000b5c:	6a38      	ldr	r0, [r7, #32]
 8000b5e:	f000 f903 	bl	8000d68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b62:	f000 fb39 	bl	80011d8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000b66:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	e000ed04 	.word	0xe000ed04

08000b74 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b86:	f001 f861 	bl	8001c4c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8e:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d01b      	beq.n	8000bce <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00f      	beq.n	8000bc6 <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	3310      	adds	r3, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fd62 	bl	8001674 <xTaskRemoveFromEventList>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <xQueueSemaphoreTake+0x138>)
 8000bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f3bf 8f4f 	dsb	sy
 8000bc2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bc6:	f001 f859 	bl	8001c7c <vPortExitCritical>
                return pdPASS;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e069      	b.n	8000ca2 <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d103      	bne.n	8000bdc <xQueueSemaphoreTake+0x68>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000bd4:	f001 f852 	bl	8001c7c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e062      	b.n	8000ca2 <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d106      	bne.n	8000bf0 <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fe0c 	bl	8001804 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bf0:	f001 f844 	bl	8001c7c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bf4:	f000 fae2 	bl	80011bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bf8:	f001 f828 	bl	8001c4c <vPortEnterCritical>
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d103      	bne.n	8000c12 <xQueueSemaphoreTake+0x9e>
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1e:	d103      	bne.n	8000c28 <xQueueSemaphoreTake+0xb4>
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c28:	f001 f828 	bl	8001c7c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c2c:	463a      	mov	r2, r7
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fdfb 	bl	8001830 <xTaskCheckForTimeOut>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d123      	bne.n	8000c88 <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c40:	69b8      	ldr	r0, [r7, #24]
 8000c42:	f000 f8e3 	bl	8000e0c <prvIsQueueEmpty>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d017      	beq.n	8000c7c <xQueueSemaphoreTake+0x108>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3324      	adds	r3, #36	; 0x24
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fcf7 	bl	8001648 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c5a:	69b8      	ldr	r0, [r7, #24]
 8000c5c:	f000 f884 	bl	8000d68 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c60:	f000 faba 	bl	80011d8 <xTaskResumeAll>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d18d      	bne.n	8000b86 <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <xQueueSemaphoreTake+0x138>)
 8000c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	f3bf 8f6f 	isb	sy
 8000c7a:	e784      	b.n	8000b86 <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000c7c:	69b8      	ldr	r0, [r7, #24]
 8000c7e:	f000 f873 	bl	8000d68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c82:	f000 faa9 	bl	80011d8 <xTaskResumeAll>
 8000c86:	e77e      	b.n	8000b86 <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000c88:	69b8      	ldr	r0, [r7, #24]
 8000c8a:	f000 f86d 	bl	8000d68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c8e:	f000 faa3 	bl	80011d8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c92:	69b8      	ldr	r0, [r7, #24]
 8000c94:	f000 f8ba 	bl	8000e0c <prvIsQueueEmpty>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f43f af73 	beq.w	8000b86 <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000ca0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000ed04 	.word	0xe000ed04

08000cb0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d043      	beq.n	8000d56 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d119      	bne.n	8000d08 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6858      	ldr	r0, [r3, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	f001 fa10 	bl	8002104 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	441a      	add	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d32b      	bcc.n	8000d56 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	e026      	b.n	8000d56 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	68d8      	ldr	r0, [r3, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	461a      	mov	r2, r3
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	f001 f9f6 	bl	8002104 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	425b      	negs	r3, r3
 8000d22:	441a      	add	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	441a      	add	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d105      	bne.n	8000d56 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000d5e:	693b      	ldr	r3, [r7, #16]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d70:	f000 ff6c 	bl	8001c4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d7a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d7c:	e011      	b.n	8000da2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d012      	beq.n	8000dac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3324      	adds	r3, #36	; 0x24
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fc72 	bl	8001674 <xTaskRemoveFromEventList>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000d96:	f000 fd95 	bl	80018c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dce9      	bgt.n	8000d7e <prvUnlockQueue+0x16>
 8000daa:	e000      	b.n	8000dae <prvUnlockQueue+0x46>
                        break;
 8000dac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	22ff      	movs	r2, #255	; 0xff
 8000db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000db6:	f000 ff61 	bl	8001c7c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000dba:	f000 ff47 	bl	8001c4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dc4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dc6:	e011      	b.n	8000dec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d012      	beq.n	8000df6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3310      	adds	r3, #16
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fc4d 	bl	8001674 <xTaskRemoveFromEventList>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000de0:	f000 fd70 	bl	80018c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	dce9      	bgt.n	8000dc8 <prvUnlockQueue+0x60>
 8000df4:	e000      	b.n	8000df8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000df6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	22ff      	movs	r2, #255	; 0xff
 8000dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e00:	f000 ff3c 	bl	8001c7c <vPortExitCritical>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e14:	f000 ff1a 	bl	8001c4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e001      	b.n	8000e2a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e2a:	f000 ff27 	bl	8001c7c <vPortExitCritical>

    return xReturn;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e40:	f000 ff04 	bl	8001c4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d102      	bne.n	8000e56 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e001      	b.n	8000e5a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e5a:	f000 ff0f 	bl	8001c7c <vPortExitCritical>

    return xReturn;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 ff75 	bl	8001d6c <pvPortMalloc>
 8000e82:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00e      	beq.n	8000ea8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e8a:	204c      	movs	r0, #76	; 0x4c
 8000e8c:	f000 ff6e 	bl	8001d6c <pvPortMalloc>
 8000e90:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e9e:	e005      	b.n	8000eac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f001 f811 	bl	8001ec8 <vPortFree>
 8000ea6:	e001      	b.n	8000eac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d013      	beq.n	8000eda <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f80e 	bl	8000eea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000ece:	69f8      	ldr	r0, [r7, #28]
 8000ed0:	f000 f884 	bl	8000fdc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	e002      	b.n	8000ee0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
    }
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f02:	3b01      	subs	r3, #1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	f023 0307 	bic.w	r3, r3, #7
 8000f10:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d01f      	beq.n	8000f58 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e012      	b.n	8000f44 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	7819      	ldrb	r1, [r3, #0]
 8000f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3334      	adds	r3, #52	; 0x34
 8000f2e:	460a      	mov	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d9e9      	bls.n	8000f1e <prvInitialiseNewTask+0x34>
 8000f4a:	e000      	b.n	8000f4e <prvInitialiseNewTask+0x64>
            {
                break;
 8000f4c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f56:	e003      	b.n	8000f60 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d901      	bls.n	8000f6a <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f66:	2304      	movs	r3, #4
 8000f68:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	6a3a      	ldr	r2, [r7, #32]
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	3304      	adds	r3, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fc07 	bl	8000788 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fc02 	bl	8000788 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f88:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	f1c3 0205 	rsb	r2, r3, #5
 8000f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f92:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9c:	3344      	adds	r3, #68	; 0x44
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f8b9 	bl	800211a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	3348      	adds	r3, #72	; 0x48
 8000fac:	2201      	movs	r2, #1
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 f8b2 	bl	800211a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	68f9      	ldr	r1, [r7, #12]
 8000fba:	6938      	ldr	r0, [r7, #16]
 8000fbc:	f000 fdbc 	bl	8001b38 <pxPortInitialiseStack>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000fe4:	f000 fe32 	bl	8001c4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <prvAddNewTaskToReadyList+0x108>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a3d      	ldr	r2, [pc, #244]	; (80010e4 <prvAddNewTaskToReadyList+0x108>)
 8000ff0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <prvAddNewTaskToReadyList+0x10c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d109      	bne.n	800100e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ffa:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <prvAddNewTaskToReadyList+0x10c>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <prvAddNewTaskToReadyList+0x108>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d110      	bne.n	800102a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001008:	f000 fc80 	bl	800190c <prvInitialiseTaskLists>
 800100c:	e00d      	b.n	800102a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <prvAddNewTaskToReadyList+0x110>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <prvAddNewTaskToReadyList+0x10c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	429a      	cmp	r2, r3
 8001022:	d802      	bhi.n	800102a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001024:	4a30      	ldr	r2, [pc, #192]	; (80010e8 <prvAddNewTaskToReadyList+0x10c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <prvAddNewTaskToReadyList+0x114>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <prvAddNewTaskToReadyList+0x114>)
 8001032:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2201      	movs	r2, #1
 800103a:	409a      	lsls	r2, r3
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <prvAddNewTaskToReadyList+0x118>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4313      	orrs	r3, r2
 8001042:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <prvAddNewTaskToReadyList+0x118>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104a:	492b      	ldr	r1, [pc, #172]	; (80010f8 <prvAddNewTaskToReadyList+0x11c>)
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	3204      	adds	r2, #4
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1d1a      	adds	r2, r3, #4
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <prvAddNewTaskToReadyList+0x11c>)
 800108a:	441a      	add	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <prvAddNewTaskToReadyList+0x11c>)
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <prvAddNewTaskToReadyList+0x11c>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4403      	add	r3, r0
 80010b0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80010b2:	f000 fde3 	bl	8001c7c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <prvAddNewTaskToReadyList+0x110>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00e      	beq.n	80010dc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <prvAddNewTaskToReadyList+0x10c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <prvAddNewTaskToReadyList+0x120>)
 80010ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000114 	.word	0x20000114
 80010e8:	2000003c 	.word	0x2000003c
 80010ec:	20000120 	.word	0x20000120
 80010f0:	20000130 	.word	0x20000130
 80010f4:	2000011c 	.word	0x2000011c
 80010f8:	20000040 	.word	0x20000040
 80010fc:	e000ed04 	.word	0xe000ed04

08001100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d008      	beq.n	8001124 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8001112:	f000 f853 	bl	80011bc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001116:	2100      	movs	r1, #0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fc8d 	bl	8001a38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800111e:	f000 f85b 	bl	80011d8 <xTaskResumeAll>
 8001122:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d107      	bne.n	800113a <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <vTaskDelay+0x44>)
 800112c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	f3bf 8f4f 	dsb	sy
 8001136:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000ed04 	.word	0xe000ed04

08001148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <vTaskStartScheduler+0x58>)
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2300      	movs	r3, #0
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	4912      	ldr	r1, [pc, #72]	; (80011a4 <vTaskStartScheduler+0x5c>)
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <vTaskStartScheduler+0x60>)
 800115e:	f7ff fe83 	bl	8000e68 <xTaskCreate>
 8001162:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d114      	bne.n	8001194 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800116a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <vTaskStartScheduler+0x64>)
 800117e:	f04f 32ff 	mov.w	r2, #4294967295
 8001182:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <vTaskStartScheduler+0x68>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <vTaskStartScheduler+0x6c>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001190:	f000 fd3c 	bl	8001c0c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <vTaskStartScheduler+0x70>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000138 	.word	0x20000138
 80011a4:	08002158 	.word	0x08002158
 80011a8:	080018dd 	.word	0x080018dd
 80011ac:	20000134 	.word	0x20000134
 80011b0:	20000120 	.word	0x20000120
 80011b4:	20000118 	.word	0x20000118
 80011b8:	20000000 	.word	0x20000000

080011bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <vTaskSuspendAll+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <vTaskSuspendAll+0x18>)
 80011c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000013c 	.word	0x2000013c

080011d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80011e6:	f000 fd31 	bl	8001c4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80011ea:	4b68      	ldr	r3, [pc, #416]	; (800138c <xTaskResumeAll+0x1b4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	4a66      	ldr	r2, [pc, #408]	; (800138c <xTaskResumeAll+0x1b4>)
 80011f2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011f4:	4b65      	ldr	r3, [pc, #404]	; (800138c <xTaskResumeAll+0x1b4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f040 80c0 	bne.w	800137e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011fe:	4b64      	ldr	r3, [pc, #400]	; (8001390 <xTaskResumeAll+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80bb 	beq.w	800137e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001208:	e08a      	b.n	8001320 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <xTaskResumeAll+0x1bc>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	6a12      	ldr	r2, [r2, #32]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	69d2      	ldr	r2, [r2, #28]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3318      	adds	r3, #24
 8001234:	429a      	cmp	r2, r3
 8001236:	d103      	bne.n	8001240 <xTaskResumeAll+0x68>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	68d2      	ldr	r2, [r2, #12]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	6892      	ldr	r2, [r2, #8]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3304      	adds	r3, #4
 8001272:	429a      	cmp	r2, r3
 8001274:	d103      	bne.n	800127e <xTaskResumeAll+0xa6>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	2201      	movs	r2, #1
 8001294:	409a      	lsls	r2, r3
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <xTaskResumeAll+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	4a3e      	ldr	r2, [pc, #248]	; (8001398 <xTaskResumeAll+0x1c0>)
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	493d      	ldr	r1, [pc, #244]	; (800139c <xTaskResumeAll+0x1c4>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	3304      	adds	r3, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	3204      	adds	r2, #4
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1d1a      	adds	r2, r3, #4
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <xTaskResumeAll+0x1c4>)
 80012e4:	441a      	add	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	492b      	ldr	r1, [pc, #172]	; (800139c <xTaskResumeAll+0x1c4>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1c59      	adds	r1, r3, #1
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <xTaskResumeAll+0x1c4>)
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4403      	add	r3, r0
 800130a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <xTaskResumeAll+0x1c8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	429a      	cmp	r2, r3
 8001318:	d302      	bcc.n	8001320 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <xTaskResumeAll+0x1cc>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <xTaskResumeAll+0x1bc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f af70 	bne.w	800120a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001330:	f000 fb68 	bl	8001a04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <xTaskResumeAll+0x1d0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d010      	beq.n	8001362 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001340:	f000 f836 	bl	80013b0 <xTaskIncrementTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <xTaskResumeAll+0x1cc>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b01      	subs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f1      	bne.n	8001340 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <xTaskResumeAll+0x1d0>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <xTaskResumeAll+0x1cc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800136a:	2301      	movs	r3, #1
 800136c:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <xTaskResumeAll+0x1d4>)
 8001370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	f3bf 8f4f 	dsb	sy
 800137a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800137e:	f000 fc7d 	bl	8001c7c <vPortExitCritical>

    return xAlreadyYielded;
 8001382:	693b      	ldr	r3, [r7, #16]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000013c 	.word	0x2000013c
 8001390:	20000114 	.word	0x20000114
 8001394:	200000d4 	.word	0x200000d4
 8001398:	2000011c 	.word	0x2000011c
 800139c:	20000040 	.word	0x20000040
 80013a0:	2000003c 	.word	0x2000003c
 80013a4:	20000128 	.word	0x20000128
 80013a8:	20000124 	.word	0x20000124
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013ba:	4b75      	ldr	r3, [pc, #468]	; (8001590 <xTaskIncrementTick+0x1e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 80dc 	bne.w	800157c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013c4:	4b73      	ldr	r3, [pc, #460]	; (8001594 <xTaskIncrementTick+0x1e4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80013cc:	4a71      	ldr	r2, [pc, #452]	; (8001594 <xTaskIncrementTick+0x1e4>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d110      	bne.n	80013fa <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80013d8:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <xTaskIncrementTick+0x1e8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	4b6f      	ldr	r3, [pc, #444]	; (800159c <xTaskIncrementTick+0x1ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6d      	ldr	r2, [pc, #436]	; (8001598 <xTaskIncrementTick+0x1e8>)
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4a6d      	ldr	r2, [pc, #436]	; (800159c <xTaskIncrementTick+0x1ec>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <xTaskIncrementTick+0x1f0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <xTaskIncrementTick+0x1f0>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	f000 fb05 	bl	8001a04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80013fa:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <xTaskIncrementTick+0x1f4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	429a      	cmp	r2, r3
 8001402:	f0c0 80a6 	bcc.w	8001552 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001406:	4b64      	ldr	r3, [pc, #400]	; (8001598 <xTaskIncrementTick+0x1e8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d104      	bne.n	800141a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001410:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <xTaskIncrementTick+0x1f4>)
 8001412:	f04f 32ff 	mov.w	r2, #4294967295
 8001416:	601a      	str	r2, [r3, #0]
                    break;
 8001418:	e09b      	b.n	8001552 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <xTaskIncrementTick+0x1e8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	d203      	bcs.n	800143a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001432:	4a5c      	ldr	r2, [pc, #368]	; (80015a4 <xTaskIncrementTick+0x1f4>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001438:	e08b      	b.n	8001552 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68d2      	ldr	r2, [r2, #12]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	6892      	ldr	r2, [r2, #8]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	3304      	adds	r3, #4
 800145c:	429a      	cmp	r2, r3
 800145e:	d103      	bne.n	8001468 <xTaskIncrementTick+0xb8>
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	2b00      	cmp	r3, #0
 800147e:	d01e      	beq.n	80014be <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	6a12      	ldr	r2, [r2, #32]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	69d2      	ldr	r2, [r2, #28]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3318      	adds	r3, #24
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d103      	bne.n	80014ae <xTaskIncrementTick+0xfe>
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1e5a      	subs	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	2201      	movs	r2, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <xTaskIncrementTick+0x1f8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a36      	ldr	r2, [pc, #216]	; (80015a8 <xTaskIncrementTick+0x1f8>)
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <xTaskIncrementTick+0x1fc>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	3204      	adds	r2, #4
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1d1a      	adds	r2, r3, #4
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4a26      	ldr	r2, [pc, #152]	; (80015ac <xTaskIncrementTick+0x1fc>)
 8001514:	441a      	add	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151e:	4923      	ldr	r1, [pc, #140]	; (80015ac <xTaskIncrementTick+0x1fc>)
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1c59      	adds	r1, r3, #1
 800152e:	481f      	ldr	r0, [pc, #124]	; (80015ac <xTaskIncrementTick+0x1fc>)
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4403      	add	r3, r0
 800153a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <xTaskIncrementTick+0x200>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	429a      	cmp	r2, r3
 8001548:	f4ff af5d 	bcc.w	8001406 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001550:	e759      	b.n	8001406 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <xTaskIncrementTick+0x200>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001558:	4914      	ldr	r1, [pc, #80]	; (80015ac <xTaskIncrementTick+0x1fc>)
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d901      	bls.n	800156e <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <xTaskIncrementTick+0x204>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8001576:	2301      	movs	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e004      	b.n	8001586 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <xTaskIncrementTick+0x208>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <xTaskIncrementTick+0x208>)
 8001584:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001586:	69fb      	ldr	r3, [r7, #28]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000013c 	.word	0x2000013c
 8001594:	20000118 	.word	0x20000118
 8001598:	200000cc 	.word	0x200000cc
 800159c:	200000d0 	.word	0x200000d0
 80015a0:	2000012c 	.word	0x2000012c
 80015a4:	20000134 	.word	0x20000134
 80015a8:	2000011c 	.word	0x2000011c
 80015ac:	20000040 	.word	0x20000040
 80015b0:	2000003c 	.word	0x2000003c
 80015b4:	20000128 	.word	0x20000128
 80015b8:	20000124 	.word	0x20000124

080015bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <vTaskSwitchContext+0x78>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <vTaskSwitchContext+0x7c>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80015d0:	e02a      	b.n	8001628 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <vTaskSwitchContext+0x7c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <vTaskSwitchContext+0x80>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f1c3 031f 	rsb	r3, r3, #31
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4a11      	ldr	r2, [pc, #68]	; (8001640 <vTaskSwitchContext+0x84>)
 80015fa:	4413      	add	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3308      	adds	r3, #8
 8001610:	429a      	cmp	r2, r3
 8001612:	d104      	bne.n	800161e <vTaskSwitchContext+0x62>
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <vTaskSwitchContext+0x88>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000013c 	.word	0x2000013c
 8001638:	20000128 	.word	0x20000128
 800163c:	2000011c 	.word	0x2000011c
 8001640:	20000040 	.word	0x20000040
 8001644:	2000003c 	.word	0x2000003c

08001648 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <vTaskPlaceOnEventList+0x28>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3318      	adds	r3, #24
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff f8a0 	bl	80007a0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001660:	2101      	movs	r1, #1
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f000 f9e8 	bl	8001a38 <prvAddCurrentTaskToDelayedList>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000003c 	.word	0x2000003c

08001674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	6a12      	ldr	r2, [r2, #32]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	69d2      	ldr	r2, [r2, #28]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3318      	adds	r3, #24
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d103      	bne.n	80016b2 <xTaskRemoveFromEventList+0x3e>
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <xTaskRemoveFromEventList+0x178>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d15e      	bne.n	8001788 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	68d2      	ldr	r2, [r2, #12]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	6892      	ldr	r2, [r2, #8]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	3304      	adds	r3, #4
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d103      	bne.n	80016f8 <xTaskRemoveFromEventList+0x84>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1e5a      	subs	r2, r3, #1
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	2201      	movs	r2, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <xTaskRemoveFromEventList+0x17c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <xTaskRemoveFromEventList+0x17c>)
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171e:	4935      	ldr	r1, [pc, #212]	; (80017f4 <xTaskRemoveFromEventList+0x180>)
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	3204      	adds	r2, #4
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1d1a      	adds	r2, r3, #4
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <xTaskRemoveFromEventList+0x180>)
 800175e:	441a      	add	r2, r3
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001768:	4922      	ldr	r1, [pc, #136]	; (80017f4 <xTaskRemoveFromEventList+0x180>)
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	481e      	ldr	r0, [pc, #120]	; (80017f4 <xTaskRemoveFromEventList+0x180>)
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4403      	add	r3, r0
 8001784:	6019      	str	r1, [r3, #0]
 8001786:	e01b      	b.n	80017c0 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <xTaskRemoveFromEventList+0x184>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	61da      	str	r2, [r3, #28]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	621a      	str	r2, [r3, #32]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	3218      	adds	r2, #24
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f103 0218 	add.w	r2, r3, #24
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <xTaskRemoveFromEventList+0x184>)
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <xTaskRemoveFromEventList+0x184>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <xTaskRemoveFromEventList+0x184>)
 80017be:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <xTaskRemoveFromEventList+0x188>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d905      	bls.n	80017da <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <xTaskRemoveFromEventList+0x18c>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e001      	b.n	80017de <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80017de:	69fb      	ldr	r3, [r7, #28]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3724      	adds	r7, #36	; 0x24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000013c 	.word	0x2000013c
 80017f0:	2000011c 	.word	0x2000011c
 80017f4:	20000040 	.word	0x20000040
 80017f8:	200000d4 	.word	0x200000d4
 80017fc:	2000003c 	.word	0x2000003c
 8001800:	20000128 	.word	0x20000128

08001804 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <vTaskInternalSetTimeOutState+0x24>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <vTaskInternalSetTimeOutState+0x28>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000012c 	.word	0x2000012c
 800182c:	20000118 	.word	0x20000118

08001830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800183a:	f000 fa07 	bl	8001c4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <xTaskCheckForTimeOut+0x8c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001856:	d102      	bne.n	800185e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e026      	b.n	80018ac <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <xTaskCheckForTimeOut+0x90>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d00a      	beq.n	8001880 <xTaskCheckForTimeOut+0x50>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d305      	bcc.n	8001880 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e015      	b.n	80018ac <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20b      	bcs.n	80018a2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad2      	subs	r2, r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffb4 	bl	8001804 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e004      	b.n	80018ac <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80018ac:	f000 f9e6 	bl	8001c7c <vPortExitCritical>

    return xReturn;
 80018b0:	697b      	ldr	r3, [r7, #20]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000118 	.word	0x20000118
 80018c0:	2000012c 	.word	0x2000012c

080018c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <vTaskMissedYield+0x14>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000128 	.word	0x20000128

080018dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80018e4:	f000 f852 	bl	800198c <prvCheckTasksWaitingTermination>
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */

							if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <prvIdleTask+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d9f9      	bls.n	80018e4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <prvIdleTask+0x2c>)
 80018f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001900:	e7f0      	b.n	80018e4 <prvIdleTask+0x8>
 8001902:	bf00      	nop
 8001904:	20000040 	.word	0x20000040
 8001908:	e000ed04 	.word	0xe000ed04

0800190c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	e00c      	b.n	8001932 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <prvInitialiseTaskLists+0x60>)
 8001924:	4413      	add	r3, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ff0f 	bl	800074a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d9ef      	bls.n	8001918 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <prvInitialiseTaskLists+0x64>)
 800193a:	f7fe ff06 	bl	800074a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <prvInitialiseTaskLists+0x68>)
 8001940:	f7fe ff03 	bl	800074a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <prvInitialiseTaskLists+0x6c>)
 8001946:	f7fe ff00 	bl	800074a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <prvInitialiseTaskLists+0x70>)
 800194c:	f7fe fefd 	bl	800074a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <prvInitialiseTaskLists+0x74>)
 8001952:	f7fe fefa 	bl	800074a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <prvInitialiseTaskLists+0x78>)
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <prvInitialiseTaskLists+0x64>)
 800195a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <prvInitialiseTaskLists+0x7c>)
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <prvInitialiseTaskLists+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000040 	.word	0x20000040
 8001970:	200000a4 	.word	0x200000a4
 8001974:	200000b8 	.word	0x200000b8
 8001978:	200000d4 	.word	0x200000d4
 800197c:	200000e8 	.word	0x200000e8
 8001980:	20000100 	.word	0x20000100
 8001984:	200000cc 	.word	0x200000cc
 8001988:	200000d0 	.word	0x200000d0

0800198c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001992:	e019      	b.n	80019c8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001994:	f000 f95a 	bl	8001c4c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <prvCheckTasksWaitingTermination+0x4c>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe ff33 	bl	8000810 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <prvCheckTasksWaitingTermination+0x50>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <prvCheckTasksWaitingTermination+0x50>)
 80019b2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <prvCheckTasksWaitingTermination+0x54>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <prvCheckTasksWaitingTermination+0x54>)
 80019bc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80019be:	f000 f95d 	bl	8001c7c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f80e 	bl	80019e4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <prvCheckTasksWaitingTermination+0x54>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e1      	bne.n	8001994 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200000e8 	.word	0x200000e8
 80019dc:	20000114 	.word	0x20000114
 80019e0:	200000fc 	.word	0x200000fc

080019e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fa69 	bl	8001ec8 <vPortFree>
                vPortFree( pxTCB );
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fa66 	bl	8001ec8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <prvResetNextTaskUnblockTime+0x2c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d104      	bne.n	8001a1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <prvResetNextTaskUnblockTime+0x30>)
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a1a:	e005      	b.n	8001a28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <prvResetNextTaskUnblockTime+0x2c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <prvResetNextTaskUnblockTime+0x30>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	200000cc 	.word	0x200000cc
 8001a34:	20000134 	.word	0x20000134

08001a38 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fede 	bl	8000810 <uxListRemove>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10b      	bne.n	8001a72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2201      	movs	r2, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <prvAddCurrentTaskToDelayedList+0xec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <prvAddCurrentTaskToDelayedList+0xec>)
 8001a70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d124      	bne.n	8001ac4 <prvAddCurrentTaskToDelayedList+0x8c>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	6892      	ldr	r2, [r2, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	3204      	adds	r2, #4
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	1d1a      	adds	r2, r3, #4
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ac2:	e026      	b.n	8001b12 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d209      	bcs.n	8001af0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f7fe fe59 	bl	80007a0 <vListInsert>
}
 8001aee:	e010      	b.n	8001b12 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3304      	adds	r3, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7fe fe4f 	bl	80007a0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d202      	bcs.n	8001b12 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001b0c:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6013      	str	r3, [r2, #0]
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000118 	.word	0x20000118
 8001b20:	2000003c 	.word	0x2000003c
 8001b24:	2000011c 	.word	0x2000011c
 8001b28:	20000100 	.word	0x20000100
 8001b2c:	200000d0 	.word	0x200000d0
 8001b30:	200000cc 	.word	0x200000cc
 8001b34:	20000134 	.word	0x20000134

08001b38 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3b04      	subs	r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3b04      	subs	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f023 0201 	bic.w	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3b04      	subs	r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <pxPortInitialiseStack+0x54>)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3b14      	subs	r3, #20
 8001b72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3b20      	subs	r3, #32
 8001b7e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	08001b91 	.word	0x08001b91

08001b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001b9a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001bac:	bf00      	nop
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0fc      	beq.n	8001bae <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <pxCurrentTCBConst2>)
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	6808      	ldr	r0, [r1, #0]
 8001bc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bca:	f380 8809 	msr	PSP, r0
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f380 8811 	msr	BASEPRI, r0
 8001bda:	f04e 0e0d 	orr.w	lr, lr, #13
 8001bde:	4770      	bx	lr

08001be0 <pxCurrentTCBConst2>:
 8001be0:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop

08001be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <prvPortStartFirstTask+0x1c>)
 8001bea:	6800      	ldr	r0, [r0, #0]
 8001bec:	6800      	ldr	r0, [r0, #0]
 8001bee:	f380 8808 	msr	MSP, r0
 8001bf2:	b662      	cpsie	i
 8001bf4:	b661      	cpsie	f
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	df00      	svc	0
 8001c00:	bf00      	nop
 8001c02:	0000      	.short	0x0000
 8001c04:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop

08001c0c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <xPortStartScheduler+0x38>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <xPortStartScheduler+0x38>)
 8001c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <xPortStartScheduler+0x38>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <xPortStartScheduler+0x38>)
 8001c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001c28:	f000 f886 	bl	8001d38 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <xPortStartScheduler+0x3c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001c32:	f7ff ffd9 	bl	8001be8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001c36:	f7ff fcc1 	bl	80015bc <vTaskSwitchContext>
    prvTaskExitError();
 8001c3a:	f7ff ffa9 	bl	8001b90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	e000ed20 	.word	0xe000ed20
 8001c48:	20000004 	.word	0x20000004

08001c4c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c56:	f383 8811 	msr	BASEPRI, r3
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	f3bf 8f4f 	dsb	sy
 8001c62:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <vPortEnterCritical+0x2c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <vPortEnterCritical+0x2c>)
 8001c6c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000004 	.word	0x20000004

08001c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <vPortExitCritical+0x2c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <vPortExitCritical+0x2c>)
 8001c8a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <vPortExitCritical+0x2c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <vPortExitCritical+0x22>
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	00000000 	.word	0x00000000

08001cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001cb0:	f3ef 8009 	mrs	r0, PSP
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <pxCurrentTCBConst>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cc0:	6010      	str	r0, [r2, #0]
 8001cc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001cc6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001cca:	f380 8811 	msr	BASEPRI, r0
 8001cce:	f7ff fc75 	bl	80015bc <vTaskSwitchContext>
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f380 8811 	msr	BASEPRI, r0
 8001cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	6808      	ldr	r0, [r1, #0]
 8001ce2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ce6:	f380 8809 	msr	PSP, r0
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	4770      	bx	lr

08001cf0 <pxCurrentTCBConst>:
 8001cf0:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop

08001cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8001cfe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001d10:	f7ff fb4e 	bl	80013b0 <xTaskIncrementTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SysTick_Handler+0x3c>)
 8001d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	e000ed04 	.word	0xe000ed04

08001d38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <vPortSetupTimerInterrupt+0x24>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <vPortSetupTimerInterrupt+0x28>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <vPortSetupTimerInterrupt+0x2c>)
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <vPortSetupTimerInterrupt+0x30>)
 8001d4c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001d4e:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <vPortSetupTimerInterrupt+0x24>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e010 	.word	0xe000e010
 8001d60:	e000e018 	.word	0xe000e018
 8001d64:	e000e014 	.word	0xe000e014
 8001d68:	0001193f 	.word	0x0001193f

08001d6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8001d78:	f7ff fa20 	bl	80011bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <pvPortMalloc+0x144>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001d84:	f000 f8e0 	bl	8001f48 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <pvPortMalloc+0x148>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 8086 	bne.w	8001ea2 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01e      	beq.n	8001dda <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d218      	bcs.n	8001dda <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8001da8:	2208      	movs	r2, #8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d011      	beq.n	8001dde <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	3308      	adds	r3, #8
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d205      	bcs.n	8001dd4 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	3308      	adds	r3, #8
 8001dd0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001dd2:	e004      	b.n	8001dde <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001dd8:	e001      	b.n	8001dde <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05e      	beq.n	8001ea2 <pvPortMalloc+0x136>
 8001de4:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <pvPortMalloc+0x14c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d859      	bhi.n	8001ea2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <pvPortMalloc+0x150>)
 8001df0:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <pvPortMalloc+0x150>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001df8:	e004      	b.n	8001e04 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d903      	bls.n	8001e16 <pvPortMalloc+0xaa>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f1      	bne.n	8001dfa <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <pvPortMalloc+0x144>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d040      	beq.n	8001ea2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2208      	movs	r2, #8
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d90f      	bls.n	8001e62 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	1ad2      	subs	r2, r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e5c:	68b8      	ldr	r0, [r7, #8]
 8001e5e:	f000 f8d5 	bl	800200c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <pvPortMalloc+0x14c>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <pvPortMalloc+0x14c>)
 8001e6e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <pvPortMalloc+0x14c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <pvPortMalloc+0x154>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d203      	bcs.n	8001e84 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <pvPortMalloc+0x14c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <pvPortMalloc+0x154>)
 8001e82:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <pvPortMalloc+0x148>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <pvPortMalloc+0x158>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <pvPortMalloc+0x158>)
 8001ea0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001ea2:	f7ff f999 	bl	80011d8 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20002148 	.word	0x20002148
 8001eb4:	2000215c 	.word	0x2000215c
 8001eb8:	2000214c 	.word	0x2000214c
 8001ebc:	20002140 	.word	0x20002140
 8001ec0:	20002150 	.word	0x20002150
 8001ec4:	20002154 	.word	0x20002154

08001ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d02c      	beq.n	8001f34 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001eda:	2308      	movs	r3, #8
 8001edc:	425b      	negs	r3, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <vPortFree+0x74>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01e      	beq.n	8001f34 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d11a      	bne.n	8001f34 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <vPortFree+0x74>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001f0e:	f7ff f955 	bl	80011bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <vPortFree+0x78>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <vPortFree+0x78>)
 8001f1e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f20:	68b8      	ldr	r0, [r7, #8]
 8001f22:	f000 f873 	bl	800200c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <vPortFree+0x7c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <vPortFree+0x7c>)
 8001f2e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001f30:	f7ff f952 	bl	80011d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2000215c 	.word	0x2000215c
 8001f40:	2000214c 	.word	0x2000214c
 8001f44:	20002158 	.word	0x20002158

08001f48 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <prvHeapInit+0xac>)
 8001f56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3307      	adds	r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <prvHeapInit+0xac>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <prvHeapInit+0xb0>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <prvHeapInit+0xb0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4413      	add	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001f94:	2208      	movs	r2, #8
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <prvHeapInit+0xb4>)
 8001fa8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <prvHeapInit+0xb4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <prvHeapInit+0xb4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <prvHeapInit+0xb4>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <prvHeapInit+0xb8>)
 8001fd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a09      	ldr	r2, [pc, #36]	; (8002004 <prvHeapInit+0xbc>)
 8001fde:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <prvHeapInit+0xc0>)
 8001fe2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000140 	.word	0x20000140
 8001ff8:	20002140 	.word	0x20002140
 8001ffc:	20002148 	.word	0x20002148
 8002000:	20002150 	.word	0x20002150
 8002004:	2000214c 	.word	0x2000214c
 8002008:	2000215c 	.word	0x2000215c

0800200c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <prvInsertBlockIntoFreeList+0xa8>)
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e002      	b.n	8002020 <prvInsertBlockIntoFreeList+0x14>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d8f7      	bhi.n	800201a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d108      	bne.n	800204e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	441a      	add	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	441a      	add	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d118      	bne.n	8002094 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <prvInsertBlockIntoFreeList+0xac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d00d      	beq.n	800208a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e008      	b.n	800209c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <prvInsertBlockIntoFreeList+0xac>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e003      	b.n	800209c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d002      	beq.n	80020aa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20002140 	.word	0x20002140
 80020b8:	20002148 	.word	0x20002148

080020bc <__libc_init_array>:
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	2500      	movs	r5, #0
 80020c0:	4e0c      	ldr	r6, [pc, #48]	; (80020f4 <__libc_init_array+0x38>)
 80020c2:	4c0d      	ldr	r4, [pc, #52]	; (80020f8 <__libc_init_array+0x3c>)
 80020c4:	1ba4      	subs	r4, r4, r6
 80020c6:	10a4      	asrs	r4, r4, #2
 80020c8:	42a5      	cmp	r5, r4
 80020ca:	d109      	bne.n	80020e0 <__libc_init_array+0x24>
 80020cc:	f000 f82e 	bl	800212c <_init>
 80020d0:	2500      	movs	r5, #0
 80020d2:	4e0a      	ldr	r6, [pc, #40]	; (80020fc <__libc_init_array+0x40>)
 80020d4:	4c0a      	ldr	r4, [pc, #40]	; (8002100 <__libc_init_array+0x44>)
 80020d6:	1ba4      	subs	r4, r4, r6
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	42a5      	cmp	r5, r4
 80020dc:	d105      	bne.n	80020ea <__libc_init_array+0x2e>
 80020de:	bd70      	pop	{r4, r5, r6, pc}
 80020e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020e4:	4798      	blx	r3
 80020e6:	3501      	adds	r5, #1
 80020e8:	e7ee      	b.n	80020c8 <__libc_init_array+0xc>
 80020ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ee:	4798      	blx	r3
 80020f0:	3501      	adds	r5, #1
 80020f2:	e7f2      	b.n	80020da <__libc_init_array+0x1e>
 80020f4:	08002160 	.word	0x08002160
 80020f8:	08002160 	.word	0x08002160
 80020fc:	08002160 	.word	0x08002160
 8002100:	08002164 	.word	0x08002164

08002104 <memcpy>:
 8002104:	b510      	push	{r4, lr}
 8002106:	1e43      	subs	r3, r0, #1
 8002108:	440a      	add	r2, r1
 800210a:	4291      	cmp	r1, r2
 800210c:	d100      	bne.n	8002110 <memcpy+0xc>
 800210e:	bd10      	pop	{r4, pc}
 8002110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002118:	e7f7      	b.n	800210a <memcpy+0x6>

0800211a <memset>:
 800211a:	4603      	mov	r3, r0
 800211c:	4402      	add	r2, r0
 800211e:	4293      	cmp	r3, r2
 8002120:	d100      	bne.n	8002124 <memset+0xa>
 8002122:	4770      	bx	lr
 8002124:	f803 1b01 	strb.w	r1, [r3], #1
 8002128:	e7f9      	b.n	800211e <memset+0x4>
	...

0800212c <_init>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr

08002138 <_fini>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr
