
RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001248  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001378  08001380  00011380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001378  08001378  00011380  2**0
                  CONTENTS
  4 .ARM          00000000  08001378  08001378  00011380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001378  08001380  00011380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800137c  0800137c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000000  08001380  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08001380  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a64  00000000  00000000  000113a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e93  00000000  00000000  00014e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c30  00000000  00000000  00015ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000458  00000000  00000000  000178d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a0  00000000  00000000  00017d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002266  00000000  00000000  000180c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001fdf  00000000  00000000  0001a32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009d84  00000000  00000000  0001c30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026091  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e70  00000000  00000000  0002610c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001360 	.word	0x08001360

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001360 	.word	0x08001360

08000170 <MRTOS_voidHardwareInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void MRTOS_voidHardwareInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* To initialize the STK driver */
	STK_voidInit();
 8000174:	f000 ff36 	bl	8000fe4 <STK_voidInit>
	STK_voidStopSystick();
 8000178:	f000 ff44 	bl	8001004 <STK_voidStopSystick>
	/*	Set Priorities	*/
    // Set the PendSV interrupt priority to the lowest level
	*(volatile u32 *)0xE000ED22 = 0xFF;
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <MRTOS_voidHardwareInit+0x1c>)
 800017e:	22ff      	movs	r2, #255	; 0xff
 8000180:	601a      	str	r2, [r3, #0]

    // Set the SysTick interrupt priority to the highest level
	*(volatile u32 *)0xE000ED23 = 0x00;
 8000182:	4b03      	ldr	r3, [pc, #12]	; (8000190 <MRTOS_voidHardwareInit+0x20>)
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]

}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	e000ed22 	.word	0xe000ed22
 8000190:	e000ed23 	.word	0xe000ed23

08000194 <MRTOS_voidStartTicker>:

void MRTOS_voidStartTicker(void (*callBack)(void))
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	/*	Start Systick */
	STK_voidStartSystick();
 800019c:	f000 ff40 	bl	8001020 <STK_voidStartSystick>
	/* To pass the scheduler function to the systick ISR */
	STK_voidSetIntervalPeriodic(TICK_TIME , callBack);
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80001a6:	f000 ff49 	bl	800103c <STK_voidSetIntervalPeriodic>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}

080001b2 <MRTOS_voidCallService>:


void MRTOS_voidCallService(u8 copy_u8ServiceID)
{
 80001b2:	b480      	push	{r7}
 80001b4:	b083      	sub	sp, #12
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	4603      	mov	r3, r0
 80001ba:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8ServiceID)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d006      	beq.n	80001d0 <MRTOS_voidCallService+0x1e>
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d006      	beq.n	80001d4 <MRTOS_voidCallService+0x22>
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d000      	beq.n	80001cc <MRTOS_voidCallService+0x1a>
			__asm("SVC #0x02");
			break;

	}

}
 80001ca:	e005      	b.n	80001d8 <MRTOS_voidCallService+0x26>
			__asm("SVC #0x00");
 80001cc:	df00      	svc	0
			break;
 80001ce:	e003      	b.n	80001d8 <MRTOS_voidCallService+0x26>
			__asm("SVC #0x01");
 80001d0:	df01      	svc	1
			break;
 80001d2:	e001      	b.n	80001d8 <MRTOS_voidCallService+0x26>
			__asm("SVC #0x02");
 80001d4:	df02      	svc	2
			break;
 80001d6:	bf00      	nop
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <HardFault_Handler>:
/******************************************************************************
* IRQ Faults
*******************************************************************************/
_attribute_(weak) void HardFault_Handler (void)
  {
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0
  	while(1);
 80001e6:	e7fe      	b.n	80001e6 <HardFault_Handler+0x4>

080001e8 <MemManage_Handler>:
  }

_attribute_(weak) void MemManage_Handler(void)
  {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  	while(1);
 80001ec:	e7fe      	b.n	80001ec <MemManage_Handler+0x4>

080001ee <BusFault_Handler>:
  }

_attribute_(weak) void BusFault_Handler(void)
  {
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0
  	while(1);
 80001f2:	e7fe      	b.n	80001f2 <BusFault_Handler+0x4>

080001f4 <UsageFault_Handler>:
  }

_attribute_(__WEAK__) void UsageFault_Handler(void)
  {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  	while(1);
 80001f8:	e7fe      	b.n	80001f8 <UsageFault_Handler+0x4>

080001fa <SVC_Handler>:
* IRQ Handler
*******************************************************************************/

__attribute ((naked)) void SVC_Handler(void)
{
  __asm(
 80001fa:	f01e 0f04 	tst.w	lr, #4
 80001fe:	bf0c      	ite	eq
 8000200:	f3ef 8008 	mrseq	r0, MSP
 8000204:	f3ef 8009 	mrsne	r0, PSP
 8000208:	f000 bbec 	b.w	80009e4 <_MRTOS_SVC_CALL_>
    "ITE EQ\n"
    "MRSEQ r0, MSP\n"
    "MRSNE r0, PSP\n"
    "B _MRTOS_SVC_CALL_ \n"
  ) ;
}
 800020c:	bf00      	nop

0800020e <queue_create>:
#include "../MRTOS/inc/queueConfig.h"
#include "../MRTOS/inc/queuePrivate.h"


QUEUE_STATE queue_create(queue_t *ptq)
{
 800020e:	b480      	push	{r7}
 8000210:	b083      	sub	sp, #12
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
    ptq->_rear = 0 ;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
    ptq->_front = 0 ;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	605a      	str	r2, [r3, #4]
    ptq->_counter = 0 ;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
    return QUEUE_NO_ERROR ;
 8000228:	2300      	movs	r3, #0
}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <queue_add>:
QUEUE_STATE queue_add(queueEntery dataEnqueue ,queue_t *ptq)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
    /* Check if it full */
    if(ptq->_counter >= queueSize)
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	2b05      	cmp	r3, #5
 8000244:	dd01      	ble.n	800024a <queue_add+0x16>
        return QUEUE_FULL ;
 8000246:	2301      	movs	r3, #1
 8000248:	e020      	b.n	800028c <queue_add+0x58>
    ptq->_rear = (ptq->_rear) % queueSize ;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6819      	ldr	r1, [r3, #0]
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <queue_add+0x64>)
 8000250:	fb83 3201 	smull	r3, r2, r3, r1
 8000254:	17cb      	asrs	r3, r1, #31
 8000256:	1ad2      	subs	r2, r2, r3
 8000258:	4613      	mov	r3, r2
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	4413      	add	r3, r2
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	1aca      	subs	r2, r1, r3
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	601a      	str	r2, [r3, #0]
    ptq->_queueArr[ptq->_rear] = dataEnqueue ;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	683a      	ldr	r2, [r7, #0]
 800026c:	3302      	adds	r3, #2
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	605a      	str	r2, [r3, #4]
    ptq->_rear++ ;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	601a      	str	r2, [r3, #0]
    ptq->_counter++;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	609a      	str	r2, [r3, #8]
    return QUEUE_NO_ERROR ;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	2aaaaaab 	.word	0x2aaaaaab

0800029c <queue_get>:


QUEUE_STATE queue_get(queueEntery *dataEnqueue ,queue_t *ptq)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
    /* Check if it empty */
    if(ptq->_counter == 0)
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d101      	bne.n	80002b2 <queue_get+0x16>
        return QUEUE_EMPTY ;
 80002ae:	2302      	movs	r3, #2
 80002b0:	e021      	b.n	80002f6 <queue_get+0x5a>
    ptq->_front = (ptq->_front) % queueSize ;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	6859      	ldr	r1, [r3, #4]
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <queue_get+0x64>)
 80002b8:	fb83 3201 	smull	r3, r2, r3, r1
 80002bc:	17cb      	asrs	r3, r1, #31
 80002be:	1ad2      	subs	r2, r2, r3
 80002c0:	4613      	mov	r3, r2
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	4413      	add	r3, r2
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	1aca      	subs	r2, r1, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	605a      	str	r2, [r3, #4]
    *dataEnqueue = ptq->_queueArr[ptq->_front]  ;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	3302      	adds	r3, #2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
    ptq->_front++ ;
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	605a      	str	r2, [r3, #4]
    ptq->_counter--;
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	1e5a      	subs	r2, r3, #1
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	609a      	str	r2, [r3, #8]
    return QUEUE_NO_ERROR ;
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	2aaaaaab 	.word	0x2aaaaaab

08000304 <queue_size>:
u8 queue_size(queue_t *ptq)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    return ptq->_counter ;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	b2db      	uxtb	r3, r3
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <MRTOS_staticMainStack>:
 * @brief This Function is used to create the Main stack area with used defined size @ref MainStackSize
 *
 * @return MRTOS_ErrorID return one of @ref MRTOS_ErrorID
 */
static MRTOS_ErrorID MRTOS_staticMainStack()
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 8000322:	2300      	movs	r3, #0
 8000324:	71fb      	strb	r3, [r7, #7]
	// Initialize start of main stack as top of HW stack
	OS_Control._S_MSP_Task = (u32)&START_OF_STACK_IN_HW ;
 8000326:	4a0d      	ldr	r2, [pc, #52]	; (800035c <MRTOS_staticMainStack+0x40>)
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <MRTOS_staticMainStack+0x44>)
 800032a:	601a      	str	r2, [r3, #0]
	// Initialize the end of main stack
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize ;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MRTOS_staticMainStack+0x44>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <MRTOS_staticMainStack+0x44>)
 8000336:	6053      	str	r3, [r2, #4]
	//	Check if exceeded the available stack size,The processor uses a full descending stack
	CHECK_STACK_OVF(OS_Control._E_MSP_Task) ;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MRTOS_staticMainStack+0x44>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <MRTOS_staticMainStack+0x48>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d201      	bcs.n	8000346 <MRTOS_staticMainStack+0x2a>
 8000342:	2301      	movs	r3, #1
 8000344:	71fb      	strb	r3, [r7, #7]
	// Reserve byte as safety and hold the last address in HW stack
	OS_Control.HW_Stack_Locator = 	( OS_Control._E_MSP_Task - SAFTY_SPACE_BETWEEN_STACKS) ;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MRTOS_staticMainStack+0x44>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	3b04      	subs	r3, #4
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <MRTOS_staticMainStack+0x44>)
 800034e:	6093      	str	r3, [r2, #8]

	return LOC_MRTOS_ErrorID ;
 8000350:	79fb      	ldrb	r3, [r7, #7]
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20002800 	.word	0x20002800
 8000360:	2000001c 	.word	0x2000001c
 8000364:	20000378 	.word	0x20000378

08000368 <MRTOS_staticIdleTask>:
/**
 * @brief Definition of Idle Task
 *
 */
static void MRTOS_staticIdleTask(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("WFE") ; //Enter Sleep Mode "Wait For Event IRQ, Exceptions"
 800036c:	bf20      	wfe
 800036e:	e7fd      	b.n	800036c <MRTOS_staticIdleTask+0x4>

08000370 <MRTOS_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
MRTOS_ErrorID MRTOS_voidInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 8000376:	2300      	movs	r3, #0
 8000378:	71fb      	strb	r3, [r7, #7]

	// HW initialize
	MRTOS_voidHardwareInit();
 800037a:	f7ff fef9 	bl	8000170 <MRTOS_voidHardwareInit>
		//	Specify Main Stack Area for OS
		//	Initiate Queue
		//	Configure IDLE TASK
	 */
	//	OS Start With Suspend State
	OS_Control.OS_State	=	OS_Suspend ;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MRTOS_voidInit+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	731a      	strb	r2, [r3, #12]

	//	Specify Main Stack Area for OS
	LOC_MRTOS_ErrorID = MRTOS_staticMainStack();
 8000384:	f7ff ffca 	bl	800031c <MRTOS_staticMainStack>
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]

	//	Initialize Task Queue
	LOC_MRTOS_ErrorID = queue_create(&Global_QueueOfReadyTasks)	;
 800038c:	480f      	ldr	r0, [pc, #60]	; (80003cc <MRTOS_voidInit+0x5c>)
 800038e:	f7ff ff3e 	bl	800020e <queue_create>
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	if(LOC_MRTOS_ErrorID != (MRTOS_ErrorID)QUEUE_NO_ERROR)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MRTOS_voidInit+0x30>
		LOC_MRTOS_ErrorID = ErrorInQueueInit	;
 800039c:	2302      	movs	r3, #2
 800039e:	71fb      	strb	r3, [r7, #7]
	Global_IdleTask.taskID = -1 ;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MRTOS_voidInit+0x60>)
 80003a2:	22ff      	movs	r2, #255	; 0xff
 80003a4:	701a      	strb	r2, [r3, #0]
	Global_IdleTask.taskPriority	=	0	;		//	Lowest Number is Lowest Priority
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <MRTOS_voidInit+0x60>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	721a      	strb	r2, [r3, #8]
	Global_IdleTask.pTaskFcn = MRTOS_staticIdleTask;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MRTOS_voidInit+0x60>)
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <MRTOS_voidInit+0x64>)
 80003b0:	60da      	str	r2, [r3, #12]

	// Initialize Idle Task
	MRTOS_staticIdleTaskInit();
	LOC_MRTOS_ErrorID = MRTOS_voidCreateTask(&Global_IdleTask);
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <MRTOS_voidInit+0x60>)
 80003b4:	f000 f810 	bl	80003d8 <MRTOS_voidCreateTask>
 80003b8:	4603      	mov	r3, r0
 80003ba:	71fb      	strb	r3, [r7, #7]

	return LOC_MRTOS_ErrorID ;
 80003bc:	79fb      	ldrb	r3, [r7, #7]

}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000001c 	.word	0x2000001c
 80003cc:	200000d0 	.word	0x200000d0
 80003d0:	20000050 	.word	0x20000050
 80003d4:	08000369 	.word	0x08000369

080003d8 <MRTOS_voidCreateTask>:

MRTOS_ErrorID MRTOS_voidCreateTask(MRTOS_Task* pTask)
{
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 80003e0:	2300      	movs	r3, #0
 80003e2:	75fb      	strb	r3, [r7, #23]

	// Set Start of Task Stack by HW Stack Locator in OS_Control
	pTask->taskPrivateStates._S_PSP_Task	=	OS_Control.HW_Stack_Locator	;
 80003e4:	4b39      	ldr	r3, [pc, #228]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	615a      	str	r2, [r3, #20]

	//	Set End of Stack E=	S - (Stack Size of Task + MIN_STACK_SIZE due to TCB)
	pTask->taskPrivateStates._E_PSP_Task	=	pTask->taskPrivateStates._S_PSP_Task - (pTask->taskStackSize + MIN_STACK_SIZE);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	f1a3 0284 	sub.w	r2, r3, #132	; 0x84
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	619a      	str	r2, [r3, #24]

	//	Check Overflow
	CHECK_STACK_OVF(pTask->taskPrivateStates._E_PSP_Task);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a33      	ldr	r2, [pc, #204]	; (80004d0 <MRTOS_voidCreateTask+0xf8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d201      	bcs.n	800040c <MRTOS_voidCreateTask+0x34>
 8000408:	2301      	movs	r3, #1
 800040a:	75fb      	strb	r3, [r7, #23]

	//Align 4 Byte as safety
	OS_Control.HW_Stack_Locator = pTask->taskPrivateStates._E_PSP_Task - SAFTY_SPACE_BETWEEN_STACKS	;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	3b04      	subs	r3, #4
 8000412:	4a2e      	ldr	r2, [pc, #184]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 8000414:	6093      	str	r3, [r2, #8]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	613b      	str	r3, [r7, #16]
	u8 LOC_u8Counter = 0 ;
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
	pTask->taskPrivateStates.pCurrentPSP = (u32 *)pTask->taskPrivateStates._S_PSP_Task	;
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	461a      	mov	r2, r3
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	61da      	str	r2, [r3, #28]
	DECREASE_PC_BY(pTask,1) ;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	1f1a      	subs	r2, r3, #4
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	61da      	str	r2, [r3, #28]
	*(pTask->taskPrivateStates.pCurrentPSP) =	RST_xPSR	;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800043a:	601a      	str	r2, [r3, #0]
	DECREASE_PC_BY(pTask,1) ;
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	1f1a      	subs	r2, r3, #4
 8000442:	693b      	ldr	r3, [r7, #16]
 8000444:	61da      	str	r2, [r3, #28]
	*(pTask->taskPrivateStates.pCurrentPSP) = (u32)pTask->pTaskFcn ;	//	PC Has the address of the Task to start execution
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	68da      	ldr	r2, [r3, #12]
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	601a      	str	r2, [r3, #0]
	DECREASE_PC_BY(pTask,1) ;
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	1f1a      	subs	r2, r3, #4
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	61da      	str	r2, [r3, #28]
	*(pTask->taskPrivateStates.pCurrentPSP) = RST_LR	;
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f06f 0202 	mvn.w	r2, #2
 8000462:	601a      	str	r2, [r3, #0]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < 13 ; LOC_u8Counter++ )
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
 8000468:	e00b      	b.n	8000482 <MRTOS_voidCreateTask+0xaa>
		DECREASE_PC_BY(pTask,1) ;
 800046a:	693b      	ldr	r3, [r7, #16]
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	1f1a      	subs	r2, r3, #4
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	61da      	str	r2, [r3, #28]
		*(pTask->taskPrivateStates.pCurrentPSP) = INIT_VAL_FOR_REG ;
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < 13 ; LOC_u8Counter++ )
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	2b0c      	cmp	r3, #12
 8000486:	d9f0      	bls.n	800046a <MRTOS_voidCreateTask+0x92>

	// Initialize Stack Area
	MRTOS_voidDesignTaskStack(pTask);

	//	Check Current Number of Tasks comparing between number of defined tasks
	if(OS_Control.CurrentNumberofTasks <= MAX_NUM_OF_TASKS)
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 800048a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800048e:	2b06      	cmp	r3, #6
 8000490:	d813      	bhi.n	80004ba <MRTOS_voidCreateTask+0xe2>
	{
		//	Update Scheduler Table
		OS_Control.OS_Tasks[OS_Control.CurrentNumberofTasks]= pTask ;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 8000494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000498:	490c      	ldr	r1, [pc, #48]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 800049a:	3304      	adds	r3, #4
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		OS_Control.CurrentNumberofTasks++ ;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 80004a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MRTOS_voidCreateTask+0xf4>)
 80004ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Update Task State
		pTask->taskPrivateStates.taskState = TS_Suspend ;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	741a      	strb	r2, [r3, #16]
 80004b8:	e001      	b.n	80004be <MRTOS_voidCreateTask+0xe6>
	}
	else
	{
		// Exceed Max Number of Tasks Defined by user
		LOC_MRTOS_ErrorID =	ExceedMaxNumberOfTasks ;
 80004ba:	2303      	movs	r3, #3
 80004bc:	75fb      	strb	r3, [r7, #23]
	}

	return LOC_MRTOS_ErrorID;
 80004be:	7dfb      	ldrb	r3, [r7, #23]

}
 80004c0:	4618      	mov	r0, r3
 80004c2:	371c      	adds	r7, #28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	2000001c 	.word	0x2000001c
 80004d0:	20000378 	.word	0x20000378

080004d4 <MRTOS_voidActiveTask>:

MRTOS_ErrorID MRTOS_voidActiveTask(MRTOS_Task* pTask)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NULL_ARGs ;
 80004dc:	2304      	movs	r3, #4
 80004de:	73fb      	strb	r3, [r7, #15]
	if(pTask != NULL)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d008      	beq.n	80004f8 <MRTOS_voidActiveTask+0x24>
	{
		LOC_MRTOS_ErrorID =	NoError  ;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
		// Add It in Waiting State
		pTask->taskPrivateStates.taskState = TS_Waiting;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2202      	movs	r2, #2
 80004ee:	741a      	strb	r2, [r3, #16]
		// Call Service Called SVC_ID_ACTIVE_TASk
		MRTOS_voidCallService((u8)SVC_ID_ACTIVE_TASK);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff fe5e 	bl	80001b2 <MRTOS_voidCallService>
 80004f6:	e001      	b.n	80004fc <MRTOS_voidActiveTask+0x28>
	}
	else
	{
		LOC_MRTOS_ErrorID =	NULL_ARGs ;
 80004f8:	2304      	movs	r3, #4
 80004fa:	73fb      	strb	r3, [r7, #15]
	}

	return LOC_MRTOS_ErrorID ;
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <MRTOS_voidTaskDelay>:

	return LOC_MRTOS_ErrorID ;
}

MRTOS_ErrorID MRTOS_voidTaskDelay(MRTOS_Task* pTask, u32 copy_u32NumberofTicks)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
	// Change Task state to be Suspend
	pTask->taskPrivateStates.taskState = TS_Suspend;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	741a      	strb	r2, [r3, #16]
	// Enable Function Delay
	pTask->taskPrivateStates.TimeDelayFlag = 1 ;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	f883 2020 	strb.w	r2, [r3, #32]
	// Add number of ticks
	pTask->taskPrivateStates._taskDelayTime = copy_u32NumberofTicks;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	625a      	str	r2, [r3, #36]	; 0x24
	// Call its SVC
	MRTOS_voidCallService((u8)SVC_ID_TASK_DELAY);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe42 	bl	80001b2 <MRTOS_voidCallService>



	return LOC_MRTOS_ErrorID ;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <MRTOS_voidStartScheduler>:

MRTOS_ErrorID MRTOS_voidStartScheduler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 800053e:	2300      	movs	r3, #0
 8000540:	71fb      	strb	r3, [r7, #7]

	// Set Mode
	OS_Control.OS_State = OS_Running ;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <MRTOS_voidStartScheduler+0x54>)
 8000544:	2201      	movs	r2, #1
 8000546:	731a      	strb	r2, [r3, #12]
	// Initial Task
	OS_Control.OS_currentTask = &Global_IdleTask ;
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <MRTOS_voidStartScheduler+0x54>)
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <MRTOS_voidStartScheduler+0x58>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
	// Set PSP
	PSRC_voidSetPSP((u32)OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP);
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MRTOS_voidStartScheduler+0x54>)
 8000550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	603b      	str	r3, [r7, #0]
 */
FORCE_INLINE void PSRC_voidSetPSP(u32 copy_u32topOfPSP)
{
	/********************************** DON'T EDIT ANYTHING HERE	***********************************/
	// copy_u32topOfPSP --> is already in R0 as a param
	__asm volatile
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	f383 8809 	msr	PSP, r3
	// Active Task
	MRTOS_voidActiveTask(&Global_IdleTask);
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <MRTOS_voidStartScheduler+0x58>)
 800055e:	f7ff ffb9 	bl	80004d4 <MRTOS_voidActiveTask>
	// Start Ticker
	MRTOS_voidStartTicker(MRTOS_voidTickerHandler);
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <MRTOS_voidStartScheduler+0x5c>)
 8000564:	f7ff fe16 	bl	8000194 <MRTOS_voidStartTicker>
    __asm volatile (
 8000568:	f3ef 8014 	mrs	r0, CONTROL
 800056c:	f040 0002 	orr.w	r0, r0, #2
 8000570:	f380 8814 	msr	CONTROL, r0
	// Switch PSP
	PSRC_voidSetUsageStackPointer(_PSP);
	// Unprivileged Mode
	PSRC_voidSetAccessLevel(PSRC_UNPRIVILEGED_ACCESS);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fcbf 	bl	8000ef8 <PSRC_voidSetAccessLevel>

	// Call Entry Point of Task
	OS_Control.OS_currentTask->pTaskFcn();
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <MRTOS_voidStartScheduler+0x54>)
 800057c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	4798      	blx	r3

	return LOC_MRTOS_ErrorID ;
 8000582:	79fb      	ldrb	r3, [r7, #7]

}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000001c 	.word	0x2000001c
 8000590:	20000050 	.word	0x20000050
 8000594:	08000a35 	.word	0x08000a35

08000598 <MRTOS_AquireBinarySemaphore>:
}
#endif

#if ENABLE_BINARY_SAMPHORE == 1
MRTOS_ErrorID MRTOS_AquireBinarySemaphore(MRTOS_BinarySamphore *pSamphore)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	if(pSamphore->QueuePrivateData.msgWaitingCounter == 0)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d105      	bne.n	80005b8 <MRTOS_AquireBinarySemaphore+0x20>
	{
		pSamphore->QueuePrivateData.msgWaitingCounter++;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	e008      	b.n	80005ca <MRTOS_AquireBinarySemaphore+0x32>
	}
	else if(pSamphore->QueuePrivateData.msgWaitingCounter == 1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d102      	bne.n	80005c6 <MRTOS_AquireBinarySemaphore+0x2e>
	{
		LOC_MRTOS_ErrorID = INVALID_OPERATION ;
 80005c0:	2305      	movs	r3, #5
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e001      	b.n	80005ca <MRTOS_AquireBinarySemaphore+0x32>
	}
	else
	{
		// Shouldn't be here
		LOC_MRTOS_ErrorID = INVALID_OPERATION ;
 80005c6:	2305      	movs	r3, #5
 80005c8:	73fb      	strb	r3, [r7, #15]

	}
	return LOC_MRTOS_ErrorID;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <MRTOS_ReleaseBinarySemaphore>:

MRTOS_ErrorID MRTOS_ReleaseBinarySemaphore(MRTOS_BinarySamphore *pSamphore)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
	if(pSamphore->QueuePrivateData.msgWaitingCounter == 0)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <MRTOS_ReleaseBinarySemaphore+0x1a>
	{
		LOC_MRTOS_ErrorID = INVALID_OPERATION ;
 80005ea:	2305      	movs	r3, #5
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e00b      	b.n	8000608 <MRTOS_ReleaseBinarySemaphore+0x32>
	}
	else if(pSamphore->QueuePrivateData.msgWaitingCounter == 1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d105      	bne.n	8000604 <MRTOS_ReleaseBinarySemaphore+0x2e>
	{
		pSamphore->QueuePrivateData.msgWaitingCounter--;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	1e5a      	subs	r2, r3, #1
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	e001      	b.n	8000608 <MRTOS_ReleaseBinarySemaphore+0x32>
	}
	else
	{
		// Shouldn't be here
		LOC_MRTOS_ErrorID = INVALID_OPERATION ;
 8000604:	2305      	movs	r3, #5
 8000606:	73fb      	strb	r3, [r7, #15]
	}
	return LOC_MRTOS_ErrorID;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <MRTOS_GetBinarySemaphoreState>:
MRTOS_ErrorID MRTOS_GetBinarySemaphoreState(MRTOS_BinarySamphore *pSamphore, u8 *ptr_u8Flag)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	MRTOS_ErrorID	LOC_MRTOS_ErrorID =	NoError ;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]

	if(pSamphore->QueuePrivateData.msgWaitingCounter == 0 || pSamphore->QueuePrivateData.msgWaitingCounter == 1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d003      	beq.n	8000632 <MRTOS_GetBinarySemaphoreState+0x1e>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d105      	bne.n	800063e <MRTOS_GetBinarySemaphoreState+0x2a>
	{
		*ptr_u8Flag =  pSamphore->QueuePrivateData.msgWaitingCounter  ;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e001      	b.n	8000642 <MRTOS_GetBinarySemaphoreState+0x2e>
	}
	else
	{
		// Shouldn't be here
		LOC_MRTOS_ErrorID = INVALID_OPERATION ;
 800063e:	2305      	movs	r3, #5
 8000640:	73fb      	strb	r3, [r7, #15]
	}
	return LOC_MRTOS_ErrorID;
 8000642:	7bfb      	ldrb	r3, [r7, #15]


}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <MRTOS_staticFirstStageSchedular>:
	}


}
static void MRTOS_staticFirstStageSchedular(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0


	//MRTOS_Task *LOC_tempTask = NULL ;
	MRTOS_Task *LOC_currentTask = NULL , *LOC_nextTask = NULL ;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]

	//QUEUE_STATE LOC_TrackError = QUEUE_NO_ERROR ;

	u8 LOC_u8Counter = 0 ;
 800065e:	2300      	movs	r3, #0
 8000660:	75fb      	strb	r3, [r7, #23]
	u8 LOC_u8Counter = 0 ;
 8000662:	2300      	movs	r3, #0
 8000664:	72fb      	strb	r3, [r7, #11]
	MRTOS_Task *LOC_tempTask = NULL ;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 800066a:	2300      	movs	r3, #0
 800066c:	72fb      	strb	r3, [r7, #11]
 800066e:	e032      	b.n	80006d6 <MRTOS_staticFirstStageSchedular+0x86>
		Loc_u8Key =  LOC_u8Counter ;
 8000670:	7afb      	ldrb	r3, [r7, #11]
 8000672:	70fb      	strb	r3, [r7, #3]
 8000674:	e01a      	b.n	80006ac <MRTOS_staticFirstStageSchedular+0x5c>
				LOC_tempTask = (OS_Control.OS_Tasks[Loc_u8Key]);
 8000676:	78fb      	ldrb	r3, [r7, #3]
 8000678:	4a3a      	ldr	r2, [pc, #232]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 800067a:	3304      	adds	r3, #4
 800067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000680:	607b      	str	r3, [r7, #4]
				OS_Control.OS_Tasks[Loc_u8Key] = OS_Control.OS_Tasks[Loc_u8Key-1];
 8000682:	78fb      	ldrb	r3, [r7, #3]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	4936      	ldr	r1, [pc, #216]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 800068a:	3204      	adds	r2, #4
 800068c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000690:	4934      	ldr	r1, [pc, #208]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 8000692:	3304      	adds	r3, #4
 8000694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[Loc_u8Key-1] = LOC_tempTask ;
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	3b01      	subs	r3, #1
 800069c:	4931      	ldr	r1, [pc, #196]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 800069e:	3304      	adds	r3, #4
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Loc_u8Key-- ;
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	70fb      	strb	r3, [r7, #3]
		while(
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00e      	beq.n	80006d0 <MRTOS_staticFirstStageSchedular+0x80>
			 ((OS_Control.OS_Tasks[Loc_u8Key]->taskPriority) >  (OS_Control.OS_Tasks[Loc_u8Key-1]->taskPriority) )
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 80006b6:	3304      	adds	r3, #4
 80006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006bc:	7a1a      	ldrb	r2, [r3, #8]
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	4928      	ldr	r1, [pc, #160]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 80006c4:	3304      	adds	r3, #4
 80006c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ca:	7a1b      	ldrb	r3, [r3, #8]
			 Loc_u8Key > 0 &&
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d8d2      	bhi.n	8000676 <MRTOS_staticFirstStageSchedular+0x26>
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 80006d0:	7afb      	ldrb	r3, [r7, #11]
 80006d2:	3301      	adds	r3, #1
 80006d4:	72fb      	strb	r3, [r7, #11]
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 80006d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80006dc:	7afa      	ldrb	r2, [r7, #11]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3c6      	bcc.n	8000670 <MRTOS_staticFirstStageSchedular+0x20>
	// Sort Tasks
	MRTOS_voidInsertionSort();

// Select Current and Next Task
	// 1- Free Ready Queue By Reinitialize it.
	queue_create(&Global_QueueOfReadyTasks);
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <MRTOS_staticFirstStageSchedular+0x118>)
 80006e4:	f7ff fd93 	bl	800020e <queue_create>
	//while(queue_get(&LOC_tempTask, &Global_QueueOfReadyTasks) != QUEUE_EMPTY);

	// 2- Update Ready Queue
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
 80006ec:	e02e      	b.n	800074c <MRTOS_staticFirstStageSchedular+0xfc>
	{
		// OS_Control.OS_Tasks Sorted By default so add not suspended tasks to ready queue
		// Waiting Task will be ready if it highest priority
		LOC_currentTask = OS_Control.OS_Tasks[LOC_u8Counter];
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 80006f2:	3304      	adds	r3, #4
 80006f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f8:	613b      	str	r3, [r7, #16]
		LOC_nextTask = OS_Control.OS_Tasks[LOC_u8Counter+1];
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 8000700:	3304      	adds	r3, #4
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	60fb      	str	r3, [r7, #12]
		if(LOC_currentTask->taskPrivateStates.taskState != TS_Suspend)
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	7c1b      	ldrb	r3, [r3, #16]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01a      	beq.n	8000746 <MRTOS_staticFirstStageSchedular+0xf6>
		{
			// Check Priority Options
			if(LOC_currentTask->taskPriority > LOC_nextTask->taskPriority)
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	7a1a      	ldrb	r2, [r3, #8]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	429a      	cmp	r2, r3
 800071a:	d907      	bls.n	800072c <MRTOS_staticFirstStageSchedular+0xdc>
			{
				// Enqueue Current Task and Break ;
				queue_add(LOC_currentTask, &Global_QueueOfReadyTasks);
 800071c:	4912      	ldr	r1, [pc, #72]	; (8000768 <MRTOS_staticFirstStageSchedular+0x118>)
 800071e:	6938      	ldr	r0, [r7, #16]
 8000720:	f7ff fd88 	bl	8000234 <queue_add>
				LOC_currentTask->taskPrivateStates.taskState= TS_Ready ;
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2203      	movs	r2, #3
 8000728:	741a      	strb	r2, [r3, #16]
				break ;
 800072a:	e017      	b.n	800075c <MRTOS_staticFirstStageSchedular+0x10c>

			}
			else if(LOC_currentTask->taskPriority == LOC_nextTask->taskPriority)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	7a1a      	ldrb	r2, [r3, #8]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	7a1b      	ldrb	r3, [r3, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d110      	bne.n	800075a <MRTOS_staticFirstStageSchedular+0x10a>
			{
				// Round-Robin
				// Enqueue to Ready Queue
				queue_add(LOC_currentTask, &Global_QueueOfReadyTasks);
 8000738:	490b      	ldr	r1, [pc, #44]	; (8000768 <MRTOS_staticFirstStageSchedular+0x118>)
 800073a:	6938      	ldr	r0, [r7, #16]
 800073c:	f7ff fd7a 	bl	8000234 <queue_add>
				LOC_currentTask->taskPrivateStates.taskState= TS_Ready ;
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2203      	movs	r2, #3
 8000744:	741a      	strb	r2, [r3, #16]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	3301      	adds	r3, #1
 800074a:	75fb      	strb	r3, [r7, #23]
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MRTOS_staticFirstStageSchedular+0x114>)
 800074e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000752:	7dfa      	ldrb	r2, [r7, #23]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3ca      	bcc.n	80006ee <MRTOS_staticFirstStageSchedular+0x9e>
				break ;
			}
		}

	}
}
 8000758:	e000      	b.n	800075c <MRTOS_staticFirstStageSchedular+0x10c>
				break ;
 800075a:	bf00      	nop
}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000001c 	.word	0x2000001c
 8000768:	200000d0 	.word	0x200000d0

0800076c <MRTOS_staticSecondStageSchedular>:
static void MRTOS_staticSecondStageSchedular()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	// I 've a queue of Ready tasks need to be executed
	u8 LOC_u8QueueSize = queue_size(&Global_QueueOfReadyTasks);
 8000772:	4829      	ldr	r0, [pc, #164]	; (8000818 <MRTOS_staticSecondStageSchedular+0xac>)
 8000774:	f7ff fdc6 	bl	8000304 <queue_size>
 8000778:	4603      	mov	r3, r0
 800077a:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Counter = 0 ;
 800077c:	2300      	movs	r3, #0
 800077e:	71fb      	strb	r3, [r7, #7]
	MRTOS_Task *LOC_currentTask = NULL ;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
	// Queue LOC_u8Counter == 1 if there is one task that has the highest priority
	if(0 == LOC_u8QueueSize)
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d103      	bne.n	8000792 <MRTOS_staticSecondStageSchedular+0x26>
	{
		// Run Idle Task
		OS_Control.OS_nextTask = &Global_IdleTask ;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 800078c:	4a24      	ldr	r2, [pc, #144]	; (8000820 <MRTOS_staticSecondStageSchedular+0xb4>)
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
		OS_Control.OS_nextTask = LOC_currentTask ;
		OS_Control.OS_nextTask->taskPrivateStates.taskState = TS_Running;

	}

}
 8000790:	e03e      	b.n	8000810 <MRTOS_staticSecondStageSchedular+0xa4>
	else if(1 == LOC_u8QueueSize)
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d114      	bne.n	80007c2 <MRTOS_staticSecondStageSchedular+0x56>
		queue_get(&LOC_currentTask, &Global_QueueOfReadyTasks);
 8000798:	463b      	mov	r3, r7
 800079a:	491f      	ldr	r1, [pc, #124]	; (8000818 <MRTOS_staticSecondStageSchedular+0xac>)
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd7d 	bl	800029c <queue_get>
		if(LOC_currentTask->taskPrivateStates.taskState != TS_Suspend)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	7c1b      	ldrb	r3, [r3, #16]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d007      	beq.n	80007ba <MRTOS_staticSecondStageSchedular+0x4e>
			OS_Control.OS_nextTask = LOC_currentTask ;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 80007ae:	62d3      	str	r3, [r2, #44]	; 0x2c
			OS_Control.OS_nextTask->taskPrivateStates.taskState = TS_Running;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 80007b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b4:	2201      	movs	r2, #1
 80007b6:	741a      	strb	r2, [r3, #16]
}
 80007b8:	e02a      	b.n	8000810 <MRTOS_staticSecondStageSchedular+0xa4>
			OS_Control.OS_nextTask = &Global_IdleTask ;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MRTOS_staticSecondStageSchedular+0xb4>)
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007c0:	e026      	b.n	8000810 <MRTOS_staticSecondStageSchedular+0xa4>
		for(LOC_u8Counter = 0 ; LOC_u8Counter <  LOC_u8QueueSize ; LOC_u8Counter++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	e011      	b.n	80007ec <MRTOS_staticSecondStageSchedular+0x80>
			queue_get(&LOC_currentTask, &Global_QueueOfReadyTasks);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4913      	ldr	r1, [pc, #76]	; (8000818 <MRTOS_staticSecondStageSchedular+0xac>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd65 	bl	800029c <queue_get>
			if(OS_Control.OS_currentTask == LOC_currentTask)
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 80007d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d00c      	beq.n	80007f6 <MRTOS_staticSecondStageSchedular+0x8a>
			queue_add(LOC_currentTask, &Global_QueueOfReadyTasks);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <MRTOS_staticSecondStageSchedular+0xac>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fd27 	bl	8000234 <queue_add>
		for(LOC_u8Counter = 0 ; LOC_u8Counter <  LOC_u8QueueSize ; LOC_u8Counter++)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3301      	adds	r3, #1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3e9      	bcc.n	80007c8 <MRTOS_staticSecondStageSchedular+0x5c>
 80007f4:	e000      	b.n	80007f8 <MRTOS_staticSecondStageSchedular+0x8c>
				break;
 80007f6:	bf00      	nop
		queue_get(&LOC_currentTask, &Global_QueueOfReadyTasks);
 80007f8:	463b      	mov	r3, r7
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <MRTOS_staticSecondStageSchedular+0xac>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd4d 	bl	800029c <queue_get>
		OS_Control.OS_nextTask = LOC_currentTask ;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 8000806:	62d3      	str	r3, [r2, #44]	; 0x2c
		OS_Control.OS_nextTask->taskPrivateStates.taskState = TS_Running;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <MRTOS_staticSecondStageSchedular+0xb0>)
 800080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080c:	2201      	movs	r2, #1
 800080e:	741a      	strb	r2, [r3, #16]
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000d0 	.word	0x200000d0
 800081c:	2000001c 	.word	0x2000001c
 8000820:	20000050 	.word	0x20000050

08000824 <PendSV_Handler>:
__attribute__((naked)) void PEND_SV_HANDLER_NAME (void)
{
	/**************************************	Critical Section	*************************************/
	  __asm volatile ("CPSID i");
 8000824:	b672      	cpsid	i
 * @return U32 --> Current Stack Pointer address
 */
FORCE_INLINE u32 PSRC_voidGetPSP(void)
{
	/********************************** DON'T EDIT ANYTHING HERE	***********************************/
	u32 Loc_u32TopOfStack =  0 ;
 8000826:	2400      	movs	r4, #0
	__asm volatile
 8000828:	f3ef 8309 	mrs	r3, PSP
 800082c:	461c      	mov	r4, r3
					(
							"MRS %0 , PSP " : "=r"(Loc_u32TopOfStack)
					);
	return (Loc_u32TopOfStack);
 800082e:	4622      	mov	r2, r4
	// Save Current Context
	// xPSR,............,R0 automatically Pushed
	OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP = (u32*)PSRC_voidGetPSP();
 8000830:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000834:	61da      	str	r2, [r3, #28]

	// Store Rest of Registers R11,R10,R9,R8,R7,R6,R5,R4
	// #define DECREASE_PC_BY(TSK_REF, NUM)	TSK_REF->taskPrivateStates.pCurrentPSP -=NUM


	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 8000836:	4b6a      	ldr	r3, [pc, #424]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	4b68      	ldr	r3, [pc, #416]	; (80009e0 <PendSV_Handler+0x1bc>)
 800083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000840:	3a04      	subs	r2, #4
 8000842:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R4	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 8000844:	4b66      	ldr	r3, [pc, #408]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4622      	mov	r2, r4
 800084c:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000852:	69da      	ldr	r2, [r3, #28]
 8000854:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000858:	3a04      	subs	r2, #4
 800085a:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R5	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 800085c:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <PendSV_Handler+0x1bc>)
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	462a      	mov	r2, r5
 8000864:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 8000866:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086a:	69da      	ldr	r2, [r3, #28]
 800086c:	4b5c      	ldr	r3, [pc, #368]	; (80009e0 <PendSV_Handler+0x1bc>)
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	3a04      	subs	r2, #4
 8000872:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R6	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4632      	mov	r2, r6
 800087c:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 800087e:	4b58      	ldr	r3, [pc, #352]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000888:	3a04      	subs	r2, #4
 800088a:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R7	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 800088c:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <PendSV_Handler+0x1bc>)
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	463a      	mov	r2, r7
 8000894:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 8000896:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	4b50      	ldr	r3, [pc, #320]	; (80009e0 <PendSV_Handler+0x1bc>)
 800089e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a0:	3a04      	subs	r2, #4
 80008a2:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R8	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 80008a4:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4642      	mov	r2, r8
 80008ac:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b8:	3a04      	subs	r2, #4
 80008ba:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R9	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 80008bc:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	464a      	mov	r2, r9
 80008c4:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	3a04      	subs	r2, #4
 80008d2:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R10	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 80008d4:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4652      	mov	r2, sl
 80008dc:	601a      	str	r2, [r3, #0]

	DECREASE_PC_BY(OS_Control.OS_currentTask,1);	// Decrease Current SP by one
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	3a04      	subs	r2, #4
 80008ea:	61da      	str	r2, [r3, #28]
	__asm volatile ("MOV %0,R11	" : "=r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 80008ec:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	465a      	mov	r2, fp
 80008f4:	601a      	str	r2, [r3, #0]


	// Restore the Next Task
	if(OS_Control.OS_nextTask != NULL)
 80008f6:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <PendSV_Handler+0x1bc>)
 80008f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <PendSV_Handler+0xe8>
	{
		OS_Control.OS_currentTask = OS_Control.OS_nextTask;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000904:	6293      	str	r3, [r2, #40]	; 0x28
		OS_Control.OS_nextTask = NULL ;
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	// TSK_REF->taskPrivateStates.pCurrentPSP +=NUM
	__asm volatile ("MOV R11,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <PendSV_Handler+0x1bc>)
 800090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	469b      	mov	fp, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	69da      	ldr	r2, [r3, #28]
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <PendSV_Handler+0x1bc>)
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	3204      	adds	r2, #4
 8000922:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R10,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	469a      	mov	sl, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	3204      	adds	r2, #4
 800093a:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R9,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <PendSV_Handler+0x1bc>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4699      	mov	r9, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <PendSV_Handler+0x1bc>)
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	3204      	adds	r2, #4
 8000952:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R8,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4698      	mov	r8, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	3204      	adds	r2, #4
 800096a:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R7,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <PendSV_Handler+0x1bc>)
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	461f      	mov	r7, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <PendSV_Handler+0x1bc>)
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	3204      	adds	r2, #4
 8000982:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R6,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	461e      	mov	r6, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <PendSV_Handler+0x1bc>)
 8000996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000998:	3204      	adds	r2, #4
 800099a:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R5,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <PendSV_Handler+0x1bc>)
 800099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	461d      	mov	r5, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <PendSV_Handler+0x1bc>)
 80009a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009aa:	69da      	ldr	r2, [r3, #28]
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <PendSV_Handler+0x1bc>)
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	3204      	adds	r2, #4
 80009b2:	61da      	str	r2, [r3, #28]

	__asm volatile ("MOV R4,%0" : :"r"(*(OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP)));
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <PendSV_Handler+0x1bc>)
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	461c      	mov	r4, r3
	INCREASE_PC_BY(OS_Control.OS_currentTask,1);	// increase Current SP by one
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <PendSV_Handler+0x1bc>)
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	69da      	ldr	r2, [r3, #28]
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <PendSV_Handler+0x1bc>)
 80009c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c8:	3204      	adds	r2, #4
 80009ca:	61da      	str	r2, [r3, #28]

	// Update PSP <<-- SP
	PSRC_voidSetPSP((u32)OS_Control.OS_currentTask->taskPrivateStates.pCurrentPSP);
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <PendSV_Handler+0x1bc>)
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	461c      	mov	r4, r3
	__asm volatile
 80009d4:	f384 8809 	msr	PSP, r4

	// Enable IRQ
	__asm volatile ("CPSIE i");
 80009d8:	b662      	cpsie	i
	__asm("BX LR");
 80009da:	4770      	bx	lr

}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	2000001c 	.word	0x2000001c

080009e4 <_MRTOS_SVC_CALL_>:
/******************************************************************************
* Handler Mode
*******************************************************************************/
void _MRTOS_SVC_CALL_( u32 *svc_args )
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /*
  * Stack contains:
  * r0, r1, r2, r3, r12, r14, LR, PC and xPSR
  * First argument (r0) is svc_args[0]
  */
  u8 svc_number = 	*((u8 *)(((u8*)svc_args[6])-2)) ;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3318      	adds	r3, #24
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3b02      	subs	r3, #2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	73fb      	strb	r3, [r7, #15]

  switch( svc_number)
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	3300      	adds	r3, #0
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d80f      	bhi.n	8000a20 <_MRTOS_SVC_CALL_+0x3c>
    case SVC_ID_ACTIVE_TASK:
    case SVC_ID_TERMINATE_TASk :
    case SVC_ID_TASK_DELAY :

    	// Update Scheduler Table and Ready Queue
    	MRTOS_staticFirstStageSchedular();
 8000a00:	f7ff fe26 	bl	8000650 <MRTOS_staticFirstStageSchedular>
    	// Check if OS Working
    	if(OS_Control.OS_State == OS_Running)
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <_MRTOS_SVC_CALL_+0x4c>)
 8000a06:	7b1b      	ldrb	r3, [r3, #12]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10b      	bne.n	8000a24 <_MRTOS_SVC_CALL_+0x40>
    	{
    		if(OS_Control.OS_currentTask->taskID != (u8)-1)
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_MRTOS_SVC_CALL_+0x4c>)
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2bff      	cmp	r3, #255	; 0xff
 8000a14:	d006      	beq.n	8000a24 <_MRTOS_SVC_CALL_+0x40>
    		{
        		//	Calling Dispatcher
        		MRTOS_staticSecondStageSchedular();
 8000a16:	f7ff fea9 	bl	800076c <MRTOS_staticSecondStageSchedular>
        		// Context Switching
        		SCB_voidTrigPendSV();
 8000a1a:	f000 fad5 	bl	8000fc8 <SCB_voidTrigPendSV>
    		}

    	}
    	break;
 8000a1e:	e001      	b.n	8000a24 <_MRTOS_SVC_CALL_+0x40>
    default:    /* unknown SVC */
      break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <_MRTOS_SVC_CALL_+0x42>
    	break;
 8000a24:	bf00      	nop
  }

}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000001c 	.word	0x2000001c

08000a34 <MRTOS_voidTickerHandler>:


}
 u32 counter ;
static void MRTOS_voidTickerHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	counter++;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MRTOS_voidTickerHandler+0xa0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <MRTOS_voidTickerHandler+0xa0>)
 8000a42:	6013      	str	r3, [r2, #0]
	u8 LOC_u8Counter = 0 ;
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	e032      	b.n	8000ab4 <MRTOS_voidTickerHandler+0x80>
		if((OS_Control.OS_Tasks[LOC_u8Counter]->taskPrivateStates.taskState == TS_Suspend) && (OS_Control.OS_Tasks[LOC_u8Counter]->taskPrivateStates.TimeDelayFlag == 1))
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000a52:	3304      	adds	r3, #4
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	7c1b      	ldrb	r3, [r3, #16]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d127      	bne.n	8000aae <MRTOS_voidTickerHandler+0x7a>
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000a62:	3304      	adds	r3, #4
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d11e      	bne.n	8000aae <MRTOS_voidTickerHandler+0x7a>
			OS_Control.OS_Tasks[LOC_u8Counter]->taskPrivateStates._taskDelayTime-- ;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000a74:	3304      	adds	r3, #4
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7c:	3a01      	subs	r2, #1
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
			if(OS_Control.OS_Tasks[LOC_u8Counter]->taskPrivateStates._taskDelayTime == 0)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000a84:	3304      	adds	r3, #4
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10e      	bne.n	8000aae <MRTOS_voidTickerHandler+0x7a>
				OS_Control.OS_Tasks[LOC_u8Counter]->taskPrivateStates.TimeDelayFlag = 0 ;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000a94:	3304      	adds	r3, #4
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
				OS_Control.OS_Tasks[LOC_u8Counter]->taskPrivateStates.taskState= TS_Waiting ;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	2202      	movs	r2, #2
 8000aac:	741a      	strb	r2, [r3, #16]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MRTOS_voidTickerHandler+0xa4>)
 8000ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d3c6      	bcc.n	8000a4e <MRTOS_voidTickerHandler+0x1a>
	// With Every Tick, Check Delayed Tasks First
	MRTOS_staticCheckDelayedTasks();
	// With Every Tick Evaluate the scheduler table
	MRTOS_staticFirstStageSchedular();
 8000ac0:	f7ff fdc6 	bl	8000650 <MRTOS_staticFirstStageSchedular>
	// Select Tasks
	MRTOS_staticSecondStageSchedular();
 8000ac4:	f7ff fe52 	bl	800076c <MRTOS_staticSecondStageSchedular>
	// Context Switching
	SCB_voidTrigPendSV();
 8000ac8:	f000 fa7e 	bl	8000fc8 <SCB_voidTrigPendSV>

}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000010c 	.word	0x2000010c
 8000ad8:	2000001c 	.word	0x2000001c

08000adc <EXTI0_IRQHandler>:
    EXTI_PtrFunction[copy_LineID] = ptr_ISRFunc ; 
}

/************************************* Callback Functions   ********************************/
   void EXTI0_IRQHandler(void)
  {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[0]();
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <EXTI0_IRQHandler+0x1c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<0);
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <EXTI0_IRQHandler+0x20>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <EXTI0_IRQHandler+0x20>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6153      	str	r3, [r2, #20]

  }
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000078 	.word	0x20000078
 8000afc:	40010400 	.word	0x40010400

08000b00 <EXTI1_IRQHandler>:
   void EXTI1_IRQHandler(void)
  {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[1]();
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <EXTI1_IRQHandler+0x1c>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<1);
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI1_IRQHandler+0x20>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI1_IRQHandler+0x20>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6153      	str	r3, [r2, #20]
  }
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000078 	.word	0x20000078
 8000b20:	40010400 	.word	0x40010400

08000b24 <EXTI2_IRQHandler>:
   void EXTI2_IRQHandler(void)
  {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[2]();
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <EXTI2_IRQHandler+0x1c>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<2);
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <EXTI2_IRQHandler+0x20>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <EXTI2_IRQHandler+0x20>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6153      	str	r3, [r2, #20]
  }
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000078 	.word	0x20000078
 8000b44:	40010400 	.word	0x40010400

08000b48 <EXTI3_IRQHandler>:
   void EXTI3_IRQHandler(void)
  {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[3]();
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <EXTI3_IRQHandler+0x1c>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<3);
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <EXTI3_IRQHandler+0x20>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EXTI3_IRQHandler+0x20>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6153      	str	r3, [r2, #20]
  }
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000078 	.word	0x20000078
 8000b68:	40010400 	.word	0x40010400

08000b6c <EXTI4_IRQHandler>:
   void EXTI4_IRQHandler(void)
  {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[4]();
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <EXTI4_IRQHandler+0x1c>)
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<4);
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <EXTI4_IRQHandler+0x20>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <EXTI4_IRQHandler+0x20>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6153      	str	r3, [r2, #20]
  }
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	40010400 	.word	0x40010400

08000b90 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	71bb      	strb	r3, [r7, #6]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	717b      	strb	r3, [r7, #5]
    	switch(Copy_u8Port)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d03e      	beq.n	8000c26 <GPIO_voidSetPinDirection+0x96>
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d075      	beq.n	8000c98 <GPIO_voidSetPinDirection+0x108>
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d000      	beq.n	8000bb2 <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 8000bb0:	e0a9      	b.n	8000d06 <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d817      	bhi.n	8000be8 <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 8000bb8:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	79ba      	ldrb	r2, [r7, #6]
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc6:	43d2      	mvns	r2, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a51      	ldr	r2, [pc, #324]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000bcc:	400b      	ands	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	7979      	ldrb	r1, [r7, #5]
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	fa01 f202 	lsl.w	r2, r1, r2
 8000bde:	4611      	mov	r1, r2
 8000be0:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000be2:	430b      	orrs	r3, r1
 8000be4:	6013      	str	r3, [r2, #0]
			break;
 8000be6:	e089      	b.n	8000cfc <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	f200 8086 	bhi.w	8000cfc <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	3b08      	subs	r3, #8
 8000bf4:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 8000bf6:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	79ba      	ldrb	r2, [r7, #6]
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	210f      	movs	r1, #15
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	4611      	mov	r1, r2
 8000c08:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	7979      	ldrb	r1, [r7, #5]
 8000c14:	79ba      	ldrb	r2, [r7, #6]
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4a3c      	ldr	r2, [pc, #240]	; (8000d10 <GPIO_voidSetPinDirection+0x180>)
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6053      	str	r3, [r2, #4]
			break;
 8000c24:	e06a      	b.n	8000cfc <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d817      	bhi.n	8000c5c <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	79ba      	ldrb	r2, [r7, #6]
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	210f      	movs	r1, #15
 8000c36:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3a:	43d2      	mvns	r2, r2
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4a35      	ldr	r2, [pc, #212]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c40:	400b      	ands	r3, r1
 8000c42:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	7979      	ldrb	r1, [r7, #5]
 8000c4a:	79ba      	ldrb	r2, [r7, #6]
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	4611      	mov	r1, r2
 8000c54:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6013      	str	r3, [r2, #0]
			break;
 8000c5a:	e051      	b.n	8000d00 <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d84e      	bhi.n	8000d00 <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	3b08      	subs	r3, #8
 8000c66:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	210f      	movs	r1, #15
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	43d2      	mvns	r2, r2
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	7979      	ldrb	r1, [r7, #5]
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <GPIO_voidSetPinDirection+0x184>)
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6053      	str	r3, [r2, #4]
			break;
 8000c96:	e033      	b.n	8000d00 <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d810      	bhi.n	8000cc0 <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	7979      	ldrb	r1, [r7, #5]
 8000cae:	79ba      	ldrb	r2, [r7, #6]
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6013      	str	r3, [r2, #0]
			break;
 8000cbe:	e021      	b.n	8000d04 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d81e      	bhi.n	8000d04 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	43d2      	mvns	r2, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000ce0:	400b      	ands	r3, r1
 8000ce2:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	7979      	ldrb	r1, [r7, #5]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <GPIO_voidSetPinDirection+0x188>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6053      	str	r3, [r2, #4]
			break;
 8000cfa:	e003      	b.n	8000d04 <GPIO_voidSetPinDirection+0x174>
			break;
 8000cfc:	bf00      	nop
 8000cfe:	e002      	b.n	8000d06 <GPIO_voidSetPinDirection+0x176>
			break;
 8000d00:	bf00      	nop
 8000d02:	e000      	b.n	8000d06 <GPIO_voidSetPinDirection+0x176>
			break;
 8000d04:	bf00      	nop
	}

}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	40011000 	.word	0x40011000

08000d1c <GPIO_voidTogglePinValue>:
		break ;
	}

}
void GPIO_voidTogglePinValue	(u8 Copy_u8Port, Pin_t Copy_Pin)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	460a      	mov	r2, r1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Port){
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d00f      	beq.n	8000d52 <GPIO_voidTogglePinValue+0x36>
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d018      	beq.n	8000d68 <GPIO_voidTogglePinValue+0x4c>
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d000      	beq.n	8000d3c <GPIO_voidTogglePinValue+0x20>
		case PORTC :
			TOG_BIT(GPIOC->ODR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 8000d3a:	e020      	b.n	8000d7e <GPIO_voidTogglePinValue+0x62>
			TOG_BIT(GPIOA->ODR , Copy_Pin ) ;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <GPIO_voidTogglePinValue+0x6c>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	2101      	movs	r1, #1
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <GPIO_voidTogglePinValue+0x6c>)
 8000d4c:	404b      	eors	r3, r1
 8000d4e:	60d3      	str	r3, [r2, #12]
			break ;
 8000d50:	e015      	b.n	8000d7e <GPIO_voidTogglePinValue+0x62>
			TOG_BIT(GPIOB->ODR , Copy_Pin ) ;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <GPIO_voidTogglePinValue+0x70>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	79ba      	ldrb	r2, [r7, #6]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <GPIO_voidTogglePinValue+0x70>)
 8000d62:	404b      	eors	r3, r1
 8000d64:	60d3      	str	r3, [r2, #12]
			break ;
 8000d66:	e00a      	b.n	8000d7e <GPIO_voidTogglePinValue+0x62>
			TOG_BIT(GPIOC->ODR , Copy_Pin ) ;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <GPIO_voidTogglePinValue+0x74>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4611      	mov	r1, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <GPIO_voidTogglePinValue+0x74>)
 8000d78:	404b      	eors	r3, r1
 8000d7a:	60d3      	str	r3, [r2, #12]
			break ;
 8000d7c:	bf00      	nop

	}


}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40011000 	.word	0x40011000

08000d94 <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue (u8 Copy_u8Port, Pin_t Copy_Pin)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pin > 15)
	{
		/* error */
	}
	switch(Copy_u8Port)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d00e      	beq.n	8000dcc <GPIO_u8GetPinValue+0x38>
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d016      	beq.n	8000de0 <GPIO_u8GetPinValue+0x4c>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d000      	beq.n	8000db8 <GPIO_u8GetPinValue+0x24>
		case PORTC :
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 8000db6:	e01d      	b.n	8000df4 <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOA->IDR , Copy_Pin ) ;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <GPIO_u8GetPinValue+0x6c>)
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
			break ;
 8000dca:	e013      	b.n	8000df4 <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOB->IDR , Copy_Pin ) ;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <GPIO_u8GetPinValue+0x70>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
			break ;
 8000dde:	e009      	b.n	8000df4 <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <GPIO_u8GetPinValue+0x74>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
			break ;
 8000df2:	bf00      	nop
	}
	return LOC_u8Result ;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40011000 	.word	0x40011000

08000e0c <GPIO_u8ChoosePullMode>:

void GPIO_u8ChoosePullMode(u8 Copy_u8Port, Pin_t Copy_Pin, GPIO_PULL_MODE_t Copy_Mode)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	460b      	mov	r3, r1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d022      	beq.n	8000e6a <GPIO_u8ChoosePullMode+0x5e>
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d03e      	beq.n	8000ea6 <GPIO_u8ChoosePullMode+0x9a>
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d000      	beq.n	8000e2e <GPIO_u8ChoosePullMode+0x22>
                case GPIO_PULL_UP   : SET_BIT(GPIOC->ODR, Copy_Pin);break;
                default : /*!<TODO: Error Code*/break;
            }			break ;
		default :
			/* error */
			break ;
 8000e2c:	e059      	b.n	8000ee2 <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8000e2e:	797b      	ldrb	r3, [r7, #5]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <GPIO_u8ChoosePullMode+0x2e>
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d00c      	beq.n	8000e52 <GPIO_u8ChoosePullMode+0x46>
                default : /*!<TODO: Error Code*/break;
 8000e38:	e016      	b.n	8000e68 <GPIO_u8ChoosePullMode+0x5c>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOA->ODR, Copy_Pin);break;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <GPIO_u8ChoosePullMode+0xe0>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	79ba      	ldrb	r2, [r7, #6]
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	43d2      	mvns	r2, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <GPIO_u8ChoosePullMode+0xe0>)
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	60d3      	str	r3, [r2, #12]
 8000e50:	e00a      	b.n	8000e68 <GPIO_u8ChoosePullMode+0x5c>
                case GPIO_PULL_UP   : SET_BIT(GPIOA->ODR, Copy_Pin);break;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <GPIO_u8ChoosePullMode+0xe0>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a22      	ldr	r2, [pc, #136]	; (8000eec <GPIO_u8ChoosePullMode+0xe0>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	60d3      	str	r3, [r2, #12]
 8000e66:	bf00      	nop
            }			break ;
 8000e68:	e03b      	b.n	8000ee2 <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <GPIO_u8ChoosePullMode+0x6a>
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d00c      	beq.n	8000e8e <GPIO_u8ChoosePullMode+0x82>
                default : /*!<TODO: Error Code*/break;
 8000e74:	e016      	b.n	8000ea4 <GPIO_u8ChoosePullMode+0x98>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOB->ODR, Copy_Pin);break;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <GPIO_u8ChoosePullMode+0xe4>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	79ba      	ldrb	r2, [r7, #6]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e82:	43d2      	mvns	r2, r2
 8000e84:	4611      	mov	r1, r2
 8000e86:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <GPIO_u8ChoosePullMode+0xe4>)
 8000e88:	400b      	ands	r3, r1
 8000e8a:	60d3      	str	r3, [r2, #12]
 8000e8c:	e00a      	b.n	8000ea4 <GPIO_u8ChoosePullMode+0x98>
                case GPIO_PULL_UP   : SET_BIT(GPIOB->ODR, Copy_Pin);break;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <GPIO_u8ChoosePullMode+0xe4>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	79ba      	ldrb	r2, [r7, #6]
 8000e94:	2101      	movs	r1, #1
 8000e96:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <GPIO_u8ChoosePullMode+0xe4>)
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	60d3      	str	r3, [r2, #12]
 8000ea2:	bf00      	nop
            }			break ;
 8000ea4:	e01d      	b.n	8000ee2 <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <GPIO_u8ChoosePullMode+0xa6>
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d00c      	beq.n	8000eca <GPIO_u8ChoosePullMode+0xbe>
                default : /*!<TODO: Error Code*/break;
 8000eb0:	e016      	b.n	8000ee0 <GPIO_u8ChoosePullMode+0xd4>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOC->ODR, Copy_Pin);break;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <GPIO_u8ChoosePullMode+0xe8>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	79ba      	ldrb	r2, [r7, #6]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	43d2      	mvns	r2, r2
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <GPIO_u8ChoosePullMode+0xe8>)
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	60d3      	str	r3, [r2, #12]
 8000ec8:	e00a      	b.n	8000ee0 <GPIO_u8ChoosePullMode+0xd4>
                case GPIO_PULL_UP   : SET_BIT(GPIOC->ODR, Copy_Pin);break;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <GPIO_u8ChoosePullMode+0xe8>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	79ba      	ldrb	r2, [r7, #6]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <GPIO_u8ChoosePullMode+0xe8>)
 8000eda:	430b      	orrs	r3, r1
 8000edc:	60d3      	str	r3, [r2, #12]
 8000ede:	bf00      	nop
            }			break ;
 8000ee0:	bf00      	nop
	}

}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000

08000ef8 <PSRC_voidSetAccessLevel>:
		 // Corresponding Assembly
		/*  Mixing C code is not supported inside naked functions: */
		/*  int res = 0;
			return res;
		*/
		__asm volatile (
 8000ef8:	2300      	movs	r3, #0
 8000efa:	2201      	movs	r2, #1
 8000efc:	b500      	push	{lr}
 8000efe:	4619      	mov	r1, r3
 8000f00:	4612      	mov	r2, r2
 8000f02:	4281      	cmp	r1, r0
 8000f04:	bf02      	ittt	eq
 8000f06:	f3ef 8314 	mrseq	r3, CONTROL
 8000f0a:	f36f 0300 	bfceq	r3, #0, #1
 8000f0e:	f383 8814 	msreq	CONTROL, r3
 8000f12:	bf1e      	ittt	ne
 8000f14:	f3ef 8314 	mrsne	r3, CONTROL
 8000f18:	f043 0301 	orrne.w	r3, r3, #1
 8000f1c:	f383 8814 	msrne	CONTROL, r3
 8000f20:	bd00      	pop	{pc}
				"POP	{PC}"
				:
				:"r"(PSRC_PRIVILEGED_ACCESS),
				 "r"(PSRC_UNPRIVILEGED_ACCESS)
				);
}
 8000f22:	bf00      	nop

08000f24 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	#elif(RCC_CLOCK_SOURCE == RCC_HSE_RC)
		RCC_CR   = 0x00050000;
		RCC_CFGR = 0x00000001;
		
	#elif RCC_CLOCK_SOURCE == RCC_HSE_CRYSTAL
		RCC_CR 	 = 0x00010000;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <RCC_voidInitSysClock+0x1c>)
 8000f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2e:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000001;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <RCC_voidInitSysClock+0x20>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
	#else
			#error("You chosed Wrong Clock type");
		
	#endif

}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40021004 	.word	0x40021004

08000f48 <RCC_voidEnableClock>:

void RCC_voidEnableClock(u8 Copy_u8BusId ,u8 Copy_u8PreId)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]

	if(Copy_u8PreId<=31)
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	2b1f      	cmp	r3, #31
 8000f5c:	d828      	bhi.n	8000fb0 <RCC_voidEnableClock+0x68>
	{
		
		switch(Copy_u8BusId)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d00f      	beq.n	8000f84 <RCC_voidEnableClock+0x3c>
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d018      	beq.n	8000f9a <RCC_voidEnableClock+0x52>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d000      	beq.n	8000f6e <RCC_voidEnableClock+0x26>
	else
	{
		/* Return Error Message */
	}	
	
}
 8000f6c:	e020      	b.n	8000fb0 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,Copy_u8PreId);	break;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <RCC_voidEnableClock+0x74>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <RCC_voidEnableClock+0x74>)
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e015      	b.n	8000fb0 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR,Copy_u8PreId);	break;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <RCC_voidEnableClock+0x78>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	79ba      	ldrb	r2, [r7, #6]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <RCC_voidEnableClock+0x78>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e00a      	b.n	8000fb0 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR,Copy_u8PreId);	break;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <RCC_voidEnableClock+0x7c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <RCC_voidEnableClock+0x7c>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	bf00      	nop
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021014 	.word	0x40021014
 8000fc0:	4002101c 	.word	0x4002101c
 8000fc4:	40021018 	.word	0x40021018

08000fc8 <SCB_voidTrigPendSV>:
              // <!TODO ERROR>  
    }
}

void SCB_voidTrigPendSV(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	SCB_ICSR  |= (1 << 28) ;
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SCB_voidTrigPendSV+0x18>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <SCB_voidTrigPendSV+0x18>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6013      	str	r3, [r2, #0]
	//*(volatile u32 *)0xE000ED04 = (0x1 << 28);
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed04 	.word	0xe000ed04

08000fe4 <STK_voidInit>:
/******************************************************************************
* Public Function Definitions
*******************************************************************************/

void STK_voidInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
    STK->CTRL  = 0;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <STK_voidInit+0x1c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
    STK->CTRL |= STK_CLK_SOURCE_SELECTION;
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <STK_voidInit+0x1c>)
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <STK_voidInit+0x1c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <STK_voidStopSystick>:
        STK -> VAL  = 0;
    }
    else{ /* <!TODO> ERROR */ }
}
void STK_voidStopSystick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
   CLR_BIT(STK->CTRL, 0);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <STK_voidStopSystick+0x18>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <STK_voidStopSystick+0x18>)
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e010 	.word	0xe000e010

08001020 <STK_voidStartSystick>:
void STK_voidStartSystick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
   SET_BIT((STK -> CTRL) , 0);
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <STK_voidStartSystick+0x18>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <STK_voidStartSystick+0x18>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	e000e010 	.word	0xe000e010

0800103c <STK_voidSetIntervalPeriodic>:
    /*	ENABLE INTERRUPT	*/
    SET_BIT((STK -> CTRL) , 1);
}

void STK_voidSetIntervalPeriodic(u32 Copy_u32TicksNumber , ptr_SystickFunc ptr_toFunc)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	if (Max_Number_Count > Copy_u32TicksNumber )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d21a      	bcs.n	8001084 <STK_voidSetIntervalPeriodic+0x48>
	{
		/*	DISABLE TIMER  */
		CLR_BIT((STK -> CTRL) , 0);
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6013      	str	r3, [r2, #0]
		/*	WRITING Copy_u32TicksNumber TO LOAD REGISTER	*/
		(STK -> LOAD ) = Copy_u32TicksNumber ;
 800105a:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6053      	str	r3, [r2, #4]
		/*	ENABLE SYSTIC	*/
		SET_BIT((STK -> CTRL) , 0);
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]
		/*	SAVE CALLBACK	*/
		Glob_STKCallback = ptr_toFunc  ;
 800106c:	4a09      	ldr	r2, [pc, #36]	; (8001094 <STK_voidSetIntervalPeriodic+0x58>)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6013      	str	r3, [r2, #0]
		/* Set Mode to Single */
		STK_u8ModeOfInterval = STK_PERIOD_INTERVAL;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <STK_voidSetIntervalPeriodic+0x5c>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
		/*	ENABLE INTERRUPT	*/
		SET_BIT((STK -> CTRL) , 1);
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <STK_voidSetIntervalPeriodic+0x54>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	6013      	str	r3, [r2, #0]
	}
	else{ /* <!TODO> ERROR */ }
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010
 8001094:	200000b8 	.word	0x200000b8
 8001098:	20000110 	.word	0x20000110

0800109c <SysTick_Handler>:
	float LOC_u32ElapsedTime = 0 ;
    LOC_u32ElapsedTime = ( STK -> VAL ) / STK_u32ConfigInterval(STK_US);
	return LOC_u32ElapsedTime ; 
}
/************************************* IRQ  *************************************************/
void SysTick_Handler(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	if (STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <SysTick_Handler+0x40>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d111      	bne.n	80010cc <SysTick_Handler+0x30>
	{
		/* Disable STK Interrupt */
		CLR_BIT(STK->CTRL, 1);
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <SysTick_Handler+0x44>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <SysTick_Handler+0x44>)
 80010ae:	f023 0302 	bic.w	r3, r3, #2
 80010b2:	6013      	str	r3, [r2, #0]
		/*	Stop Timer	*/
		CLR_BIT(STK->CTRL, 0);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <SysTick_Handler+0x44>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <SysTick_Handler+0x44>)
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]
		STK -> LOAD = 0;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <SysTick_Handler+0x44>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
		STK -> VAL  = 0;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SysTick_Handler+0x44>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
	}
	/* Callback notification */
	Glob_STKCallback();
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Handler+0x48>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4798      	blx	r3
	/* Clear interrupt flag */
	(void)GET_BIT(STK->CTRL,16);
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <SysTick_Handler+0x44>)
 80010d4:	681b      	ldr	r3, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000110 	.word	0x20000110
 80010e0:	e000e010 	.word	0xe000e010
 80010e4:	200000b8 	.word	0x200000b8

080010e8 <USART1_IRQHandler>:


}
/************************************* ISR		*********************************************/
void USART1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
			Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR);
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <USART1_IRQHandler+0x30>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <USART1_IRQHandler+0x34>)
 80010f4:	6852      	ldr	r2, [r2, #4]
 80010f6:	b292      	uxth	r2, r2
 80010f8:	4610      	mov	r0, r2
 80010fa:	4798      	blx	r3
	//	Clear Fflags
	 USART1->SR &=~ (1<<6) ; // TXC
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <USART1_IRQHandler+0x34>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <USART1_IRQHandler+0x34>)
 8001102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001106:	6013      	str	r3, [r2, #0]
	 USART1->SR &=~  (1<<5) ; // RXNE
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <USART1_IRQHandler+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a03      	ldr	r2, [pc, #12]	; (800111c <USART1_IRQHandler+0x34>)
 800110e:	f023 0320 	bic.w	r3, r3, #32
 8001112:	6013      	str	r3, [r2, #0]

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000bc 	.word	0x200000bc
 800111c:	40013800 	.word	0x40013800

08001120 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
			Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR);
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <USART2_IRQHandler+0x30>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <USART2_IRQHandler+0x34>)
 800112c:	6852      	ldr	r2, [r2, #4]
 800112e:	b292      	uxth	r2, r2
 8001130:	4610      	mov	r0, r2
 8001132:	4798      	blx	r3
	//Flags
	 USART2->SR &=~  (1<<6) ; // TXC
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <USART2_IRQHandler+0x34>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <USART2_IRQHandler+0x34>)
 800113a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800113e:	6013      	str	r3, [r2, #0]
	 USART2->SR &=~ (1<<5) ; // RXNE
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <USART2_IRQHandler+0x34>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <USART2_IRQHandler+0x34>)
 8001146:	f023 0320 	bic.w	r3, r3, #32
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200000bc 	.word	0x200000bc
 8001154:	40004400 	.word	0x40004400

08001158 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
			Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
*/
	Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR);
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <USART3_IRQHandler+0x30>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <USART3_IRQHandler+0x34>)
 8001164:	6852      	ldr	r2, [r2, #4]
 8001166:	b292      	uxth	r2, r2
 8001168:	4610      	mov	r0, r2
 800116a:	4798      	blx	r3
	//Flags
	 USART3->SR &=~  (1<<6) ; // TXC
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <USART3_IRQHandler+0x38>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <USART3_IRQHandler+0x38>)
 8001172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001176:	6013      	str	r3, [r2, #0]
	 USART3->SR&=~  (1<<5) ; // RXNE
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <USART3_IRQHandler+0x38>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <USART3_IRQHandler+0x38>)
 800117e:	f023 0320 	bic.w	r3, r3, #32
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000bc 	.word	0x200000bc
 800118c:	40004400 	.word	0x40004400
 8001190:	40004800 	.word	0x40004800

08001194 <main>:
int t1 = 0 , t2 = 0 ;
extern u32 counter ;

MRTOS_BinarySamphore T1_T2_SAMPHORE ;

int main(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	(void)MRTOS_voidInit();
 8001198:	f7ff f8ea 	bl	8000370 <MRTOS_voidInit>
	/*****************		TASK 1 INIT		********************/
	T1_PushButton.taskID			=		1	;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <main+0x5c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
	T1_PushButton.taskPriority		=		3	;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <main+0x5c>)
 80011a4:	2203      	movs	r2, #3
 80011a6:	721a      	strb	r2, [r3, #8]
	T1_PushButton.taskStackSize		=		100 ;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <main+0x5c>)
 80011aa:	2264      	movs	r2, #100	; 0x64
 80011ac:	605a      	str	r2, [r3, #4]
	T1_PushButton.pTaskFcn			=		PushButton ;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <main+0x5c>)
 80011b0:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <main+0x60>)
 80011b2:	60da      	str	r2, [r3, #12]
	(void)MRTOS_voidCreateTask(&T1_PushButton);
 80011b4:	480e      	ldr	r0, [pc, #56]	; (80011f0 <main+0x5c>)
 80011b6:	f7ff f90f 	bl	80003d8 <MRTOS_voidCreateTask>



	/*****************		TASK 2 INIT		********************/
	T2_LED.taskID			=		2	;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <main+0x64>)
 80011bc:	2202      	movs	r2, #2
 80011be:	701a      	strb	r2, [r3, #0]
	T2_LED.taskPriority		=		3	;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <main+0x64>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	721a      	strb	r2, [r3, #8]
	T2_LED.taskStackSize		=		100 ;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <main+0x64>)
 80011c8:	2264      	movs	r2, #100	; 0x64
 80011ca:	605a      	str	r2, [r3, #4]
	T2_LED.pTaskFcn			=		LedControl ;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <main+0x64>)
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <main+0x68>)
 80011d0:	60da      	str	r2, [r3, #12]
	(void)MRTOS_voidCreateTask(&T2_LED);
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <main+0x64>)
 80011d4:	f7ff f900 	bl	80003d8 <MRTOS_voidCreateTask>



	/*****************		Active Tasks		*****************/
	(void)MRTOS_voidActiveTask(&T1_PushButton);
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <main+0x5c>)
 80011da:	f7ff f97b 	bl	80004d4 <MRTOS_voidActiveTask>
	(void)MRTOS_voidActiveTask(&T2_LED);
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <main+0x64>)
 80011e0:	f7ff f978 	bl	80004d4 <MRTOS_voidActiveTask>


	/*****************		Start Scheduler		*****************/
	MRTOS_voidStartScheduler();
 80011e4:	f7ff f9a8 	bl	8000538 <MRTOS_voidStartScheduler>
 80011e8:	2300      	movs	r3, #0


}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000013c 	.word	0x2000013c
 80011f4:	08001201 	.word	0x08001201
 80011f8:	20000114 	.word	0x20000114
 80011fc:	08001265 	.word	0x08001265

08001200 <PushButton>:

void PushButton(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	u8 LOC_u8isPressed = 0 ;
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	/*			init clock			*/
	RCC_voidInitSysClock();
 800120a:	f7ff fe8b 	bl	8000f24 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2, PORTA);
 800120e:	2102      	movs	r1, #2
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fe99 	bl	8000f48 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_PULLUP_PULLDOWN);
 8001216:	2208      	movs	r2, #8
 8001218:	2102      	movs	r1, #2
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff fcb8 	bl	8000b90 <GPIO_voidSetPinDirection>
	GPIO_u8ChoosePullMode(PORTA, PIN2, GPIO_PULL_UP);
 8001220:	2201      	movs	r2, #1
 8001222:	2102      	movs	r1, #2
 8001224:	2002      	movs	r0, #2
 8001226:	f7ff fdf1 	bl	8000e0c <GPIO_u8ChoosePullMode>

	while(1)
	{
		t1 ^=1 ;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <PushButton+0x58>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f083 0301 	eor.w	r3, r3, #1
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <PushButton+0x58>)
 8001234:	6013      	str	r3, [r2, #0]
		LOC_u8isPressed = GPIO_u8GetPinValue(PORTA, PIN2);
 8001236:	2102      	movs	r1, #2
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fdab 	bl	8000d94 <GPIO_u8GetPinValue>
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
		if(LOC_u8isPressed == 0)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <PushButton+0x4e>
			(void)MRTOS_AquireBinarySemaphore(&T1_T2_SAMPHORE);
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <PushButton+0x5c>)
 800124a:	f7ff f9a5 	bl	8000598 <MRTOS_AquireBinarySemaphore>
		MRTOS_voidTaskDelay(&T1_PushButton, 20);
 800124e:	2114      	movs	r1, #20
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <PushButton+0x60>)
 8001252:	f7ff f958 	bl	8000506 <MRTOS_voidTaskDelay>
		t1 ^=1 ;
 8001256:	e7e8      	b.n	800122a <PushButton+0x2a>
 8001258:	200000c8 	.word	0x200000c8
 800125c:	20000168 	.word	0x20000168
 8001260:	2000013c 	.word	0x2000013c

08001264 <LedControl>:

	}

}
void LedControl(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	/*			init clock			*/
	RCC_voidInitSysClock();
 800126a:	f7ff fe5b 	bl	8000f24 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2, PORTA);
 800126e:	2102      	movs	r1, #2
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff fe69 	bl	8000f48 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(PORTA, PIN0, GPIO_OUTPUT_10MHZ_PUSH_PULL);
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fc88 	bl	8000b90 <GPIO_voidSetPinDirection>
	u8 Loc_u8Flag = 0 ;
 8001280:	2300      	movs	r3, #0
 8001282:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		t2 ^=1 ;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LedControl+0x54>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LedControl+0x54>)
 800128e:	6013      	str	r3, [r2, #0]
		MRTOS_GetBinarySemaphoreState(&T1_T2_SAMPHORE,&Loc_u8Flag);
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <LedControl+0x58>)
 8001296:	f7ff f9bd 	bl	8000614 <MRTOS_GetBinarySemaphoreState>
		if(Loc_u8Flag)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <LedControl+0x4a>
		{
			(void)MRTOS_ReleaseBinarySemaphore(&T1_T2_SAMPHORE);
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <LedControl+0x58>)
 80012a2:	f7ff f998 	bl	80005d6 <MRTOS_ReleaseBinarySemaphore>
			GPIO_voidTogglePinValue(PORTA,PIN0);
 80012a6:	2100      	movs	r1, #0
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff fd37 	bl	8000d1c <GPIO_voidTogglePinValue>

		}
		MRTOS_voidTaskDelay(&T2_LED, 20);
 80012ae:	2114      	movs	r1, #20
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <LedControl+0x5c>)
 80012b2:	f7ff f928 	bl	8000506 <MRTOS_voidTaskDelay>
		t2 ^=1 ;
 80012b6:	e7e5      	b.n	8001284 <LedControl+0x20>
 80012b8:	200000cc 	.word	0x200000cc
 80012bc:	20000168 	.word	0x20000168
 80012c0:	20000114 	.word	0x20000114

080012c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012f2:	f000 f811 	bl	8001318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f6:	f7ff ff4d 	bl	8001194 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   r0, =_estack
 80012fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001308:	08001380 	.word	0x08001380
  ldr r2, =_sbss
 800130c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001310:	20000174 	.word	0x20000174

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <__libc_init_array>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	2500      	movs	r5, #0
 800131c:	4e0c      	ldr	r6, [pc, #48]	; (8001350 <__libc_init_array+0x38>)
 800131e:	4c0d      	ldr	r4, [pc, #52]	; (8001354 <__libc_init_array+0x3c>)
 8001320:	1ba4      	subs	r4, r4, r6
 8001322:	10a4      	asrs	r4, r4, #2
 8001324:	42a5      	cmp	r5, r4
 8001326:	d109      	bne.n	800133c <__libc_init_array+0x24>
 8001328:	f000 f81a 	bl	8001360 <_init>
 800132c:	2500      	movs	r5, #0
 800132e:	4e0a      	ldr	r6, [pc, #40]	; (8001358 <__libc_init_array+0x40>)
 8001330:	4c0a      	ldr	r4, [pc, #40]	; (800135c <__libc_init_array+0x44>)
 8001332:	1ba4      	subs	r4, r4, r6
 8001334:	10a4      	asrs	r4, r4, #2
 8001336:	42a5      	cmp	r5, r4
 8001338:	d105      	bne.n	8001346 <__libc_init_array+0x2e>
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001340:	4798      	blx	r3
 8001342:	3501      	adds	r5, #1
 8001344:	e7ee      	b.n	8001324 <__libc_init_array+0xc>
 8001346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800134a:	4798      	blx	r3
 800134c:	3501      	adds	r5, #1
 800134e:	e7f2      	b.n	8001336 <__libc_init_array+0x1e>
 8001350:	08001378 	.word	0x08001378
 8001354:	08001378 	.word	0x08001378
 8001358:	08001378 	.word	0x08001378
 800135c:	0800137c 	.word	0x0800137c

08001360 <_init>:
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	bf00      	nop
 8001364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001366:	bc08      	pop	{r3}
 8001368:	469e      	mov	lr, r3
 800136a:	4770      	bx	lr

0800136c <_fini>:
 800136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136e:	bf00      	nop
 8001370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001372:	bc08      	pop	{r3}
 8001374:	469e      	mov	lr, r3
 8001376:	4770      	bx	lr
