
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00002c3e  00002cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000d4  008000d4  00002d46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002023  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf8  00000000  00000000  00005027  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e6a  00000000  00000000  00005d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  00007b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d15  00000000  00000000  00008384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001091  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a12a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <main>
      8a:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <charCompare>:


/************************************* static APIs ***********************/

static int charCompare(u8 start, u8 end)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <charCompare+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	6a 83       	std	Y+2, r22	; 0x02
	return ((start == '[' && end == ']') || (start == '{' && end == '}') || (start == '(' && end == ')'));
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	8b 35       	cpi	r24, 0x5B	; 91
      a4:	19 f4       	brne	.+6      	; 0xac <charCompare+0x1a>
      a6:	8a 81       	ldd	r24, Y+2	; 0x02
      a8:	8d 35       	cpi	r24, 0x5D	; 93
      aa:	61 f0       	breq	.+24     	; 0xc4 <charCompare+0x32>
      ac:	89 81       	ldd	r24, Y+1	; 0x01
      ae:	8b 37       	cpi	r24, 0x7B	; 123
      b0:	19 f4       	brne	.+6      	; 0xb8 <charCompare+0x26>
      b2:	8a 81       	ldd	r24, Y+2	; 0x02
      b4:	8d 37       	cpi	r24, 0x7D	; 125
      b6:	31 f0       	breq	.+12     	; 0xc4 <charCompare+0x32>
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	88 32       	cpi	r24, 0x28	; 40
      bc:	31 f4       	brne	.+12     	; 0xca <charCompare+0x38>
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	89 32       	cpi	r24, 0x29	; 41
      c2:	19 f4       	brne	.+6      	; 0xca <charCompare+0x38>
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	02 c0       	rjmp	.+4      	; 0xce <charCompare+0x3c>
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
}
      ce:	0f 90       	pop	r0
      d0:	0f 90       	pop	r0
      d2:	df 91       	pop	r29
      d4:	cf 91       	pop	r28
      d6:	08 95       	ret

000000d8 <Balanced_Parentheses>:


static int Balanced_Parentheses(u8 *arr)
{
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	6a 97       	sbiw	r28, 0x1a	; 26
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
      ec:	9a 8f       	std	Y+26, r25	; 0x1a
      ee:	89 8f       	std	Y+25, r24	; 0x19
    stack_t word ;
    stack_creation(&word);
      f0:	ce 01       	movw	r24, r28
      f2:	02 96       	adiw	r24, 0x02	; 2
      f4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <stack_creation>
    u8 i = 0 ;
      f8:	19 82       	std	Y+1, r1	; 0x01
    while (arr[i] != '\0')
      fa:	76 c0       	rjmp	.+236    	; 0x1e8 <Balanced_Parentheses+0x110>
    {
        if (arr[i] == '[' || arr[i] == '(' || arr[i] == '{')
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	88 2f       	mov	r24, r24
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	29 8d       	ldd	r18, Y+25	; 0x19
     104:	3a 8d       	ldd	r19, Y+26	; 0x1a
     106:	82 0f       	add	r24, r18
     108:	93 1f       	adc	r25, r19
     10a:	fc 01       	movw	r30, r24
     10c:	80 81       	ld	r24, Z
     10e:	8b 35       	cpi	r24, 0x5B	; 91
     110:	b1 f0       	breq	.+44     	; 0x13e <Balanced_Parentheses+0x66>
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	29 8d       	ldd	r18, Y+25	; 0x19
     11a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     11c:	82 0f       	add	r24, r18
     11e:	93 1f       	adc	r25, r19
     120:	fc 01       	movw	r30, r24
     122:	80 81       	ld	r24, Z
     124:	88 32       	cpi	r24, 0x28	; 40
     126:	59 f0       	breq	.+22     	; 0x13e <Balanced_Parentheses+0x66>
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	88 2f       	mov	r24, r24
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	29 8d       	ldd	r18, Y+25	; 0x19
     130:	3a 8d       	ldd	r19, Y+26	; 0x1a
     132:	82 0f       	add	r24, r18
     134:	93 1f       	adc	r25, r19
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	8b 37       	cpi	r24, 0x7B	; 123
     13c:	81 f4       	brne	.+32     	; 0x15e <Balanced_Parentheses+0x86>
        {
            stack_push(arr[i],&word);
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	88 2f       	mov	r24, r24
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	29 8d       	ldd	r18, Y+25	; 0x19
     146:	3a 8d       	ldd	r19, Y+26	; 0x1a
     148:	82 0f       	add	r24, r18
     14a:	93 1f       	adc	r25, r19
     14c:	fc 01       	movw	r30, r24
     14e:	20 81       	ld	r18, Z
     150:	ce 01       	movw	r24, r28
     152:	02 96       	adiw	r24, 0x02	; 2
     154:	bc 01       	movw	r22, r24
     156:	82 2f       	mov	r24, r18
     158:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>
     15c:	42 c0       	rjmp	.+132    	; 0x1e2 <Balanced_Parentheses+0x10a>
        }
        else if (arr[i] == ']' || arr[i] == ')' || arr[i] == '}')
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	88 2f       	mov	r24, r24
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	29 8d       	ldd	r18, Y+25	; 0x19
     166:	3a 8d       	ldd	r19, Y+26	; 0x1a
     168:	82 0f       	add	r24, r18
     16a:	93 1f       	adc	r25, r19
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	8d 35       	cpi	r24, 0x5D	; 93
     172:	b1 f0       	breq	.+44     	; 0x1a0 <Balanced_Parentheses+0xc8>
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	88 2f       	mov	r24, r24
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	29 8d       	ldd	r18, Y+25	; 0x19
     17c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     17e:	82 0f       	add	r24, r18
     180:	93 1f       	adc	r25, r19
     182:	fc 01       	movw	r30, r24
     184:	80 81       	ld	r24, Z
     186:	89 32       	cpi	r24, 0x29	; 41
     188:	59 f0       	breq	.+22     	; 0x1a0 <Balanced_Parentheses+0xc8>
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	29 8d       	ldd	r18, Y+25	; 0x19
     192:	3a 8d       	ldd	r19, Y+26	; 0x1a
     194:	82 0f       	add	r24, r18
     196:	93 1f       	adc	r25, r19
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	8d 37       	cpi	r24, 0x7D	; 125
     19e:	09 f5       	brne	.+66     	; 0x1e2 <Balanced_Parentheses+0x10a>
        {
            /* Compare between top of stack and current character */
            u8 topOfStack;
            stack_pop(&topOfStack,&word);
     1a0:	9e 01       	movw	r18, r28
     1a2:	2e 5f       	subi	r18, 0xFE	; 254
     1a4:	3f 4f       	sbci	r19, 0xFF	; 255
     1a6:	ce 01       	movw	r24, r28
     1a8:	48 96       	adiw	r24, 0x18	; 24
     1aa:	b9 01       	movw	r22, r18
     1ac:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
            if(!charCompare(topOfStack,arr[i]))
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	88 2f       	mov	r24, r24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	29 8d       	ldd	r18, Y+25	; 0x19
     1b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	fc 01       	movw	r30, r24
     1c0:	90 81       	ld	r25, Z
     1c2:	88 8d       	ldd	r24, Y+24	; 0x18
     1c4:	69 2f       	mov	r22, r25
     1c6:	0e 94 49 00 	call	0x92	; 0x92 <charCompare>
     1ca:	89 2b       	or	r24, r25
     1cc:	51 f4       	brne	.+20     	; 0x1e2 <Balanced_Parentheses+0x10a>
            {
                 stack_push(topOfStack,&word);
     1ce:	28 8d       	ldd	r18, Y+24	; 0x18
     1d0:	ce 01       	movw	r24, r28
     1d2:	02 96       	adiw	r24, 0x02	; 2
     1d4:	bc 01       	movw	r22, r24
     1d6:	82 2f       	mov	r24, r18
     1d8:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>
                 return 0 ;
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	1a c0       	rjmp	.+52     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
            }
        }
        i++;
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	89 83       	std	Y+1, r24	; 0x01
static int Balanced_Parentheses(u8 *arr)
{
    stack_t word ;
    stack_creation(&word);
    u8 i = 0 ;
    while (arr[i] != '\0')
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	88 2f       	mov	r24, r24
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	29 8d       	ldd	r18, Y+25	; 0x19
     1f0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	fc 01       	movw	r30, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	88 23       	and	r24, r24
     1fc:	09 f0       	breq	.+2      	; 0x200 <__EEPROM_REGION_LENGTH__>
     1fe:	7e cf       	rjmp	.-260    	; 0xfc <Balanced_Parentheses+0x24>
                 return 0 ;
            }
        }
        i++;
    }
    if(stack_isEmpty(&word) == STACK_EMPTY)
     200:	ce 01       	movw	r24, r28
     202:	02 96       	adiw	r24, 0x02	; 2
     204:	0e 94 45 07 	call	0xe8a	; 0xe8a <stack_isEmpty>
     208:	82 30       	cpi	r24, 0x02	; 2
     20a:	19 f4       	brne	.+6      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
        return 1 ;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
    return 0 ;
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
}
     216:	6a 96       	adiw	r28, 0x1a	; 26
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <precedence>:
static u8 precedence(u8 c)
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	1f 92       	push	r1
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	89 83       	std	Y+1, r24	; 0x01
    if (c == '^')
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	8e 35       	cpi	r24, 0x5E	; 94
     238:	11 f4       	brne	.+4      	; 0x23e <precedence+0x16>
        return 3;
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	11 c0       	rjmp	.+34     	; 0x260 <precedence+0x38>
    else if (c == '/' || c == '*')
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	8f 32       	cpi	r24, 0x2F	; 47
     242:	19 f0       	breq	.+6      	; 0x24a <precedence+0x22>
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	8a 32       	cpi	r24, 0x2A	; 42
     248:	11 f4       	brne	.+4      	; 0x24e <precedence+0x26>
        return 2;
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	09 c0       	rjmp	.+18     	; 0x260 <precedence+0x38>
    else if (c == '+' || c == '-')
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	8b 32       	cpi	r24, 0x2B	; 43
     252:	19 f0       	breq	.+6      	; 0x25a <precedence+0x32>
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	8d 32       	cpi	r24, 0x2D	; 45
     258:	11 f4       	brne	.+4      	; 0x25e <precedence+0x36>
        return 1;
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	01 c0       	rjmp	.+2      	; 0x260 <precedence+0x38>
    else
        return -1;
     25e:	8f ef       	ldi	r24, 0xFF	; 255
}
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <is_digit>:
static u8 is_digit (u8 c) 
{
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	1f 92       	push	r1
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	89 83       	std	Y+1, r24	; 0x01
    return (u8)((c>='0') && (c<='9')) ;
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	80 33       	cpi	r24, 0x30	; 48
     278:	30 f0       	brcs	.+12     	; 0x286 <is_digit+0x1e>
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	8a 33       	cpi	r24, 0x3A	; 58
     27e:	18 f4       	brcc	.+6      	; 0x286 <is_digit+0x1e>
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <is_digit+0x22>
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
}
     28a:	0f 90       	pop	r0
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <is_operator>:
static u8 is_operator(u8 c)
{
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	00 d0       	rcall	.+0      	; 0x298 <is_operator+0x6>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	8a 83       	std	Y+2, r24	; 0x02
	u8 res = 0 ; 
     29e:	19 82       	std	Y+1, r1	; 0x01
	switch (c)
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	88 2f       	mov	r24, r24
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	8d 32       	cpi	r24, 0x2D	; 45
     2a8:	91 05       	cpc	r25, r1
     2aa:	49 f0       	breq	.+18     	; 0x2be <is_operator+0x2c>
     2ac:	8e 32       	cpi	r24, 0x2E	; 46
     2ae:	91 05       	cpc	r25, r1
     2b0:	24 f4       	brge	.+8      	; 0x2ba <is_operator+0x28>
     2b2:	8a 97       	sbiw	r24, 0x2a	; 42
     2b4:	02 97       	sbiw	r24, 0x02	; 2
     2b6:	30 f4       	brcc	.+12     	; 0x2c4 <is_operator+0x32>
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <is_operator+0x2c>
     2ba:	8f 97       	sbiw	r24, 0x2f	; 47
     2bc:	19 f4       	brne	.+6      	; 0x2c4 <is_operator+0x32>
	{
		case '+':
		case '-':
		case '*':
		case '/':
			res = 1 ;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	89 83       	std	Y+1, r24	; 0x01
			break ; 
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <is_operator+0x34>
		default : 
			res = 0 ; 
     2c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return res ; 
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <InfixToPostfix>:
static void InfixToPostfix(u8 infix_exp[], u8 postfix_exp[])
{ 
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	6e 97       	sbiw	r28, 0x1e	; 30
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	9c 8f       	std	Y+28, r25	; 0x1c
     2ea:	8b 8f       	std	Y+27, r24	; 0x1b
     2ec:	7e 8f       	std	Y+30, r23	; 0x1e
     2ee:	6d 8f       	std	Y+29, r22	; 0x1d
    stack_t op ;
	stack_creation(&op);
     2f0:	ce 01       	movw	r24, r28
     2f2:	04 96       	adiw	r24, 0x04	; 4
     2f4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <stack_creation>
	u8 i, j;
	u8 item;
	u8 x;
	i=0;
     2f8:	19 82       	std	Y+1, r1	; 0x01
	j=0;
     2fa:	1a 82       	std	Y+2, r1	; 0x02
	
	item=infix_exp[i];         /* initialize before loop*/
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	88 2f       	mov	r24, r24
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2b 8d       	ldd	r18, Y+27	; 0x1b
     304:	3c 8d       	ldd	r19, Y+28	; 0x1c
     306:	82 0f       	add	r24, r18
     308:	93 1f       	adc	r25, r19
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	8b 83       	std	Y+3, r24	; 0x03

	while(item != '\0')        /* run loop till end of infix expression */
     310:	8d c0       	rjmp	.+282    	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
	{
		if(item == '(')
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	88 32       	cpi	r24, 0x28	; 40
     316:	39 f4       	brne	.+14     	; 0x326 <InfixToPostfix+0x54>
		{
			stack_push(item,&op);
     318:	ce 01       	movw	r24, r28
     31a:	04 96       	adiw	r24, 0x04	; 4
     31c:	bc 01       	movw	r22, r24
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>
     324:	76 c0       	rjmp	.+236    	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		}
		else if( is_digit(item) )
     326:	8b 81       	ldd	r24, Y+3	; 0x03
     328:	0e 94 34 01 	call	0x268	; 0x268 <is_digit>
     32c:	88 23       	and	r24, r24
     32e:	71 f0       	breq	.+28     	; 0x34c <InfixToPostfix+0x7a>
		{
			postfix_exp[j] = item;              /* add operand symbol to postfix expr */
     330:	8a 81       	ldd	r24, Y+2	; 0x02
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2d 8d       	ldd	r18, Y+29	; 0x1d
     338:	3e 8d       	ldd	r19, Y+30	; 0x1e
     33a:	82 0f       	add	r24, r18
     33c:	93 1f       	adc	r25, r19
     33e:	2b 81       	ldd	r18, Y+3	; 0x03
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18
			j++;
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	8a 83       	std	Y+2, r24	; 0x02
     34a:	63 c0       	rjmp	.+198    	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		}
		else if(is_operator(item) == 1)        /* means symbol is operator */
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	0e 94 49 01 	call	0x292	; 0x292 <is_operator>
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	d1 f5       	brne	.+116    	; 0x3ca <InfixToPostfix+0xf8>
		{
			stack_pop(&x,&op);
     356:	9e 01       	movw	r18, r28
     358:	2c 5f       	subi	r18, 0xFC	; 252
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	ce 01       	movw	r24, r28
     35e:	4a 96       	adiw	r24, 0x1a	; 26
     360:	b9 01       	movw	r22, r18
     362:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
			while(is_operator(x) == 1 && precedence(x)>= precedence(item))
     366:	15 c0       	rjmp	.+42     	; 0x392 <InfixToPostfix+0xc0>
			{
				postfix_exp[j] = x;                  /* so pop all higher precendence operator and */
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     370:	3e 8d       	ldd	r19, Y+30	; 0x1e
     372:	82 0f       	add	r24, r18
     374:	93 1f       	adc	r25, r19
     376:	2a 8d       	ldd	r18, Y+26	; 0x1a
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
				j++;
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	8a 83       	std	Y+2, r24	; 0x02
				stack_pop(&x,&op);                  /* add them to postfix expresion */
     382:	9e 01       	movw	r18, r28
     384:	2c 5f       	subi	r18, 0xFC	; 252
     386:	3f 4f       	sbci	r19, 0xFF	; 255
     388:	ce 01       	movw	r24, r28
     38a:	4a 96       	adiw	r24, 0x1a	; 26
     38c:	b9 01       	movw	r22, r18
     38e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
			j++;
		}
		else if(is_operator(item) == 1)        /* means symbol is operator */
		{
			stack_pop(&x,&op);
			while(is_operator(x) == 1 && precedence(x)>= precedence(item))
     392:	8a 8d       	ldd	r24, Y+26	; 0x1a
     394:	0e 94 49 01 	call	0x292	; 0x292 <is_operator>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	49 f4       	brne	.+18     	; 0x3ae <InfixToPostfix+0xdc>
     39c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     39e:	0e 94 14 01 	call	0x228	; 0x228 <precedence>
     3a2:	18 2f       	mov	r17, r24
     3a4:	8b 81       	ldd	r24, Y+3	; 0x03
     3a6:	0e 94 14 01 	call	0x228	; 0x228 <precedence>
     3aa:	18 17       	cp	r17, r24
     3ac:	e8 f6       	brcc	.-70     	; 0x368 <InfixToPostfix+0x96>
			{
				postfix_exp[j] = x;                  /* so pop all higher precendence operator and */
				j++;
				stack_pop(&x,&op);                  /* add them to postfix expresion */
			}
			stack_push(x,&op);
     3ae:	2a 8d       	ldd	r18, Y+26	; 0x1a
     3b0:	ce 01       	movw	r24, r28
     3b2:	04 96       	adiw	r24, 0x04	; 4
     3b4:	bc 01       	movw	r22, r24
     3b6:	82 2f       	mov	r24, r18
     3b8:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>

			/* because just above while loop will terminate we have
			oppped one extra item
			for which condition fails and loop terminates, so that one*/
			stack_push(item,&op);
     3bc:	ce 01       	movw	r24, r28
     3be:	04 96       	adiw	r24, 0x04	; 4
     3c0:	bc 01       	movw	r22, r24
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>
     3c8:	24 c0       	rjmp	.+72     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		}
		else if(item == ')')         /* if current symbol is ')' then */
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	89 32       	cpi	r24, 0x29	; 41
     3ce:	09 f5       	brne	.+66     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		{
			stack_pop(&x,&op);                            /* pop and keep popping until */
     3d0:	9e 01       	movw	r18, r28
     3d2:	2c 5f       	subi	r18, 0xFC	; 252
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
     3d6:	ce 01       	movw	r24, r28
     3d8:	4a 96       	adiw	r24, 0x1a	; 26
     3da:	b9 01       	movw	r22, r18
     3dc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
			while(x != '(')                /* '(' encounterd */
     3e0:	15 c0       	rjmp	.+42     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
			{
				postfix_exp[j] = x;
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3ea:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
     3f0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
				j++;
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	8f 5f       	subi	r24, 0xFF	; 255
     3fa:	8a 83       	std	Y+2, r24	; 0x02
				stack_pop(&x,&op); 
     3fc:	9e 01       	movw	r18, r28
     3fe:	2c 5f       	subi	r18, 0xFC	; 252
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	ce 01       	movw	r24, r28
     404:	4a 96       	adiw	r24, 0x1a	; 26
     406:	b9 01       	movw	r22, r18
     408:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
			stack_push(item,&op);
		}
		else if(item == ')')         /* if current symbol is ')' then */
		{
			stack_pop(&x,&op);                            /* pop and keep popping until */
			while(x != '(')                /* '(' encounterd */
     40c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     40e:	88 32       	cpi	r24, 0x28	; 40
     410:	41 f7       	brne	.-48     	; 0x3e2 <InfixToPostfix+0x110>
		else
		{ /* if current symbol is neither operand not '(' nor ')' and nor
			operator */
			/* error */ 
		}
		i++;
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	89 83       	std	Y+1, r24	; 0x01

		item = infix_exp[i]; /* go to next symbol of infix expression */
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	88 2f       	mov	r24, r24
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	2b 8d       	ldd	r18, Y+27	; 0x1b
     420:	3c 8d       	ldd	r19, Y+28	; 0x1c
     422:	82 0f       	add	r24, r18
     424:	93 1f       	adc	r25, r19
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	8b 83       	std	Y+3, r24	; 0x03
	i=0;
	j=0;
	
	item=infix_exp[i];         /* initialize before loop*/

	while(item != '\0')        /* run loop till end of infix expression */
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	88 23       	and	r24, r24
     430:	09 f0       	breq	.+2      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     432:	6f cf       	rjmp	.-290    	; 0x312 <InfixToPostfix+0x40>
		}
		i++;

		item = infix_exp[i]; /* go to next symbol of infix expression */
	} /* while loop ends here */
	if(!stack_isEmpty(&op))
     434:	ce 01       	movw	r24, r28
     436:	04 96       	adiw	r24, 0x04	; 4
     438:	0e 94 45 07 	call	0xe8a	; 0xe8a <stack_isEmpty>
	{
		// nInvalid infix Expression
	}

	postfix_exp[j] = '\0'; 
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	2d 8d       	ldd	r18, Y+29	; 0x1d
     444:	3e 8d       	ldd	r19, Y+30	; 0x1e
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	fc 01       	movw	r30, r24
     44c:	10 82       	st	Z, r1

}
     44e:	00 00       	nop
     450:	6e 96       	adiw	r28, 0x1e	; 30
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	08 95       	ret

00000464 <EvalPostfix>:
static void EvalPostfix(char postfix[] , u8 * ptr_u8Result)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	a0 97       	sbiw	r28, 0x20	; 32
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	9e 8f       	std	Y+30, r25	; 0x1e
     47a:	8d 8f       	std	Y+29, r24	; 0x1d
     47c:	78 a3       	std	Y+32, r23	; 0x20
     47e:	6f 8f       	std	Y+31, r22	; 0x1f
    stack_t eva ;
	stack_creation(&eva);
     480:	ce 01       	movw	r24, r28
     482:	04 96       	adiw	r24, 0x04	; 4
     484:	0e 94 cd 06 	call	0xd9a	; 0xd9a <stack_creation>
	u8 LOC_u8Result ; 
    u8 i = 0 ;
     488:	19 82       	std	Y+1, r1	; 0x01
    u8 num;
    u8 A, B , Res;
    while(postfix[i] != '\0')
     48a:	6c c0       	rjmp	.+216    	; 0x564 <EvalPostfix+0x100>
    {
        if(is_digit(postfix[i]))
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	88 2f       	mov	r24, r24
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	2d 8d       	ldd	r18, Y+29	; 0x1d
     494:	3e 8d       	ldd	r19, Y+30	; 0x1e
     496:	82 0f       	add	r24, r18
     498:	93 1f       	adc	r25, r19
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	0e 94 34 01 	call	0x268	; 0x268 <is_digit>
     4a2:	88 23       	and	r24, r24
     4a4:	91 f0       	breq	.+36     	; 0x4ca <EvalPostfix+0x66>
        {
            num = postfix[i] - 48;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4ae:	3e 8d       	ldd	r19, Y+30	; 0x1e
     4b0:	82 0f       	add	r24, r18
     4b2:	93 1f       	adc	r25, r19
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	80 53       	subi	r24, 0x30	; 48
     4ba:	8b 83       	std	Y+3, r24	; 0x03
            stack_push(num,&eva);;
     4bc:	ce 01       	movw	r24, r28
     4be:	04 96       	adiw	r24, 0x04	; 4
     4c0:	bc 01       	movw	r22, r24
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>
     4c8:	4a c0       	rjmp	.+148    	; 0x55e <EvalPostfix+0xfa>
        }
        else
        {
			stack_pop(&A,&eva); 
     4ca:	9e 01       	movw	r18, r28
     4cc:	2c 5f       	subi	r18, 0xFC	; 252
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	ce 01       	movw	r24, r28
     4d2:	4b 96       	adiw	r24, 0x1b	; 27
     4d4:	b9 01       	movw	r22, r18
     4d6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
			stack_pop(&B,&eva); 
     4da:	9e 01       	movw	r18, r28
     4dc:	2c 5f       	subi	r18, 0xFC	; 252
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	ce 01       	movw	r24, r28
     4e2:	4c 96       	adiw	r24, 0x1c	; 28
     4e4:	b9 01       	movw	r22, r18
     4e6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
            switch(postfix[i])
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	8b 32       	cpi	r24, 0x2B	; 43
     502:	91 05       	cpc	r25, r1
     504:	61 f0       	breq	.+24     	; 0x51e <EvalPostfix+0xba>
     506:	8c 32       	cpi	r24, 0x2C	; 44
     508:	91 05       	cpc	r25, r1
     50a:	1c f4       	brge	.+6      	; 0x512 <EvalPostfix+0xae>
     50c:	8a 97       	sbiw	r24, 0x2a	; 42
     50e:	99 f0       	breq	.+38     	; 0x536 <EvalPostfix+0xd2>
     510:	20 c0       	rjmp	.+64     	; 0x552 <EvalPostfix+0xee>
     512:	8d 32       	cpi	r24, 0x2D	; 45
     514:	91 05       	cpc	r25, r1
     516:	41 f0       	breq	.+16     	; 0x528 <EvalPostfix+0xc4>
     518:	8f 97       	sbiw	r24, 0x2f	; 47
     51a:	a1 f0       	breq	.+40     	; 0x544 <EvalPostfix+0xe0>
     51c:	1a c0       	rjmp	.+52     	; 0x552 <EvalPostfix+0xee>
            {
				case '+':
				{
					Res = A + B;
     51e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     520:	8c 8d       	ldd	r24, Y+28	; 0x1c
     522:	89 0f       	add	r24, r25
     524:	8a 83       	std	Y+2, r24	; 0x02
					break;
     526:	15 c0       	rjmp	.+42     	; 0x552 <EvalPostfix+0xee>
				}
				case '-':
				{
					Res = B - A;
     528:	9c 8d       	ldd	r25, Y+28	; 0x1c
     52a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     52c:	f9 2f       	mov	r31, r25
     52e:	f8 1b       	sub	r31, r24
     530:	8f 2f       	mov	r24, r31
     532:	8a 83       	std	Y+2, r24	; 0x02
					break;
     534:	0e c0       	rjmp	.+28     	; 0x552 <EvalPostfix+0xee>
				}
				case '*':
				{
					Res = A * B;
     536:	9b 8d       	ldd	r25, Y+27	; 0x1b
     538:	8c 8d       	ldd	r24, Y+28	; 0x1c
     53a:	98 9f       	mul	r25, r24
     53c:	80 2d       	mov	r24, r0
     53e:	11 24       	eor	r1, r1
     540:	8a 83       	std	Y+2, r24	; 0x02
					break;
     542:	07 c0       	rjmp	.+14     	; 0x552 <EvalPostfix+0xee>
				}
				case '/':
				{
					Res = B / A;
     544:	8c 8d       	ldd	r24, Y+28	; 0x1c
     546:	9b 8d       	ldd	r25, Y+27	; 0x1b
     548:	69 2f       	mov	r22, r25
     54a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodqi4>
     54e:	8a 83       	std	Y+2, r24	; 0x02
					break;
     550:	00 00       	nop
				}
            }
			stack_push(Res,&eva);
     552:	ce 01       	movw	r24, r28
     554:	04 96       	adiw	r24, 0x04	; 4
     556:	bc 01       	movw	r22, r24
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	0e 94 df 06 	call	0xdbe	; 0xdbe <stack_push>
        }
        i++;
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	89 83       	std	Y+1, r24	; 0x01
	stack_creation(&eva);
	u8 LOC_u8Result ; 
    u8 i = 0 ;
    u8 num;
    u8 A, B , Res;
    while(postfix[i] != '\0')
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	88 2f       	mov	r24, r24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     56c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	09 f0       	breq	.+2      	; 0x57c <EvalPostfix+0x118>
     57a:	88 cf       	rjmp	.-240    	; 0x48c <EvalPostfix+0x28>
            }
			stack_push(Res,&eva);
        }
        i++;
    }	
	stack_pop(&LOC_u8Result,&eva); 
     57c:	9e 01       	movw	r18, r28
     57e:	2c 5f       	subi	r18, 0xFC	; 252
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	ce 01       	movw	r24, r28
     584:	4a 96       	adiw	r24, 0x1a	; 26
     586:	b9 01       	movw	r22, r18
     588:	0e 94 0d 07 	call	0xe1a	; 0xe1a <stack_pop>
	*ptr_u8Result = LOC_u8Result ; 
     58c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     58e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     590:	98 a1       	ldd	r25, Y+32	; 0x20
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
}
     596:	00 00       	nop
     598:	a0 96       	adiw	r28, 0x20	; 32
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <tostring>:
static void tostring(u8 str[], u8 num)
{
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	2b 97       	sbiw	r28, 0x0b	; 11
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	9a 87       	std	Y+10, r25	; 0x0a
     5c0:	89 87       	std	Y+9, r24	; 0x09
     5c2:	6b 87       	std	Y+11, r22	; 0x0b
	int i, rem, len = 0, n;
     5c4:	1c 82       	std	Y+4, r1	; 0x04
     5c6:	1b 82       	std	Y+3, r1	; 0x03
	n = num;
     5c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9e 83       	std	Y+6, r25	; 0x06
     5d0:	8d 83       	std	Y+5, r24	; 0x05
	/*	Get Digits in Num	*/
    while (n != 0)
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <tostring+0x48>
    {
        len++;
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	9c 83       	std	Y+4, r25	; 0x04
     5dc:	8b 83       	std	Y+3, r24	; 0x03
        n /= 10;
     5de:	8d 81       	ldd	r24, Y+5	; 0x05
     5e0:	9e 81       	ldd	r25, Y+6	; 0x06
     5e2:	2a e0       	ldi	r18, 0x0A	; 10
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	b9 01       	movw	r22, r18
     5e8:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__divmodhi4>
     5ec:	cb 01       	movw	r24, r22
     5ee:	9e 83       	std	Y+6, r25	; 0x06
     5f0:	8d 83       	std	Y+5, r24	; 0x05
static void tostring(u8 str[], u8 num)
{
	int i, rem, len = 0, n;
	n = num;
	/*	Get Digits in Num	*/
    while (n != 0)
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	9e 81       	ldd	r25, Y+6	; 0x06
     5f6:	89 2b       	or	r24, r25
     5f8:	69 f7       	brne	.-38     	; 0x5d4 <tostring+0x2a>
    {
        len++;
        n /= 10;
    }
	/* Loop On Digits	*/
    for (i = 0; i < len; i++)
     5fa:	1a 82       	std	Y+2, r1	; 0x02
     5fc:	19 82       	std	Y+1, r1	; 0x01
     5fe:	34 c0       	rjmp	.+104    	; 0x668 <tostring+0xbe>
    {
		// Num = 123   Rem = 3     Nume = 12 
        rem = num % 10;
     600:	9b 85       	ldd	r25, Y+11	; 0x0b
     602:	8d ec       	ldi	r24, 0xCD	; 205
     604:	98 9f       	mul	r25, r24
     606:	81 2d       	mov	r24, r1
     608:	11 24       	eor	r1, r1
     60a:	86 95       	lsr	r24
     60c:	86 95       	lsr	r24
     60e:	86 95       	lsr	r24
     610:	88 0f       	add	r24, r24
     612:	28 2f       	mov	r18, r24
     614:	22 0f       	add	r18, r18
     616:	22 0f       	add	r18, r18
     618:	82 0f       	add	r24, r18
     61a:	29 2f       	mov	r18, r25
     61c:	28 1b       	sub	r18, r24
     61e:	82 2f       	mov	r24, r18
     620:	88 2f       	mov	r24, r24
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	98 87       	std	Y+8, r25	; 0x08
     626:	8f 83       	std	Y+7, r24	; 0x07
        num = num / 10;
     628:	9b 85       	ldd	r25, Y+11	; 0x0b
     62a:	8d ec       	ldi	r24, 0xCD	; 205
     62c:	98 9f       	mul	r25, r24
     62e:	81 2d       	mov	r24, r1
     630:	11 24       	eor	r1, r1
     632:	86 95       	lsr	r24
     634:	86 95       	lsr	r24
     636:	86 95       	lsr	r24
     638:	8b 87       	std	Y+11, r24	; 0x0b
        str[len - (i + 1)] = rem + '0';
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	2b 81       	ldd	r18, Y+3	; 0x03
     642:	3c 81       	ldd	r19, Y+4	; 0x04
     644:	a9 01       	movw	r20, r18
     646:	48 1b       	sub	r20, r24
     648:	59 0b       	sbc	r21, r25
     64a:	ca 01       	movw	r24, r20
     64c:	9c 01       	movw	r18, r24
     64e:	89 85       	ldd	r24, Y+9	; 0x09
     650:	9a 85       	ldd	r25, Y+10	; 0x0a
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	2f 81       	ldd	r18, Y+7	; 0x07
     658:	20 5d       	subi	r18, 0xD0	; 208
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
    {
        len++;
        n /= 10;
    }
	/* Loop On Digits	*/
    for (i = 0; i < len; i++)
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	29 81       	ldd	r18, Y+1	; 0x01
     66a:	3a 81       	ldd	r19, Y+2	; 0x02
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	9c 81       	ldd	r25, Y+4	; 0x04
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	2c f2       	brlt	.-118    	; 0x600 <tostring+0x56>
		// Num = 123   Rem = 3     Nume = 12 
        rem = num % 10;
        num = num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	29 85       	ldd	r18, Y+9	; 0x09
     67c:	3a 85       	ldd	r19, Y+10	; 0x0a
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	fc 01       	movw	r30, r24
     684:	10 82       	st	Z, r1
}
     686:	00 00       	nop
     688:	2b 96       	adiw	r28, 0x0b	; 11
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <APP_voidCalculatorSetup>:

/*********************************** APIs ********************************/
void APP_voidCalculatorSetup(void)
{
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	2e 97       	sbiw	r28, 0x0e	; 14
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
	/*	INIT GPIO	*/ 
	GPIO_voidInit();
     6ae:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_voidInit>
	/*  INIT USART	*/
	myUART.baudrate = 9600 ;
     6b2:	80 e8       	ldi	r24, 0x80	; 128
     6b4:	95 e2       	ldi	r25, 0x25	; 37
     6b6:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <myUART+0x1>
     6ba:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <myUART>
	myUART.databits =  _8BIT;
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <myUART+0x2>
	myUART.parity= DISABLED_PARITY;
     6c4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <myUART+0x3>
	myUART.stopbits= _1STOPBIT ;
     6c8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <myUART+0x4>
	myUART.state= TRANCIVER ;
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <myUART+0x5>
	myUART.operation= Asynchronous;
     6d2:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <myUART+0x6>
	MCAL_USART_init(&myUART);
     6d6:	82 ef       	ldi	r24, 0xF2	; 242
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 e6 12 	call	0x25cc	; 0x25cc <MCAL_USART_init>
	MCAL_USART_SendString(addString("USART Initialized"));
     6de:	8c e6       	ldi	r24, 0x6C	; 108
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <MCAL_USART_SendString>
	MCAL_USART_TxByteSynch('\r');
     6e6:	8d e0       	ldi	r24, 0x0D	; 13
     6e8:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
	MCAL_USART_TxByteSynch('\n');
     6ec:	8a e0       	ldi	r24, 0x0A	; 10
     6ee:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
	/* INIT LCD		*/
	myLCD.LCD_SIZE_Rows = 4 ; 
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <myLCD>
	myLCD.LCD_SIZE_Cols = 16 ; 
     6f8:	80 e1       	ldi	r24, 0x10	; 16
     6fa:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <myLCD+0x1>
	myLCD.LCD_PortPins = LCD_pins ;
     6fe:	80 e6       	ldi	r24, 0x60	; 96
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <myLCD+0x3>
     706:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <myLCD+0x2>
	LCD_voidInit(&myLCD); 
     70a:	8e ee       	ldi	r24, 0xEE	; 238
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_voidInit>
	LCD_voidSendString(&myLCD,addString("LCD Initialized"));
     712:	6e e7       	ldi	r22, 0x7E	; 126
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	8e ee       	ldi	r24, 0xEE	; 238
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidSendString>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a8 e4       	ldi	r26, 0x48	; 72
     724:	b3 e4       	ldi	r27, 0x43	; 67
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	ab 83       	std	Y+3, r26	; 0x03
     72c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	4a e7       	ldi	r20, 0x7A	; 122
     734:	55 e4       	ldi	r21, 0x45	; 69
     736:	69 81       	ldd	r22, Y+1	; 0x01
     738:	7a 81       	ldd	r23, Y+2	; 0x02
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	9c 81       	ldd	r25, Y+4	; 0x04
     73e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	8d 83       	std	Y+5, r24	; 0x05
     748:	9e 83       	std	Y+6, r25	; 0x06
     74a:	af 83       	std	Y+7, r26	; 0x07
     74c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	6d 81       	ldd	r22, Y+5	; 0x05
     758:	7e 81       	ldd	r23, Y+6	; 0x06
     75a:	8f 81       	ldd	r24, Y+7	; 0x07
     75c:	98 85       	ldd	r25, Y+8	; 0x08
     75e:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
     762:	88 23       	and	r24, r24
     764:	2c f4       	brge	.+10     	; 0x770 <APP_voidCalculatorSetup+0xd6>
		__ticks = 1;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	9a 87       	std	Y+10, r25	; 0x0a
     76c:	89 87       	std	Y+9, r24	; 0x09
     76e:	3f c0       	rjmp	.+126    	; 0x7ee <APP_voidCalculatorSetup+0x154>
	else if (__tmp > 65535)
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	3f ef       	ldi	r19, 0xFF	; 255
     774:	4f e7       	ldi	r20, 0x7F	; 127
     776:	57 e4       	ldi	r21, 0x47	; 71
     778:	6d 81       	ldd	r22, Y+5	; 0x05
     77a:	7e 81       	ldd	r23, Y+6	; 0x06
     77c:	8f 81       	ldd	r24, Y+7	; 0x07
     77e:	98 85       	ldd	r25, Y+8	; 0x08
     780:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
     784:	18 16       	cp	r1, r24
     786:	4c f5       	brge	.+82     	; 0x7da <APP_voidCalculatorSetup+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e2       	ldi	r20, 0x20	; 32
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	69 81       	ldd	r22, Y+1	; 0x01
     792:	7a 81       	ldd	r23, Y+2	; 0x02
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	9c 81       	ldd	r25, Y+4	; 0x04
     798:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	bc 01       	movw	r22, r24
     7a2:	cd 01       	movw	r24, r26
     7a4:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	9a 87       	std	Y+10, r25	; 0x0a
     7ae:	89 87       	std	Y+9, r24	; 0x09
     7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <APP_voidCalculatorSetup+0x136>
     7b2:	80 e9       	ldi	r24, 0x90	; 144
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	9c 87       	std	Y+12, r25	; 0x0c
     7b8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     7bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <APP_voidCalculatorSetup+0x124>
     7c2:	9c 87       	std	Y+12, r25	; 0x0c
     7c4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c6:	89 85       	ldd	r24, Y+9	; 0x09
     7c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	9a 87       	std	Y+10, r25	; 0x0a
     7ce:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d0:	89 85       	ldd	r24, Y+9	; 0x09
     7d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d4:	89 2b       	or	r24, r25
     7d6:	69 f7       	brne	.-38     	; 0x7b2 <APP_voidCalculatorSetup+0x118>
	_delay_ms(200);	
}
     7d8:	14 c0       	rjmp	.+40     	; 0x802 <APP_voidCalculatorSetup+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7da:	6d 81       	ldd	r22, Y+5	; 0x05
     7dc:	7e 81       	ldd	r23, Y+6	; 0x06
     7de:	8f 81       	ldd	r24, Y+7	; 0x07
     7e0:	98 85       	ldd	r25, Y+8	; 0x08
     7e2:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	9a 87       	std	Y+10, r25	; 0x0a
     7ec:	89 87       	std	Y+9, r24	; 0x09
     7ee:	89 85       	ldd	r24, Y+9	; 0x09
     7f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f2:	9e 87       	std	Y+14, r25	; 0x0e
     7f4:	8d 87       	std	Y+13, r24	; 0x0d
     7f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <APP_voidCalculatorSetup+0x160>
     7fe:	9e 87       	std	Y+14, r25	; 0x0e
     800:	8d 87       	std	Y+13, r24	; 0x0d
     802:	00 00       	nop
     804:	2e 96       	adiw	r28, 0x0e	; 14
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <APP_voidCalculatorStrat>:

void APP_voidCalculatorStrat(void)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	c0 56       	subi	r28, 0x60	; 96
     820:	d1 09       	sbc	r29, r1
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
	/*********************** VARs	*****************************/
	u8 LOC_u8ChkExitChat = 0  ; 
     82c:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8Counter  = 0  ; 
     82e:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8Result =  0 ; 
     830:	1e a6       	std	Y+46, r1	; 0x2e
	/*********************** Display ****************************/
	LCD_voidClear(&myLCD);
     832:	8e ee       	ldi	r24, 0xEE	; 238
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("Enter EQN : "));
     83a:	6e e8       	ldi	r22, 0x8E	; 142
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	8e ee       	ldi	r24, 0xEE	; 238
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidSendString>
	MCAL_USART_SendString(addString("Enter EQN : "));
     846:	8e e8       	ldi	r24, 0x8E	; 142
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <MCAL_USART_SendString>
	LCD_voidGotoXY(&myLCD,0,1);
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	8e ee       	ldi	r24, 0xEE	; 238
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidGotoXY>
	MCAL_USART_TxByteSynch('\r');
     85a:	8d e0       	ldi	r24, 0x0D	; 13
     85c:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
	MCAL_USART_TxByteSynch('\n');
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
	MCAL_USART_SendString(addString("    "));
     866:	8b e9       	ldi	r24, 0x9B	; 155
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <MCAL_USART_SendString>
	/*********************** Get Eqn ****************************/
	Glob_u8Eqn[LOC_u8Counter++] = '('  ; 
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	98 0f       	add	r25, r24
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	8c 52       	subi	r24, 0x2C	; 44
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	28 e2       	ldi	r18, 0x28	; 40
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
	MCAL_USART_RxByteSynch(&Glob_u8Eqn[LOC_u8Counter]);
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	8c 52       	subi	r24, 0x2C	; 44
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	0e 94 cb 13 	call	0x2796	; 0x2796 <MCAL_USART_RxByteSynch>
	LOC_u8ChkExitChat = Glob_u8Eqn[LOC_u8Counter] ; 
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	8c 52       	subi	r24, 0x2C	; 44
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	89 83       	std	Y+1, r24	; 0x01
	/********************** Display******************************/
	MCAL_USART_TxByteSynch(Glob_u8Eqn[LOC_u8Counter]);
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	88 2f       	mov	r24, r24
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	8c 52       	subi	r24, 0x2C	; 44
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
	LCD_voidSendChar(&myLCD,Glob_u8Eqn[LOC_u8Counter]);
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	8c 52       	subi	r24, 0x2C	; 44
     8bc:	9f 4f       	sbci	r25, 0xFF	; 255
     8be:	fc 01       	movw	r30, r24
     8c0:	80 81       	ld	r24, Z
     8c2:	68 2f       	mov	r22, r24
     8c4:	8e ee       	ldi	r24, 0xEE	; 238
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_voidSendChar>
	// Increase Counter 
	LOC_u8Counter++ ; 
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	8a 83       	std	Y+2, r24	; 0x02

	/********************** Get Rest of EQN **********************/
	while(!(LOC_u8ChkExitChat == (u8)LAST_EQN_CHAR || LOC_u8ChkExitChat == (u8)'='))
     8d2:	89 c0       	rjmp	.+274    	; 0x9e6 <APP_voidCalculatorStrat+0x1d0>
	{
		// Stil Recieving 
		MCAL_USART_RxByteSynch(&Glob_u8Eqn[LOC_u8Counter]);
     8d4:	8a 81       	ldd	r24, Y+2	; 0x02
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	8c 52       	subi	r24, 0x2C	; 44
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	0e 94 cb 13 	call	0x2796	; 0x2796 <MCAL_USART_RxByteSynch>
		// Disp To USART and LCD
		MCAL_USART_TxByteSynch(Glob_u8Eqn[LOC_u8Counter]);
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	8c 52       	subi	r24, 0x2C	; 44
     8ea:	9f 4f       	sbci	r25, 0xFF	; 255
     8ec:	fc 01       	movw	r30, r24
     8ee:	80 81       	ld	r24, Z
     8f0:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
		LCD_voidSendChar(&myLCD,Glob_u8Eqn[LOC_u8Counter]);
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	8c 52       	subi	r24, 0x2C	; 44
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
     902:	68 2f       	mov	r22, r24
     904:	8e ee       	ldi	r24, 0xEE	; 238
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_voidSendChar>
		// Check Exit Char
		LOC_u8ChkExitChat = Glob_u8Eqn[LOC_u8Counter] ; 	
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	8c 52       	subi	r24, 0x2C	; 44
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	89 83       	std	Y+1, r24	; 0x01
		// Chack Backslach 
		if(Glob_u8Eqn[LOC_u8Counter] == BACKSLASH ) 
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	8c 52       	subi	r24, 0x2C	; 44
     924:	9f 4f       	sbci	r25, 0xFF	; 255
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	88 30       	cpi	r24, 0x08	; 8
     92c:	09 f0       	breq	.+2      	; 0x930 <APP_voidCalculatorStrat+0x11a>
     92e:	58 c0       	rjmp	.+176    	; 0x9e0 <APP_voidCalculatorStrat+0x1ca>
		{
			
			LCD_voidClear(&myLCD);
     930:	8e ee       	ldi	r24, 0xEE	; 238
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_voidClear>
			MCAL_USART_TxByteSynch('\r');
     938:	8d e0       	ldi	r24, 0x0D	; 13
     93a:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
			MCAL_USART_TxByteSynch('\n');
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
			if(LOC_u8Counter == 0 )
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	88 23       	and	r24, r24
     948:	59 f4       	brne	.+22     	; 0x960 <APP_voidCalculatorStrat+0x14a>
			{
				LCD_voidSendString(&myLCD,addString("Enter EQN : "));
     94a:	6e e8       	ldi	r22, 0x8E	; 142
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	8e ee       	ldi	r24, 0xEE	; 238
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidSendString>
				MCAL_USART_SendString(addString("Enter EQN :"));
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <MCAL_USART_SendString>
     95e:	14 c0       	rjmp	.+40     	; 0x988 <APP_voidCalculatorStrat+0x172>
			}
			else
			{
				// Return Eqn 
				Glob_u8Eqn[LOC_u8Counter] = '\0';
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	8c 52       	subi	r24, 0x2C	; 44
     968:	9f 4f       	sbci	r25, 0xFF	; 255
     96a:	fc 01       	movw	r30, r24
     96c:	10 82       	st	Z, r1
				LOC_u8Counter--; 
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	81 50       	subi	r24, 0x01	; 1
     972:	8a 83       	std	Y+2, r24	; 0x02
				LCD_voidSendString(&myLCD,addString("EQN is : "));
     974:	6c ea       	ldi	r22, 0xAC	; 172
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	8e ee       	ldi	r24, 0xEE	; 238
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidSendString>
				MCAL_USART_SendString(addString("EQN is :"));
     980:	86 eb       	ldi	r24, 0xB6	; 182
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 f5 13 	call	0x27ea	; 0x27ea <MCAL_USART_SendString>
			}
			LCD_voidGotoXY(&myLCD,0,1);
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	8e ee       	ldi	r24, 0xEE	; 238
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidGotoXY>
			MCAL_USART_TxByteSynch('\r');
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
			MCAL_USART_TxByteSynch('\n');
     99a:	8a e0       	ldi	r24, 0x0A	; 10
     99c:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
			u8 Loc_u8Counter  ; 
			for(Loc_u8Counter = 1 ; Loc_u8Counter < LOC_u8Counter ; Loc_u8Counter++)
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	8b 83       	std	Y+3, r24	; 0x03
     9a4:	18 c0       	rjmp	.+48     	; 0x9d6 <APP_voidCalculatorStrat+0x1c0>
			{
				LCD_voidSendChar(&myLCD,Glob_u8Eqn[Loc_u8Counter]);
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	8c 52       	subi	r24, 0x2C	; 44
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	68 2f       	mov	r22, r24
     9b6:	8e ee       	ldi	r24, 0xEE	; 238
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_voidSendChar>
				MCAL_USART_TxByteSynch(Glob_u8Eqn[Loc_u8Counter]);
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	8c 52       	subi	r24, 0x2C	; 44
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
			}
			LCD_voidGotoXY(&myLCD,0,1);
			MCAL_USART_TxByteSynch('\r');
			MCAL_USART_TxByteSynch('\n');
			u8 Loc_u8Counter  ; 
			for(Loc_u8Counter = 1 ; Loc_u8Counter < LOC_u8Counter ; Loc_u8Counter++)
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
     9d4:	8b 83       	std	Y+3, r24	; 0x03
     9d6:	9b 81       	ldd	r25, Y+3	; 0x03
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	98 17       	cp	r25, r24
     9dc:	20 f3       	brcs	.-56     	; 0x9a6 <APP_voidCalculatorStrat+0x190>
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <APP_voidCalculatorStrat+0x1d0>
			}	
		}
		else
		{
		// Increase Counter 
		LOC_u8Counter++ ; 
     9e0:	8a 81       	ldd	r24, Y+2	; 0x02
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendChar(&myLCD,Glob_u8Eqn[LOC_u8Counter]);
	// Increase Counter 
	LOC_u8Counter++ ; 

	/********************** Get Rest of EQN **********************/
	while(!(LOC_u8ChkExitChat == (u8)LAST_EQN_CHAR || LOC_u8ChkExitChat == (u8)'='))
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	8d 30       	cpi	r24, 0x0D	; 13
     9ea:	21 f0       	breq	.+8      	; 0x9f4 <APP_voidCalculatorStrat+0x1de>
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	8d 33       	cpi	r24, 0x3D	; 61
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <APP_voidCalculatorStrat+0x1de>
     9f2:	70 cf       	rjmp	.-288    	; 0x8d4 <APP_voidCalculatorStrat+0xbe>
		LOC_u8Counter++ ; 

		}

	}
	Glob_u8Eqn[--LOC_u8Counter] = ')'  ; 
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	8a 83       	std	Y+2, r24	; 0x02
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	88 2f       	mov	r24, r24
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8c 52       	subi	r24, 0x2C	; 44
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
     a04:	29 e2       	ldi	r18, 0x29	; 41
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	Glob_u8Eqn[++LOC_u8Counter] = '\0' ; 
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	8a 83       	std	Y+2, r24	; 0x02
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	8c 52       	subi	r24, 0x2C	; 44
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	fc 01       	movw	r30, r24
     a1c:	10 82       	st	Z, r1
	/************************ Have EQN	**************************/
	u8 stringBuffer[50];
	LOC_u8Counter = 0 ;
     a1e:	1a 82       	std	Y+2, r1	; 0x02
	if(Balanced_Parentheses(Glob_u8Eqn))
     a20:	84 ed       	ldi	r24, 0xD4	; 212
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 6c 00 	call	0xd8	; 0xd8 <Balanced_Parentheses>
     a28:	89 2b       	or	r24, r25
     a2a:	09 f4       	brne	.+2      	; 0xa2e <APP_voidCalculatorStrat+0x218>
     a2c:	bd c0       	rjmp	.+378    	; 0xba8 <APP_voidCalculatorStrat+0x392>
	{
		InfixToPostfix(Glob_u8Eqn,stringBuffer);
     a2e:	ce 01       	movw	r24, r28
     a30:	8f 96       	adiw	r24, 0x2f	; 47
     a32:	bc 01       	movw	r22, r24
     a34:	84 ed       	ldi	r24, 0xD4	; 212
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 69 01 	call	0x2d2	; 0x2d2 <InfixToPostfix>
		EvalPostfix(stringBuffer , &LOC_u8Result);
     a3c:	9e 01       	movw	r18, r28
     a3e:	22 5d       	subi	r18, 0xD2	; 210
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	ce 01       	movw	r24, r28
     a44:	8f 96       	adiw	r24, 0x2f	; 47
     a46:	b9 01       	movw	r22, r18
     a48:	0e 94 32 02 	call	0x464	; 0x464 <EvalPostfix>
		LCD_voidClear(&myLCD);
     a4c:	8e ee       	ldi	r24, 0xEE	; 238
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_voidClear>
		LCD_voidSendString(&myLCD,addString("Result"));
     a54:	6f eb       	ldi	r22, 0xBF	; 191
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	8e ee       	ldi	r24, 0xEE	; 238
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,1);
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	8e ee       	ldi	r24, 0xEE	; 238
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidGotoXY>
		MCAL_USART_TxByteSynch('\r');
     a6c:	8d e0       	ldi	r24, 0x0D	; 13
     a6e:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
		MCAL_USART_TxByteSynch('\n');	
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
		tostring(stringBuffer,LOC_u8Result);
     a78:	2e a5       	ldd	r18, Y+46	; 0x2e
     a7a:	ce 01       	movw	r24, r28
     a7c:	8f 96       	adiw	r24, 0x2f	; 47
     a7e:	62 2f       	mov	r22, r18
     a80:	0e 94 d5 02 	call	0x5aa	; 0x5aa <tostring>
		while (stringBuffer[LOC_u8Counter] != '\0')
     a84:	12 c0       	rjmp	.+36     	; 0xaaa <APP_voidCalculatorStrat+0x294>
		{
			LCD_voidSendChar(&myLCD,stringBuffer[LOC_u8Counter]);
     a86:	8a 81       	ldd	r24, Y+2	; 0x02
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	9e 01       	movw	r18, r28
     a8e:	21 5d       	subi	r18, 0xD1	; 209
     a90:	3f 4f       	sbci	r19, 0xFF	; 255
     a92:	82 0f       	add	r24, r18
     a94:	93 1f       	adc	r25, r19
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	68 2f       	mov	r22, r24
     a9c:	8e ee       	ldi	r24, 0xEE	; 238
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_voidSendChar>
			LOC_u8Counter++ ; 
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendString(&myLCD,addString("Result"));
		LCD_voidGotoXY(&myLCD,0,1);
		MCAL_USART_TxByteSynch('\r');
		MCAL_USART_TxByteSynch('\n');	
		tostring(stringBuffer,LOC_u8Result);
		while (stringBuffer[LOC_u8Counter] != '\0')
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9e 01       	movw	r18, r28
     ab2:	21 5d       	subi	r18, 0xD1	; 209
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	88 23       	and	r24, r24
     ac0:	11 f7       	brne	.-60     	; 0xa86 <APP_voidCalculatorStrat+0x270>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e4       	ldi	r25, 0x40	; 64
     ac6:	ac e1       	ldi	r26, 0x1C	; 28
     ac8:	b6 e4       	ldi	r27, 0x46	; 70
     aca:	8c 87       	std	Y+12, r24	; 0x0c
     acc:	9d 87       	std	Y+13, r25	; 0x0d
     ace:	ae 87       	std	Y+14, r26	; 0x0e
     ad0:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a e7       	ldi	r20, 0x7A	; 122
     ad8:	55 e4       	ldi	r21, 0x45	; 69
     ada:	6c 85       	ldd	r22, Y+12	; 0x0c
     adc:	7d 85       	ldd	r23, Y+13	; 0x0d
     ade:	8e 85       	ldd	r24, Y+14	; 0x0e
     ae0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ae2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	88 8b       	std	Y+16, r24	; 0x10
     aec:	99 8b       	std	Y+17, r25	; 0x11
     aee:	aa 8b       	std	Y+18, r26	; 0x12
     af0:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e8       	ldi	r20, 0x80	; 128
     af8:	5f e3       	ldi	r21, 0x3F	; 63
     afa:	68 89       	ldd	r22, Y+16	; 0x10
     afc:	79 89       	ldd	r23, Y+17	; 0x11
     afe:	8a 89       	ldd	r24, Y+18	; 0x12
     b00:	9b 89       	ldd	r25, Y+19	; 0x13
     b02:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
     b06:	88 23       	and	r24, r24
     b08:	2c f4       	brge	.+10     	; 0xb14 <APP_voidCalculatorStrat+0x2fe>
		__ticks = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	9d 8b       	std	Y+21, r25	; 0x15
     b10:	8c 8b       	std	Y+20, r24	; 0x14
     b12:	3f c0       	rjmp	.+126    	; 0xb92 <APP_voidCalculatorStrat+0x37c>
	else if (__tmp > 65535)
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	3f ef       	ldi	r19, 0xFF	; 255
     b18:	4f e7       	ldi	r20, 0x7F	; 127
     b1a:	57 e4       	ldi	r21, 0x47	; 71
     b1c:	68 89       	ldd	r22, Y+16	; 0x10
     b1e:	79 89       	ldd	r23, Y+17	; 0x11
     b20:	8a 89       	ldd	r24, Y+18	; 0x12
     b22:	9b 89       	ldd	r25, Y+19	; 0x13
     b24:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
     b28:	18 16       	cp	r1, r24
     b2a:	4c f5       	brge	.+82     	; 0xb7e <APP_voidCalculatorStrat+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e2       	ldi	r20, 0x20	; 32
     b32:	51 e4       	ldi	r21, 0x41	; 65
     b34:	6c 85       	ldd	r22, Y+12	; 0x0c
     b36:	7d 85       	ldd	r23, Y+13	; 0x0d
     b38:	8e 85       	ldd	r24, Y+14	; 0x0e
     b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b3c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9d 8b       	std	Y+21, r25	; 0x15
     b52:	8c 8b       	std	Y+20, r24	; 0x14
     b54:	0f c0       	rjmp	.+30     	; 0xb74 <APP_voidCalculatorStrat+0x35e>
     b56:	80 e9       	ldi	r24, 0x90	; 144
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	9f 8b       	std	Y+23, r25	; 0x17
     b5c:	8e 8b       	std	Y+22, r24	; 0x16
     b5e:	8e 89       	ldd	r24, Y+22	; 0x16
     b60:	9f 89       	ldd	r25, Y+23	; 0x17
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <APP_voidCalculatorStrat+0x34c>
     b66:	9f 8b       	std	Y+23, r25	; 0x17
     b68:	8e 8b       	std	Y+22, r24	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6a:	8c 89       	ldd	r24, Y+20	; 0x14
     b6c:	9d 89       	ldd	r25, Y+21	; 0x15
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9d 8b       	std	Y+21, r25	; 0x15
     b72:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b74:	8c 89       	ldd	r24, Y+20	; 0x14
     b76:	9d 89       	ldd	r25, Y+21	; 0x15
     b78:	89 2b       	or	r24, r25
     b7a:	69 f7       	brne	.-38     	; 0xb56 <APP_voidCalculatorStrat+0x340>
     b7c:	92 c0       	rjmp	.+292    	; 0xca2 <APP_voidCalculatorStrat+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	68 89       	ldd	r22, Y+16	; 0x10
     b80:	79 89       	ldd	r23, Y+17	; 0x11
     b82:	8a 89       	ldd	r24, Y+18	; 0x12
     b84:	9b 89       	ldd	r25, Y+19	; 0x13
     b86:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	9d 8b       	std	Y+21, r25	; 0x15
     b90:	8c 8b       	std	Y+20, r24	; 0x14
     b92:	8c 89       	ldd	r24, Y+20	; 0x14
     b94:	9d 89       	ldd	r25, Y+21	; 0x15
     b96:	99 8f       	std	Y+25, r25	; 0x19
     b98:	88 8f       	std	Y+24, r24	; 0x18
     b9a:	88 8d       	ldd	r24, Y+24	; 0x18
     b9c:	99 8d       	ldd	r25, Y+25	; 0x19
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <APP_voidCalculatorStrat+0x388>
     ba2:	99 8f       	std	Y+25, r25	; 0x19
     ba4:	88 8f       	std	Y+24, r24	; 0x18
     ba6:	7d c0       	rjmp	.+250    	; 0xca2 <APP_voidCalculatorStrat+0x48c>

		_delay_ms(10000);
	}
    else
	{
		LCD_voidClear(&myLCD);
     ba8:	8e ee       	ldi	r24, 0xEE	; 238
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_voidClear>
        LCD_voidSendString(&myLCD,addString("Not Balanced"));
     bb0:	66 ec       	ldi	r22, 0xC6	; 198
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	8e ee       	ldi	r24, 0xEE	; 238
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidSendString>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a8 e4       	ldi	r26, 0x48	; 72
     bc2:	b4 e4       	ldi	r27, 0x44	; 68
     bc4:	8c 83       	std	Y+4, r24	; 0x04
     bc6:	9d 83       	std	Y+5, r25	; 0x05
     bc8:	ae 83       	std	Y+6, r26	; 0x06
     bca:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a e7       	ldi	r20, 0x7A	; 122
     bd2:	55 e4       	ldi	r21, 0x45	; 69
     bd4:	6c 81       	ldd	r22, Y+4	; 0x04
     bd6:	7d 81       	ldd	r23, Y+5	; 0x05
     bd8:	8e 81       	ldd	r24, Y+6	; 0x06
     bda:	9f 81       	ldd	r25, Y+7	; 0x07
     bdc:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	8a 8f       	std	Y+26, r24	; 0x1a
     be6:	9b 8f       	std	Y+27, r25	; 0x1b
     be8:	ac 8f       	std	Y+28, r26	; 0x1c
     bea:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	6a 8d       	ldd	r22, Y+26	; 0x1a
     bf6:	7b 8d       	ldd	r23, Y+27	; 0x1b
     bf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bfc:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
     c00:	88 23       	and	r24, r24
     c02:	2c f4       	brge	.+10     	; 0xc0e <APP_voidCalculatorStrat+0x3f8>
		__ticks = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9f 8f       	std	Y+31, r25	; 0x1f
     c0a:	8e 8f       	std	Y+30, r24	; 0x1e
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <APP_voidCalculatorStrat+0x476>
	else if (__tmp > 65535)
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c18:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c1e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
     c22:	18 16       	cp	r1, r24
     c24:	4c f5       	brge	.+82     	; 0xc78 <APP_voidCalculatorStrat+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	6c 81       	ldd	r22, Y+4	; 0x04
     c30:	7d 81       	ldd	r23, Y+5	; 0x05
     c32:	8e 81       	ldd	r24, Y+6	; 0x06
     c34:	9f 81       	ldd	r25, Y+7	; 0x07
     c36:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9f 8f       	std	Y+31, r25	; 0x1f
     c4c:	8e 8f       	std	Y+30, r24	; 0x1e
     c4e:	0f c0       	rjmp	.+30     	; 0xc6e <APP_voidCalculatorStrat+0x458>
     c50:	80 e9       	ldi	r24, 0x90	; 144
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	99 a3       	std	Y+33, r25	; 0x21
     c56:	88 a3       	std	Y+32, r24	; 0x20
     c58:	88 a1       	ldd	r24, Y+32	; 0x20
     c5a:	99 a1       	ldd	r25, Y+33	; 0x21
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <APP_voidCalculatorStrat+0x446>
     c60:	99 a3       	std	Y+33, r25	; 0x21
     c62:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c66:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	9f 8f       	std	Y+31, r25	; 0x1f
     c6c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c70:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c72:	89 2b       	or	r24, r25
     c74:	69 f7       	brne	.-38     	; 0xc50 <APP_voidCalculatorStrat+0x43a>
		_delay_ms(800);
		return ; 
     c76:	87 c0       	rjmp	.+270    	; 0xd86 <APP_voidCalculatorStrat+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c78:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c7a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c80:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	9f 8f       	std	Y+31, r25	; 0x1f
     c8a:	8e 8f       	std	Y+30, r24	; 0x1e
     c8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c8e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c90:	9b a3       	std	Y+35, r25	; 0x23
     c92:	8a a3       	std	Y+34, r24	; 0x22
     c94:	8a a1       	ldd	r24, Y+34	; 0x22
     c96:	9b a1       	ldd	r25, Y+35	; 0x23
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <APP_voidCalculatorStrat+0x482>
     c9c:	9b a3       	std	Y+35, r25	; 0x23
     c9e:	8a a3       	std	Y+34, r24	; 0x22
     ca0:	72 c0       	rjmp	.+228    	; 0xd86 <APP_voidCalculatorStrat+0x570>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e5       	ldi	r25, 0x50	; 80
     ca6:	a3 e4       	ldi	r26, 0x43	; 67
     ca8:	b7 e4       	ldi	r27, 0x47	; 71
     caa:	88 87       	std	Y+8, r24	; 0x08
     cac:	99 87       	std	Y+9, r25	; 0x09
     cae:	aa 87       	std	Y+10, r26	; 0x0a
     cb0:	bb 87       	std	Y+11, r27	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	55 e4       	ldi	r21, 0x45	; 69
     cba:	68 85       	ldd	r22, Y+8	; 0x08
     cbc:	79 85       	ldd	r23, Y+9	; 0x09
     cbe:	8a 85       	ldd	r24, Y+10	; 0x0a
     cc0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cc2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8c a3       	std	Y+36, r24	; 0x24
     ccc:	9d a3       	std	Y+37, r25	; 0x25
     cce:	ae a3       	std	Y+38, r26	; 0x26
     cd0:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	6c a1       	ldd	r22, Y+36	; 0x24
     cdc:	7d a1       	ldd	r23, Y+37	; 0x25
     cde:	8e a1       	ldd	r24, Y+38	; 0x26
     ce0:	9f a1       	ldd	r25, Y+39	; 0x27
     ce2:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <APP_voidCalculatorStrat+0x4de>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	99 a7       	std	Y+41, r25	; 0x29
     cf0:	88 a7       	std	Y+40, r24	; 0x28
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <APP_voidCalculatorStrat+0x55c>
	else if (__tmp > 65535)
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	4f e7       	ldi	r20, 0x7F	; 127
     cfa:	57 e4       	ldi	r21, 0x47	; 71
     cfc:	6c a1       	ldd	r22, Y+36	; 0x24
     cfe:	7d a1       	ldd	r23, Y+37	; 0x25
     d00:	8e a1       	ldd	r24, Y+38	; 0x26
     d02:	9f a1       	ldd	r25, Y+39	; 0x27
     d04:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <APP_voidCalculatorStrat+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e2       	ldi	r20, 0x20	; 32
     d12:	51 e4       	ldi	r21, 0x41	; 65
     d14:	68 85       	ldd	r22, Y+8	; 0x08
     d16:	79 85       	ldd	r23, Y+9	; 0x09
     d18:	8a 85       	ldd	r24, Y+10	; 0x0a
     d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	99 a7       	std	Y+41, r25	; 0x29
     d32:	88 a7       	std	Y+40, r24	; 0x28
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <APP_voidCalculatorStrat+0x53e>
     d36:	80 e9       	ldi	r24, 0x90	; 144
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	9b a7       	std	Y+43, r25	; 0x2b
     d3c:	8a a7       	std	Y+42, r24	; 0x2a
     d3e:	8a a5       	ldd	r24, Y+42	; 0x2a
     d40:	9b a5       	ldd	r25, Y+43	; 0x2b
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <APP_voidCalculatorStrat+0x52c>
     d46:	9b a7       	std	Y+43, r25	; 0x2b
     d48:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	88 a5       	ldd	r24, Y+40	; 0x28
     d4c:	99 a5       	ldd	r25, Y+41	; 0x29
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	99 a7       	std	Y+41, r25	; 0x29
     d52:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	88 a5       	ldd	r24, Y+40	; 0x28
     d56:	99 a5       	ldd	r25, Y+41	; 0x29
     d58:	89 2b       	or	r24, r25
     d5a:	69 f7       	brne	.-38     	; 0xd36 <APP_voidCalculatorStrat+0x520>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <APP_voidCalculatorStrat+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	6c a1       	ldd	r22, Y+36	; 0x24
     d60:	7d a1       	ldd	r23, Y+37	; 0x25
     d62:	8e a1       	ldd	r24, Y+38	; 0x26
     d64:	9f a1       	ldd	r25, Y+39	; 0x27
     d66:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	99 a7       	std	Y+41, r25	; 0x29
     d70:	88 a7       	std	Y+40, r24	; 0x28
     d72:	88 a5       	ldd	r24, Y+40	; 0x28
     d74:	99 a5       	ldd	r25, Y+41	; 0x29
     d76:	9d a7       	std	Y+45, r25	; 0x2d
     d78:	8c a7       	std	Y+44, r24	; 0x2c
     d7a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d7c:	9d a5       	ldd	r25, Y+45	; 0x2d
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <APP_voidCalculatorStrat+0x568>
     d82:	9d a7       	std	Y+45, r25	; 0x2d
     d84:	8c a7       	std	Y+44, r24	; 0x2c
	}	
	/************************ Wait ****************************/	
		_delay_ms(50000);

     d86:	c0 5a       	subi	r28, 0xA0	; 160
     d88:	df 4f       	sbci	r29, 0xFF	; 255
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <stack_creation>:
#include "stackConfig.h"
#include "stackAPIs.h"
#include "stackPrivate.h"
#
void stack_creation(stack_t *pointerToStack)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <stack_creation+0x6>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
    pointerToStack->_stackTop = 0;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	fc 01       	movw	r30, r24
     dae:	11 82       	std	Z+1, r1	; 0x01
     db0:	10 82       	st	Z, r1
}
     db2:	00 00       	nop
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <stack_push>:
STACK_STATE stack_push(stackEntery enteryData,stack_t *pointerToStack)
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <stack_push+0x6>
     dc4:	1f 92       	push	r1
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	7b 83       	std	Y+3, r23	; 0x03
     dce:	6a 83       	std	Y+2, r22	; 0x02
    /*  Check if it Full or not     */
    if(pointerToStack->_stackTop == stackSize-1)
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	fc 01       	movw	r30, r24
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	43 97       	sbiw	r24, 0x13	; 19
     ddc:	11 f4       	brne	.+4      	; 0xde2 <stack_push+0x24>
        return STACK_FULL ;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	16 c0       	rjmp	.+44     	; 0xe0e <stack_push+0x50>
    /*  If it not full add e=new entery */
    pointerToStack ->_stackArray[pointerToStack->_stackTop++] = enteryData ;
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	fc 01       	movw	r30, r24
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	ac 01       	movw	r20, r24
     dee:	4f 5f       	subi	r20, 0xFF	; 255
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	2a 81       	ldd	r18, Y+2	; 0x02
     df4:	3b 81       	ldd	r19, Y+3	; 0x03
     df6:	f9 01       	movw	r30, r18
     df8:	51 83       	std	Z+1, r21	; 0x01
     dfa:	40 83       	st	Z, r20
     dfc:	2a 81       	ldd	r18, Y+2	; 0x02
     dfe:	3b 81       	ldd	r19, Y+3	; 0x03
     e00:	82 0f       	add	r24, r18
     e02:	93 1f       	adc	r25, r19
     e04:	02 96       	adiw	r24, 0x02	; 2
     e06:	29 81       	ldd	r18, Y+1	; 0x01
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
    return STACK_NO_ERROR ;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <stack_pop>:
STACK_STATE stack_pop(stackEntery *enteryData,stack_t *pointerToStack)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <stack_pop+0x6>
     e20:	00 d0       	rcall	.+0      	; 0xe22 <stack_pop+0x8>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	7c 83       	std	Y+4, r23	; 0x04
     e2c:	6b 83       	std	Y+3, r22	; 0x03
    /* Check if it empty or not */
    if(pointerToStack->_stackTop == 0)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	89 2b       	or	r24, r25
     e3a:	11 f4       	brne	.+4      	; 0xe40 <stack_pop+0x26>
        return STACK_EMPTY ;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	1e c0       	rjmp	.+60     	; 0xe7c <stack_pop+0x62>
    /*  Add entery to *enteryData */
    pointerToStack->_stackTop -- ;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	9c 01       	movw	r18, r24
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	fc 01       	movw	r30, r24
     e56:	31 83       	std	Z+1, r19	; 0x01
     e58:	20 83       	st	Z, r18
    *enteryData = pointerToStack->_stackArray[pointerToStack->_stackTop];
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	2b 81       	ldd	r18, Y+3	; 0x03
     e66:	3c 81       	ldd	r19, Y+4	; 0x04
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	02 96       	adiw	r24, 0x02	; 2
     e6e:	fc 01       	movw	r30, r24
     e70:	20 81       	ld	r18, Z
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
    return STACK_NO_ERROR ;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <stack_isEmpty>:
STACK_STATE stack_isEmpty(stack_t *pointerToStack)
{
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <stack_isEmpty+0x6>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
    if(pointerToStack->_stackTop == 0)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	89 2b       	or	r24, r25
     ea4:	11 f4       	brne	.+4      	; 0xeaa <stack_isEmpty+0x20>
        return STACK_EMPTY ;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <stack_isEmpty+0x22>
    return STACK_NO_ERROR ;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <LCD_voidInit>:
{

	LCD_voidSendChar(ptrLCD,storedCharIndex);
	
	
}
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	60 97       	sbiw	r28, 0x10	; 16
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	98 8b       	std	Y+16, r25	; 0x10
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	98 89       	ldd	r25, Y+16	; 0x10
     ed2:	fc 01       	movw	r30, r24
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	05 96       	adiw	r24, 0x05	; 5
     eda:	fc 01       	movw	r30, r24
     edc:	20 81       	ld	r18, Z
     ede:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee0:	98 89       	ldd	r25, Y+16	; 0x10
     ee2:	fc 01       	movw	r30, r24
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	04 96       	adiw	r24, 0x04	; 4
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	62 2f       	mov	r22, r18
     ef2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <GPIO_voidSetPinDirection>
     ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef8:	98 89       	ldd	r25, Y+16	; 0x10
     efa:	fc 01       	movw	r30, r24
     efc:	82 81       	ldd	r24, Z+2	; 0x02
     efe:	93 81       	ldd	r25, Z+3	; 0x03
     f00:	07 96       	adiw	r24, 0x07	; 7
     f02:	fc 01       	movw	r30, r24
     f04:	20 81       	ld	r18, Z
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	98 89       	ldd	r25, Y+16	; 0x10
     f0a:	fc 01       	movw	r30, r24
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	06 96       	adiw	r24, 0x06	; 6
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	62 2f       	mov	r22, r18
     f1a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <GPIO_voidSetPinDirection>
     f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f20:	98 89       	ldd	r25, Y+16	; 0x10
     f22:	fc 01       	movw	r30, r24
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	09 96       	adiw	r24, 0x09	; 9
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 81       	ld	r18, Z
     f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f30:	98 89       	ldd	r25, Y+16	; 0x10
     f32:	fc 01       	movw	r30, r24
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	08 96       	adiw	r24, 0x08	; 8
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	62 2f       	mov	r22, r18
     f42:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <GPIO_voidSetPinDirection>
     f46:	8f 85       	ldd	r24, Y+15	; 0x0f
     f48:	98 89       	ldd	r25, Y+16	; 0x10
     f4a:	fc 01       	movw	r30, r24
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	0b 96       	adiw	r24, 0x0b	; 11
     f52:	fc 01       	movw	r30, r24
     f54:	20 81       	ld	r18, Z
     f56:	8f 85       	ldd	r24, Y+15	; 0x0f
     f58:	98 89       	ldd	r25, Y+16	; 0x10
     f5a:	fc 01       	movw	r30, r24
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	0a 96       	adiw	r24, 0x0a	; 10
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	62 2f       	mov	r22, r18
     f6a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <GPIO_voidSetPinDirection>
     f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f70:	98 89       	ldd	r25, Y+16	; 0x10
     f72:	fc 01       	movw	r30, r24
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	03 96       	adiw	r24, 0x03	; 3
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 81       	ld	r18, Z
     f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f80:	98 89       	ldd	r25, Y+16	; 0x10
     f82:	fc 01       	movw	r30, r24
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	93 81       	ldd	r25, Z+3	; 0x03
     f88:	02 96       	adiw	r24, 0x02	; 2
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	62 2f       	mov	r22, r18
     f92:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <GPIO_voidSetPinDirection>
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	98 89       	ldd	r25, Y+16	; 0x10
     f9a:	fc 01       	movw	r30, r24
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 81       	ld	r18, Z
     fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa8:	98 89       	ldd	r25, Y+16	; 0x10
     faa:	fc 01       	movw	r30, r24
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 81       	ld	r24, Z
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	62 2f       	mov	r22, r18
     fb8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <GPIO_voidSetPinDirection>
     fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbe:	98 89       	ldd	r25, Y+16	; 0x10
     fc0:	62 e0       	ldi	r22, 0x02	; 2
     fc2:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
     fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc8:	98 89       	ldd	r25, Y+16	; 0x10
     fca:	68 e2       	ldi	r22, 0x28	; 40
     fcc:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
     fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd2:	98 89       	ldd	r25, Y+16	; 0x10
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
     fda:	8f 85       	ldd	r24, Y+15	; 0x0f
     fdc:	98 89       	ldd	r25, Y+16	; 0x10
     fde:	6f e0       	ldi	r22, 0x0F	; 15
     fe0:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
     fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe6:	98 89       	ldd	r25, Y+16	; 0x10
     fe8:	60 e8       	ldi	r22, 0x80	; 128
     fea:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	ab 83       	std	Y+3, r26	; 0x03
     ffc:	bc 83       	std	Y+4, r27	; 0x04
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a e7       	ldi	r20, 0x7A	; 122
    1004:	55 e4       	ldi	r21, 0x45	; 69
    1006:	69 81       	ldd	r22, Y+1	; 0x01
    1008:	7a 81       	ldd	r23, Y+2	; 0x02
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	af 83       	std	Y+7, r26	; 0x07
    101c:	b8 87       	std	Y+8, r27	; 0x08
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	5f e3       	ldi	r21, 0x3F	; 63
    1026:	6d 81       	ldd	r22, Y+5	; 0x05
    1028:	7e 81       	ldd	r23, Y+6	; 0x06
    102a:	8f 81       	ldd	r24, Y+7	; 0x07
    102c:	98 85       	ldd	r25, Y+8	; 0x08
    102e:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <LCD_voidInit+0x18a>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9a 87       	std	Y+10, r25	; 0x0a
    103c:	89 87       	std	Y+9, r24	; 0x09
    103e:	3f c0       	rjmp	.+126    	; 0x10be <LCD_voidInit+0x208>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	3f ef       	ldi	r19, 0xFF	; 255
    1044:	4f e7       	ldi	r20, 0x7F	; 127
    1046:	57 e4       	ldi	r21, 0x47	; 71
    1048:	6d 81       	ldd	r22, Y+5	; 0x05
    104a:	7e 81       	ldd	r23, Y+6	; 0x06
    104c:	8f 81       	ldd	r24, Y+7	; 0x07
    104e:	98 85       	ldd	r25, Y+8	; 0x08
    1050:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <LCD_voidInit+0x1f4>
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	69 81       	ldd	r22, Y+1	; 0x01
    1062:	7a 81       	ldd	r23, Y+2	; 0x02
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9a 87       	std	Y+10, r25	; 0x0a
    107e:	89 87       	std	Y+9, r24	; 0x09
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <LCD_voidInit+0x1ea>
    1082:	80 e9       	ldi	r24, 0x90	; 144
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9c 87       	std	Y+12, r25	; 0x0c
    1088:	8b 87       	std	Y+11, r24	; 0x0b
    108a:	8b 85       	ldd	r24, Y+11	; 0x0b
    108c:	9c 85       	ldd	r25, Y+12	; 0x0c
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_voidInit+0x1d8>
    1092:	9c 87       	std	Y+12, r25	; 0x0c
    1094:	8b 87       	std	Y+11, r24	; 0x0b
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9a 87       	std	Y+10, r25	; 0x0a
    109e:	89 87       	std	Y+9, r24	; 0x09
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	89 2b       	or	r24, r25
    10a6:	69 f7       	brne	.-38     	; 0x1082 <LCD_voidInit+0x1cc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <LCD_voidInit+0x21c>
    10aa:	6d 81       	ldd	r22, Y+5	; 0x05
    10ac:	7e 81       	ldd	r23, Y+6	; 0x06
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 85       	ldd	r25, Y+8	; 0x08
    10b2:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9a 87       	std	Y+10, r25	; 0x0a
    10bc:	89 87       	std	Y+9, r24	; 0x09
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	9e 87       	std	Y+14, r25	; 0x0e
    10c4:	8d 87       	std	Y+13, r24	; 0x0d
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <LCD_voidInit+0x214>
    10ce:	9e 87       	std	Y+14, r25	; 0x0e
    10d0:	8d 87       	std	Y+13, r24	; 0x0d
    10d2:	00 00       	nop
    10d4:	60 96       	adiw	r28, 0x10	; 16
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <LCD_voidSendChar>:
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	eb 97       	sbiw	r28, 0x3b	; 59
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	9a af       	std	Y+58, r25	; 0x3a
    10fc:	89 af       	std	Y+57, r24	; 0x39
    10fe:	6b af       	std	Y+59, r22	; 0x3b
    1100:	8b ad       	ldd	r24, Y+59	; 0x3b
    1102:	82 95       	swap	r24
    1104:	8f 70       	andi	r24, 0x0F	; 15
    1106:	38 2f       	mov	r19, r24
    1108:	31 70       	andi	r19, 0x01	; 1
    110a:	89 ad       	ldd	r24, Y+57	; 0x39
    110c:	9a ad       	ldd	r25, Y+58	; 0x3a
    110e:	fc 01       	movw	r30, r24
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	05 96       	adiw	r24, 0x05	; 5
    1116:	fc 01       	movw	r30, r24
    1118:	20 81       	ld	r18, Z
    111a:	89 ad       	ldd	r24, Y+57	; 0x39
    111c:	9a ad       	ldd	r25, Y+58	; 0x3a
    111e:	fc 01       	movw	r30, r24
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	04 96       	adiw	r24, 0x04	; 4
    1126:	fc 01       	movw	r30, r24
    1128:	80 81       	ld	r24, Z
    112a:	43 2f       	mov	r20, r19
    112c:	62 2f       	mov	r22, r18
    112e:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1132:	8b ad       	ldd	r24, Y+59	; 0x3b
    1134:	82 95       	swap	r24
    1136:	86 95       	lsr	r24
    1138:	87 70       	andi	r24, 0x07	; 7
    113a:	38 2f       	mov	r19, r24
    113c:	31 70       	andi	r19, 0x01	; 1
    113e:	89 ad       	ldd	r24, Y+57	; 0x39
    1140:	9a ad       	ldd	r25, Y+58	; 0x3a
    1142:	fc 01       	movw	r30, r24
    1144:	82 81       	ldd	r24, Z+2	; 0x02
    1146:	93 81       	ldd	r25, Z+3	; 0x03
    1148:	07 96       	adiw	r24, 0x07	; 7
    114a:	fc 01       	movw	r30, r24
    114c:	20 81       	ld	r18, Z
    114e:	89 ad       	ldd	r24, Y+57	; 0x39
    1150:	9a ad       	ldd	r25, Y+58	; 0x3a
    1152:	fc 01       	movw	r30, r24
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	06 96       	adiw	r24, 0x06	; 6
    115a:	fc 01       	movw	r30, r24
    115c:	80 81       	ld	r24, Z
    115e:	43 2f       	mov	r20, r19
    1160:	62 2f       	mov	r22, r18
    1162:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1166:	8b ad       	ldd	r24, Y+59	; 0x3b
    1168:	82 95       	swap	r24
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	83 70       	andi	r24, 0x03	; 3
    1170:	38 2f       	mov	r19, r24
    1172:	31 70       	andi	r19, 0x01	; 1
    1174:	89 ad       	ldd	r24, Y+57	; 0x39
    1176:	9a ad       	ldd	r25, Y+58	; 0x3a
    1178:	fc 01       	movw	r30, r24
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	09 96       	adiw	r24, 0x09	; 9
    1180:	fc 01       	movw	r30, r24
    1182:	20 81       	ld	r18, Z
    1184:	89 ad       	ldd	r24, Y+57	; 0x39
    1186:	9a ad       	ldd	r25, Y+58	; 0x3a
    1188:	fc 01       	movw	r30, r24
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	08 96       	adiw	r24, 0x08	; 8
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	43 2f       	mov	r20, r19
    1196:	62 2f       	mov	r22, r18
    1198:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    119c:	8b ad       	ldd	r24, Y+59	; 0x3b
    119e:	38 2f       	mov	r19, r24
    11a0:	33 1f       	adc	r19, r19
    11a2:	33 27       	eor	r19, r19
    11a4:	33 1f       	adc	r19, r19
    11a6:	89 ad       	ldd	r24, Y+57	; 0x39
    11a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    11aa:	fc 01       	movw	r30, r24
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	0b 96       	adiw	r24, 0x0b	; 11
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 81       	ld	r18, Z
    11b6:	89 ad       	ldd	r24, Y+57	; 0x39
    11b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    11ba:	fc 01       	movw	r30, r24
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	0a 96       	adiw	r24, 0x0a	; 10
    11c2:	fc 01       	movw	r30, r24
    11c4:	80 81       	ld	r24, Z
    11c6:	43 2f       	mov	r20, r19
    11c8:	62 2f       	mov	r22, r18
    11ca:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    11ce:	89 ad       	ldd	r24, Y+57	; 0x39
    11d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    11d2:	fc 01       	movw	r30, r24
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	03 96       	adiw	r24, 0x03	; 3
    11da:	fc 01       	movw	r30, r24
    11dc:	20 81       	ld	r18, Z
    11de:	89 ad       	ldd	r24, Y+57	; 0x39
    11e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    11e2:	fc 01       	movw	r30, r24
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	02 96       	adiw	r24, 0x02	; 2
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	62 2f       	mov	r22, r18
    11f2:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    11f6:	89 ad       	ldd	r24, Y+57	; 0x39
    11f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    11fa:	fc 01       	movw	r30, r24
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	fc 01       	movw	r30, r24
    1204:	20 81       	ld	r18, Z
    1206:	89 ad       	ldd	r24, Y+57	; 0x39
    1208:	9a ad       	ldd	r25, Y+58	; 0x3a
    120a:	fc 01       	movw	r30, r24
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	fc 01       	movw	r30, r24
    1212:	80 81       	ld	r24, Z
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	62 2f       	mov	r22, r18
    1218:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e8       	ldi	r26, 0x80	; 128
    1222:	bf e3       	ldi	r27, 0x3F	; 63
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	ab 83       	std	Y+3, r26	; 0x03
    122a:	bc 83       	std	Y+4, r27	; 0x04
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	4a e7       	ldi	r20, 0x7A	; 122
    1232:	55 e4       	ldi	r21, 0x45	; 69
    1234:	69 81       	ldd	r22, Y+1	; 0x01
    1236:	7a 81       	ldd	r23, Y+2	; 0x02
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f a7       	std	Y+47, r24	; 0x2f
    1246:	98 ab       	std	Y+48, r25	; 0x30
    1248:	a9 ab       	std	Y+49, r26	; 0x31
    124a:	ba ab       	std	Y+50, r27	; 0x32
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	6f a5       	ldd	r22, Y+47	; 0x2f
    1256:	78 a9       	ldd	r23, Y+48	; 0x30
    1258:	89 a9       	ldd	r24, Y+49	; 0x31
    125a:	9a a9       	ldd	r25, Y+50	; 0x32
    125c:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <LCD_voidSendChar+0x188>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9c ab       	std	Y+52, r25	; 0x34
    126a:	8b ab       	std	Y+51, r24	; 0x33
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <LCD_voidSendChar+0x206>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	6f a5       	ldd	r22, Y+47	; 0x2f
    1278:	78 a9       	ldd	r23, Y+48	; 0x30
    127a:	89 a9       	ldd	r24, Y+49	; 0x31
    127c:	9a a9       	ldd	r25, Y+50	; 0x32
    127e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <LCD_voidSendChar+0x1f2>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e2       	ldi	r20, 0x20	; 32
    128c:	51 e4       	ldi	r21, 0x41	; 65
    128e:	69 81       	ldd	r22, Y+1	; 0x01
    1290:	7a 81       	ldd	r23, Y+2	; 0x02
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9c ab       	std	Y+52, r25	; 0x34
    12ac:	8b ab       	std	Y+51, r24	; 0x33
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <LCD_voidSendChar+0x1e8>
    12b0:	80 e9       	ldi	r24, 0x90	; 144
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	9e ab       	std	Y+54, r25	; 0x36
    12b6:	8d ab       	std	Y+53, r24	; 0x35
    12b8:	8d a9       	ldd	r24, Y+53	; 0x35
    12ba:	9e a9       	ldd	r25, Y+54	; 0x36
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <LCD_voidSendChar+0x1d6>
    12c0:	9e ab       	std	Y+54, r25	; 0x36
    12c2:	8d ab       	std	Y+53, r24	; 0x35
    12c4:	8b a9       	ldd	r24, Y+51	; 0x33
    12c6:	9c a9       	ldd	r25, Y+52	; 0x34
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9c ab       	std	Y+52, r25	; 0x34
    12cc:	8b ab       	std	Y+51, r24	; 0x33
    12ce:	8b a9       	ldd	r24, Y+51	; 0x33
    12d0:	9c a9       	ldd	r25, Y+52	; 0x34
    12d2:	89 2b       	or	r24, r25
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <LCD_voidSendChar+0x1ca>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <LCD_voidSendChar+0x21a>
    12d8:	6f a5       	ldd	r22, Y+47	; 0x2f
    12da:	78 a9       	ldd	r23, Y+48	; 0x30
    12dc:	89 a9       	ldd	r24, Y+49	; 0x31
    12de:	9a a9       	ldd	r25, Y+50	; 0x32
    12e0:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9c ab       	std	Y+52, r25	; 0x34
    12ea:	8b ab       	std	Y+51, r24	; 0x33
    12ec:	8b a9       	ldd	r24, Y+51	; 0x33
    12ee:	9c a9       	ldd	r25, Y+52	; 0x34
    12f0:	98 af       	std	Y+56, r25	; 0x38
    12f2:	8f ab       	std	Y+55, r24	; 0x37
    12f4:	8f a9       	ldd	r24, Y+55	; 0x37
    12f6:	98 ad       	ldd	r25, Y+56	; 0x38
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <LCD_voidSendChar+0x212>
    12fc:	98 af       	std	Y+56, r25	; 0x38
    12fe:	8f ab       	std	Y+55, r24	; 0x37
    1300:	89 ad       	ldd	r24, Y+57	; 0x39
    1302:	9a ad       	ldd	r25, Y+58	; 0x3a
    1304:	fc 01       	movw	r30, r24
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	fc 01       	movw	r30, r24
    130e:	20 81       	ld	r18, Z
    1310:	89 ad       	ldd	r24, Y+57	; 0x39
    1312:	9a ad       	ldd	r25, Y+58	; 0x3a
    1314:	fc 01       	movw	r30, r24
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	fc 01       	movw	r30, r24
    131c:	80 81       	ld	r24, Z
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	62 2f       	mov	r22, r18
    1322:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 ea       	ldi	r26, 0xA0	; 160
    132c:	b1 e4       	ldi	r27, 0x41	; 65
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	af 83       	std	Y+7, r26	; 0x07
    1334:	b8 87       	std	Y+8, r27	; 0x08
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a e7       	ldi	r20, 0x7A	; 122
    133c:	55 e4       	ldi	r21, 0x45	; 69
    133e:	6d 81       	ldd	r22, Y+5	; 0x05
    1340:	7e 81       	ldd	r23, Y+6	; 0x06
    1342:	8f 81       	ldd	r24, Y+7	; 0x07
    1344:	98 85       	ldd	r25, Y+8	; 0x08
    1346:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	8d a3       	std	Y+37, r24	; 0x25
    1350:	9e a3       	std	Y+38, r25	; 0x26
    1352:	af a3       	std	Y+39, r26	; 0x27
    1354:	b8 a7       	std	Y+40, r27	; 0x28
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	6d a1       	ldd	r22, Y+37	; 0x25
    1360:	7e a1       	ldd	r23, Y+38	; 0x26
    1362:	8f a1       	ldd	r24, Y+39	; 0x27
    1364:	98 a5       	ldd	r25, Y+40	; 0x28
    1366:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    136a:	88 23       	and	r24, r24
    136c:	2c f4       	brge	.+10     	; 0x1378 <LCD_voidSendChar+0x292>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9a a7       	std	Y+42, r25	; 0x2a
    1374:	89 a7       	std	Y+41, r24	; 0x29
    1376:	3f c0       	rjmp	.+126    	; 0x13f6 <LCD_voidSendChar+0x310>
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	6d a1       	ldd	r22, Y+37	; 0x25
    1382:	7e a1       	ldd	r23, Y+38	; 0x26
    1384:	8f a1       	ldd	r24, Y+39	; 0x27
    1386:	98 a5       	ldd	r25, Y+40	; 0x28
    1388:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    138c:	18 16       	cp	r1, r24
    138e:	4c f5       	brge	.+82     	; 0x13e2 <LCD_voidSendChar+0x2fc>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	6d 81       	ldd	r22, Y+5	; 0x05
    139a:	7e 81       	ldd	r23, Y+6	; 0x06
    139c:	8f 81       	ldd	r24, Y+7	; 0x07
    139e:	98 85       	ldd	r25, Y+8	; 0x08
    13a0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9a a7       	std	Y+42, r25	; 0x2a
    13b6:	89 a7       	std	Y+41, r24	; 0x29
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <LCD_voidSendChar+0x2f2>
    13ba:	80 e9       	ldi	r24, 0x90	; 144
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	9c a7       	std	Y+44, r25	; 0x2c
    13c0:	8b a7       	std	Y+43, r24	; 0x2b
    13c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_voidSendChar+0x2e0>
    13ca:	9c a7       	std	Y+44, r25	; 0x2c
    13cc:	8b a7       	std	Y+43, r24	; 0x2b
    13ce:	89 a5       	ldd	r24, Y+41	; 0x29
    13d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	9a a7       	std	Y+42, r25	; 0x2a
    13d6:	89 a7       	std	Y+41, r24	; 0x29
    13d8:	89 a5       	ldd	r24, Y+41	; 0x29
    13da:	9a a5       	ldd	r25, Y+42	; 0x2a
    13dc:	89 2b       	or	r24, r25
    13de:	69 f7       	brne	.-38     	; 0x13ba <LCD_voidSendChar+0x2d4>
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <LCD_voidSendChar+0x324>
    13e2:	6d a1       	ldd	r22, Y+37	; 0x25
    13e4:	7e a1       	ldd	r23, Y+38	; 0x26
    13e6:	8f a1       	ldd	r24, Y+39	; 0x27
    13e8:	98 a5       	ldd	r25, Y+40	; 0x28
    13ea:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9a a7       	std	Y+42, r25	; 0x2a
    13f4:	89 a7       	std	Y+41, r24	; 0x29
    13f6:	89 a5       	ldd	r24, Y+41	; 0x29
    13f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    13fa:	9e a7       	std	Y+46, r25	; 0x2e
    13fc:	8d a7       	std	Y+45, r24	; 0x2d
    13fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1400:	9e a5       	ldd	r25, Y+46	; 0x2e
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_voidSendChar+0x31c>
    1406:	9e a7       	std	Y+46, r25	; 0x2e
    1408:	8d a7       	std	Y+45, r24	; 0x2d
    140a:	8b ad       	ldd	r24, Y+59	; 0x3b
    140c:	38 2f       	mov	r19, r24
    140e:	31 70       	andi	r19, 0x01	; 1
    1410:	89 ad       	ldd	r24, Y+57	; 0x39
    1412:	9a ad       	ldd	r25, Y+58	; 0x3a
    1414:	fc 01       	movw	r30, r24
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	05 96       	adiw	r24, 0x05	; 5
    141c:	fc 01       	movw	r30, r24
    141e:	20 81       	ld	r18, Z
    1420:	89 ad       	ldd	r24, Y+57	; 0x39
    1422:	9a ad       	ldd	r25, Y+58	; 0x3a
    1424:	fc 01       	movw	r30, r24
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	04 96       	adiw	r24, 0x04	; 4
    142c:	fc 01       	movw	r30, r24
    142e:	80 81       	ld	r24, Z
    1430:	43 2f       	mov	r20, r19
    1432:	62 2f       	mov	r22, r18
    1434:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1438:	8b ad       	ldd	r24, Y+59	; 0x3b
    143a:	86 95       	lsr	r24
    143c:	38 2f       	mov	r19, r24
    143e:	31 70       	andi	r19, 0x01	; 1
    1440:	89 ad       	ldd	r24, Y+57	; 0x39
    1442:	9a ad       	ldd	r25, Y+58	; 0x3a
    1444:	fc 01       	movw	r30, r24
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	07 96       	adiw	r24, 0x07	; 7
    144c:	fc 01       	movw	r30, r24
    144e:	20 81       	ld	r18, Z
    1450:	89 ad       	ldd	r24, Y+57	; 0x39
    1452:	9a ad       	ldd	r25, Y+58	; 0x3a
    1454:	fc 01       	movw	r30, r24
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	06 96       	adiw	r24, 0x06	; 6
    145c:	fc 01       	movw	r30, r24
    145e:	80 81       	ld	r24, Z
    1460:	43 2f       	mov	r20, r19
    1462:	62 2f       	mov	r22, r18
    1464:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1468:	8b ad       	ldd	r24, Y+59	; 0x3b
    146a:	86 95       	lsr	r24
    146c:	86 95       	lsr	r24
    146e:	38 2f       	mov	r19, r24
    1470:	31 70       	andi	r19, 0x01	; 1
    1472:	89 ad       	ldd	r24, Y+57	; 0x39
    1474:	9a ad       	ldd	r25, Y+58	; 0x3a
    1476:	fc 01       	movw	r30, r24
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	09 96       	adiw	r24, 0x09	; 9
    147e:	fc 01       	movw	r30, r24
    1480:	20 81       	ld	r18, Z
    1482:	89 ad       	ldd	r24, Y+57	; 0x39
    1484:	9a ad       	ldd	r25, Y+58	; 0x3a
    1486:	fc 01       	movw	r30, r24
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	08 96       	adiw	r24, 0x08	; 8
    148e:	fc 01       	movw	r30, r24
    1490:	80 81       	ld	r24, Z
    1492:	43 2f       	mov	r20, r19
    1494:	62 2f       	mov	r22, r18
    1496:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    149a:	8b ad       	ldd	r24, Y+59	; 0x3b
    149c:	86 95       	lsr	r24
    149e:	86 95       	lsr	r24
    14a0:	86 95       	lsr	r24
    14a2:	38 2f       	mov	r19, r24
    14a4:	31 70       	andi	r19, 0x01	; 1
    14a6:	89 ad       	ldd	r24, Y+57	; 0x39
    14a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    14aa:	fc 01       	movw	r30, r24
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0b 96       	adiw	r24, 0x0b	; 11
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 81       	ld	r18, Z
    14b6:	89 ad       	ldd	r24, Y+57	; 0x39
    14b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ba:	fc 01       	movw	r30, r24
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	0a 96       	adiw	r24, 0x0a	; 10
    14c2:	fc 01       	movw	r30, r24
    14c4:	80 81       	ld	r24, Z
    14c6:	43 2f       	mov	r20, r19
    14c8:	62 2f       	mov	r22, r18
    14ca:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    14ce:	89 ad       	ldd	r24, Y+57	; 0x39
    14d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    14d2:	fc 01       	movw	r30, r24
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	03 96       	adiw	r24, 0x03	; 3
    14da:	fc 01       	movw	r30, r24
    14dc:	20 81       	ld	r18, Z
    14de:	89 ad       	ldd	r24, Y+57	; 0x39
    14e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    14e2:	fc 01       	movw	r30, r24
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	02 96       	adiw	r24, 0x02	; 2
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	62 2f       	mov	r22, r18
    14f2:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    14f6:	89 ad       	ldd	r24, Y+57	; 0x39
    14f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    14fa:	fc 01       	movw	r30, r24
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	fc 01       	movw	r30, r24
    1504:	20 81       	ld	r18, Z
    1506:	89 ad       	ldd	r24, Y+57	; 0x39
    1508:	9a ad       	ldd	r25, Y+58	; 0x3a
    150a:	fc 01       	movw	r30, r24
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	fc 01       	movw	r30, r24
    1512:	80 81       	ld	r24, Z
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	62 2f       	mov	r22, r18
    1518:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e8       	ldi	r26, 0x80	; 128
    1522:	bf e3       	ldi	r27, 0x3F	; 63
    1524:	89 87       	std	Y+9, r24	; 0x09
    1526:	9a 87       	std	Y+10, r25	; 0x0a
    1528:	ab 87       	std	Y+11, r26	; 0x0b
    152a:	bc 87       	std	Y+12, r27	; 0x0c
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a e7       	ldi	r20, 0x7A	; 122
    1532:	55 e4       	ldi	r21, 0x45	; 69
    1534:	69 85       	ldd	r22, Y+9	; 0x09
    1536:	7a 85       	ldd	r23, Y+10	; 0x0a
    1538:	8b 85       	ldd	r24, Y+11	; 0x0b
    153a:	9c 85       	ldd	r25, Y+12	; 0x0c
    153c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8b 8f       	std	Y+27, r24	; 0x1b
    1546:	9c 8f       	std	Y+28, r25	; 0x1c
    1548:	ad 8f       	std	Y+29, r26	; 0x1d
    154a:	be 8f       	std	Y+30, r27	; 0x1e
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1556:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    155c:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <LCD_voidSendChar+0x488>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	98 a3       	std	Y+32, r25	; 0x20
    156a:	8f 8f       	std	Y+31, r24	; 0x1f
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <LCD_voidSendChar+0x506>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1578:	7c 8d       	ldd	r23, Y+28	; 0x1c
    157a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <LCD_voidSendChar+0x4f2>
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	69 85       	ldd	r22, Y+9	; 0x09
    1590:	7a 85       	ldd	r23, Y+10	; 0x0a
    1592:	8b 85       	ldd	r24, Y+11	; 0x0b
    1594:	9c 85       	ldd	r25, Y+12	; 0x0c
    1596:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <LCD_voidSendChar+0x4e8>
    15b0:	80 e9       	ldi	r24, 0x90	; 144
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	9a a3       	std	Y+34, r25	; 0x22
    15b6:	89 a3       	std	Y+33, r24	; 0x21
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	9a a1       	ldd	r25, Y+34	; 0x22
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <LCD_voidSendChar+0x4d6>
    15c0:	9a a3       	std	Y+34, r25	; 0x22
    15c2:	89 a3       	std	Y+33, r24	; 0x21
    15c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15c6:	98 a1       	ldd	r25, Y+32	; 0x20
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	98 a3       	std	Y+32, r25	; 0x20
    15cc:	8f 8f       	std	Y+31, r24	; 0x1f
    15ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15d0:	98 a1       	ldd	r25, Y+32	; 0x20
    15d2:	89 2b       	or	r24, r25
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <LCD_voidSendChar+0x4ca>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <LCD_voidSendChar+0x51a>
    15d8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    15da:	7c 8d       	ldd	r23, Y+28	; 0x1c
    15dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e0:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	98 a3       	std	Y+32, r25	; 0x20
    15ea:	8f 8f       	std	Y+31, r24	; 0x1f
    15ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ee:	98 a1       	ldd	r25, Y+32	; 0x20
    15f0:	9c a3       	std	Y+36, r25	; 0x24
    15f2:	8b a3       	std	Y+35, r24	; 0x23
    15f4:	8b a1       	ldd	r24, Y+35	; 0x23
    15f6:	9c a1       	ldd	r25, Y+36	; 0x24
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <LCD_voidSendChar+0x512>
    15fc:	9c a3       	std	Y+36, r25	; 0x24
    15fe:	8b a3       	std	Y+35, r24	; 0x23
    1600:	89 ad       	ldd	r24, Y+57	; 0x39
    1602:	9a ad       	ldd	r25, Y+58	; 0x3a
    1604:	fc 01       	movw	r30, r24
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	fc 01       	movw	r30, r24
    160e:	20 81       	ld	r18, Z
    1610:	89 ad       	ldd	r24, Y+57	; 0x39
    1612:	9a ad       	ldd	r25, Y+58	; 0x3a
    1614:	fc 01       	movw	r30, r24
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	fc 01       	movw	r30, r24
    161c:	80 81       	ld	r24, Z
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	62 2f       	mov	r22, r18
    1622:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 ea       	ldi	r26, 0xA0	; 160
    162c:	b1 e4       	ldi	r27, 0x41	; 65
    162e:	8d 87       	std	Y+13, r24	; 0x0d
    1630:	9e 87       	std	Y+14, r25	; 0x0e
    1632:	af 87       	std	Y+15, r26	; 0x0f
    1634:	b8 8b       	std	Y+16, r27	; 0x10
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	55 e4       	ldi	r21, 0x45	; 69
    163e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1640:	7e 85       	ldd	r23, Y+14	; 0x0e
    1642:	8f 85       	ldd	r24, Y+15	; 0x0f
    1644:	98 89       	ldd	r25, Y+16	; 0x10
    1646:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	89 8b       	std	Y+17, r24	; 0x11
    1650:	9a 8b       	std	Y+18, r25	; 0x12
    1652:	ab 8b       	std	Y+19, r26	; 0x13
    1654:	bc 8b       	std	Y+20, r27	; 0x14
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	69 89       	ldd	r22, Y+17	; 0x11
    1660:	7a 89       	ldd	r23, Y+18	; 0x12
    1662:	8b 89       	ldd	r24, Y+19	; 0x13
    1664:	9c 89       	ldd	r25, Y+20	; 0x14
    1666:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    166a:	88 23       	and	r24, r24
    166c:	2c f4       	brge	.+10     	; 0x1678 <LCD_voidSendChar+0x592>
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9e 8b       	std	Y+22, r25	; 0x16
    1674:	8d 8b       	std	Y+21, r24	; 0x15
    1676:	3f c0       	rjmp	.+126    	; 0x16f6 <LCD_voidSendChar+0x610>
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	69 89       	ldd	r22, Y+17	; 0x11
    1682:	7a 89       	ldd	r23, Y+18	; 0x12
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    168c:	18 16       	cp	r1, r24
    168e:	4c f5       	brge	.+82     	; 0x16e2 <LCD_voidSendChar+0x5fc>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	6d 85       	ldd	r22, Y+13	; 0x0d
    169a:	7e 85       	ldd	r23, Y+14	; 0x0e
    169c:	8f 85       	ldd	r24, Y+15	; 0x0f
    169e:	98 89       	ldd	r25, Y+16	; 0x10
    16a0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9e 8b       	std	Y+22, r25	; 0x16
    16b6:	8d 8b       	std	Y+21, r24	; 0x15
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <LCD_voidSendChar+0x5f2>
    16ba:	80 e9       	ldi	r24, 0x90	; 144
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	98 8f       	std	Y+24, r25	; 0x18
    16c0:	8f 8b       	std	Y+23, r24	; 0x17
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_voidSendChar+0x5e0>
    16ca:	98 8f       	std	Y+24, r25	; 0x18
    16cc:	8f 8b       	std	Y+23, r24	; 0x17
    16ce:	8d 89       	ldd	r24, Y+21	; 0x15
    16d0:	9e 89       	ldd	r25, Y+22	; 0x16
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	9e 8b       	std	Y+22, r25	; 0x16
    16d6:	8d 8b       	std	Y+21, r24	; 0x15
    16d8:	8d 89       	ldd	r24, Y+21	; 0x15
    16da:	9e 89       	ldd	r25, Y+22	; 0x16
    16dc:	89 2b       	or	r24, r25
    16de:	69 f7       	brne	.-38     	; 0x16ba <LCD_voidSendChar+0x5d4>
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <LCD_voidSendChar+0x624>
    16e2:	69 89       	ldd	r22, Y+17	; 0x11
    16e4:	7a 89       	ldd	r23, Y+18	; 0x12
    16e6:	8b 89       	ldd	r24, Y+19	; 0x13
    16e8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ea:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	9e 8b       	std	Y+22, r25	; 0x16
    16f4:	8d 8b       	std	Y+21, r24	; 0x15
    16f6:	8d 89       	ldd	r24, Y+21	; 0x15
    16f8:	9e 89       	ldd	r25, Y+22	; 0x16
    16fa:	9a 8f       	std	Y+26, r25	; 0x1a
    16fc:	89 8f       	std	Y+25, r24	; 0x19
    16fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <LCD_voidSendChar+0x61c>
    1706:	9a 8f       	std	Y+26, r25	; 0x1a
    1708:	89 8f       	std	Y+25, r24	; 0x19
    170a:	00 00       	nop
    170c:	eb 96       	adiw	r28, 0x3b	; 59
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <LCD_voidSendString>:
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	00 d0       	rcall	.+0      	; 0x1724 <LCD_voidSendString+0x6>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <LCD_voidSendString+0x8>
    1726:	1f 92       	push	r1
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	7d 83       	std	Y+5, r23	; 0x05
    1732:	6c 83       	std	Y+4, r22	; 0x04
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	11 c0       	rjmp	.+34     	; 0x175a <LCD_voidSendString+0x3c>
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	82 0f       	add	r24, r18
    1744:	93 1f       	adc	r25, r19
    1746:	fc 01       	movw	r30, r24
    1748:	20 81       	ld	r18, Z
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	62 2f       	mov	r22, r18
    1750:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_voidSendChar>
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	2c 81       	ldd	r18, Y+4	; 0x04
    1762:	3d 81       	ldd	r19, Y+5	; 0x05
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	fc 01       	movw	r30, r24
    176a:	80 81       	ld	r24, Z
    176c:	88 23       	and	r24, r24
    176e:	21 f7       	brne	.-56     	; 0x1738 <LCD_voidSendString+0x1a>
    1770:	00 00       	nop
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <LCD_voidGotoXY>:
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	00 d0       	rcall	.+0      	; 0x1788 <LCD_voidGotoXY+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <LCD_voidGotoXY+0x8>
    178a:	1f 92       	push	r1
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	9b 83       	std	Y+3, r25	; 0x03
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	6c 83       	std	Y+4, r22	; 0x04
    1796:	4d 83       	std	Y+5, r20	; 0x05
    1798:	19 82       	std	Y+1, r1	; 0x01
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	fc 01       	movw	r30, r24
    17a0:	90 81       	ld	r25, Z
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	89 17       	cp	r24, r25
    17a6:	c0 f4       	brcc	.+48     	; 0x17d8 <LCD_voidGotoXY+0x56>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	fc 01       	movw	r30, r24
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	89 17       	cp	r24, r25
    17b4:	88 f4       	brcc	.+34     	; 0x17d8 <LCD_voidGotoXY+0x56>
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	98 2f       	mov	r25, r24
    17ba:	92 95       	swap	r25
    17bc:	99 0f       	add	r25, r25
    17be:	99 0f       	add	r25, r25
    17c0:	90 7c       	andi	r25, 0xC0	; 192
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	89 0f       	add	r24, r25
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	80 68       	ori	r24, 0x80	; 128
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	9b 81       	ldd	r25, Y+3	; 0x03
    17d2:	69 81       	ldd	r22, Y+1	; 0x01
    17d4:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
    17d8:	00 00       	nop
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <LCD_voidClear>:
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	60 97       	sbiw	r28, 0x10	; 16
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	98 8b       	std	Y+16, r25	; 0x10
    1800:	8f 87       	std	Y+15, r24	; 0x0f
    1802:	8f 85       	ldd	r24, Y+15	; 0x0f
    1804:	98 89       	ldd	r25, Y+16	; 0x10
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e8       	ldi	r26, 0x80	; 128
    1812:	bf e3       	ldi	r27, 0x3F	; 63
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	ab 83       	std	Y+3, r26	; 0x03
    181a:	bc 83       	std	Y+4, r27	; 0x04
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a e7       	ldi	r20, 0x7A	; 122
    1822:	55 e4       	ldi	r21, 0x45	; 69
    1824:	69 81       	ldd	r22, Y+1	; 0x01
    1826:	7a 81       	ldd	r23, Y+2	; 0x02
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	af 83       	std	Y+7, r26	; 0x07
    183a:	b8 87       	std	Y+8, r27	; 0x08
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	6d 81       	ldd	r22, Y+5	; 0x05
    1846:	7e 81       	ldd	r23, Y+6	; 0x06
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	98 85       	ldd	r25, Y+8	; 0x08
    184c:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1850:	88 23       	and	r24, r24
    1852:	2c f4       	brge	.+10     	; 0x185e <LCD_voidClear+0x74>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9a 87       	std	Y+10, r25	; 0x0a
    185a:	89 87       	std	Y+9, r24	; 0x09
    185c:	3f c0       	rjmp	.+126    	; 0x18dc <LCD_voidClear+0xf2>
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	6d 81       	ldd	r22, Y+5	; 0x05
    1868:	7e 81       	ldd	r23, Y+6	; 0x06
    186a:	8f 81       	ldd	r24, Y+7	; 0x07
    186c:	98 85       	ldd	r25, Y+8	; 0x08
    186e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1872:	18 16       	cp	r1, r24
    1874:	4c f5       	brge	.+82     	; 0x18c8 <LCD_voidClear+0xde>
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	69 81       	ldd	r22, Y+1	; 0x01
    1880:	7a 81       	ldd	r23, Y+2	; 0x02
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9a 87       	std	Y+10, r25	; 0x0a
    189c:	89 87       	std	Y+9, r24	; 0x09
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_voidClear+0xd4>
    18a0:	80 e9       	ldi	r24, 0x90	; 144
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	9c 87       	std	Y+12, r25	; 0x0c
    18a6:	8b 87       	std	Y+11, r24	; 0x0b
    18a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_voidClear+0xc2>
    18b0:	9c 87       	std	Y+12, r25	; 0x0c
    18b2:	8b 87       	std	Y+11, r24	; 0x0b
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9a 87       	std	Y+10, r25	; 0x0a
    18bc:	89 87       	std	Y+9, r24	; 0x09
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	89 2b       	or	r24, r25
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_voidClear+0xb6>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <LCD_voidClear+0x106>
    18c8:	6d 81       	ldd	r22, Y+5	; 0x05
    18ca:	7e 81       	ldd	r23, Y+6	; 0x06
    18cc:	8f 81       	ldd	r24, Y+7	; 0x07
    18ce:	98 85       	ldd	r25, Y+8	; 0x08
    18d0:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9a 87       	std	Y+10, r25	; 0x0a
    18da:	89 87       	std	Y+9, r24	; 0x09
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	9e 87       	std	Y+14, r25	; 0x0e
    18e2:	8d 87       	std	Y+13, r24	; 0x0d
    18e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_voidClear+0xfe>
    18ec:	9e 87       	std	Y+14, r25	; 0x0e
    18ee:	8d 87       	std	Y+13, r24	; 0x0d
    18f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f2:	98 89       	ldd	r25, Y+16	; 0x10
    18f4:	60 e8       	ldi	r22, 0x80	; 128
    18f6:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidWriteCmd>
    18fa:	00 00       	nop
    18fc:	60 96       	adiw	r28, 0x10	; 16
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <LCD_voidWriteCmd>:
/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	eb 97       	sbiw	r28, 0x3b	; 59
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	9a af       	std	Y+58, r25	; 0x3a
    1924:	89 af       	std	Y+57, r24	; 0x39
    1926:	6b af       	std	Y+59, r22	; 0x3b
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
    1928:	8b ad       	ldd	r24, Y+59	; 0x3b
    192a:	82 95       	swap	r24
    192c:	8f 70       	andi	r24, 0x0F	; 15
    192e:	38 2f       	mov	r19, r24
    1930:	31 70       	andi	r19, 0x01	; 1
    1932:	89 ad       	ldd	r24, Y+57	; 0x39
    1934:	9a ad       	ldd	r25, Y+58	; 0x3a
    1936:	fc 01       	movw	r30, r24
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	05 96       	adiw	r24, 0x05	; 5
    193e:	fc 01       	movw	r30, r24
    1940:	20 81       	ld	r18, Z
    1942:	89 ad       	ldd	r24, Y+57	; 0x39
    1944:	9a ad       	ldd	r25, Y+58	; 0x3a
    1946:	fc 01       	movw	r30, r24
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	04 96       	adiw	r24, 0x04	; 4
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	43 2f       	mov	r20, r19
    1954:	62 2f       	mov	r22, r18
    1956:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
    195a:	8b ad       	ldd	r24, Y+59	; 0x3b
    195c:	82 95       	swap	r24
    195e:	86 95       	lsr	r24
    1960:	87 70       	andi	r24, 0x07	; 7
    1962:	38 2f       	mov	r19, r24
    1964:	31 70       	andi	r19, 0x01	; 1
    1966:	89 ad       	ldd	r24, Y+57	; 0x39
    1968:	9a ad       	ldd	r25, Y+58	; 0x3a
    196a:	fc 01       	movw	r30, r24
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	07 96       	adiw	r24, 0x07	; 7
    1972:	fc 01       	movw	r30, r24
    1974:	20 81       	ld	r18, Z
    1976:	89 ad       	ldd	r24, Y+57	; 0x39
    1978:	9a ad       	ldd	r25, Y+58	; 0x3a
    197a:	fc 01       	movw	r30, r24
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	06 96       	adiw	r24, 0x06	; 6
    1982:	fc 01       	movw	r30, r24
    1984:	80 81       	ld	r24, Z
    1986:	43 2f       	mov	r20, r19
    1988:	62 2f       	mov	r22, r18
    198a:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
    198e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1990:	82 95       	swap	r24
    1992:	86 95       	lsr	r24
    1994:	86 95       	lsr	r24
    1996:	83 70       	andi	r24, 0x03	; 3
    1998:	38 2f       	mov	r19, r24
    199a:	31 70       	andi	r19, 0x01	; 1
    199c:	89 ad       	ldd	r24, Y+57	; 0x39
    199e:	9a ad       	ldd	r25, Y+58	; 0x3a
    19a0:	fc 01       	movw	r30, r24
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	09 96       	adiw	r24, 0x09	; 9
    19a8:	fc 01       	movw	r30, r24
    19aa:	20 81       	ld	r18, Z
    19ac:	89 ad       	ldd	r24, Y+57	; 0x39
    19ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    19b0:	fc 01       	movw	r30, r24
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	08 96       	adiw	r24, 0x08	; 8
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	43 2f       	mov	r20, r19
    19be:	62 2f       	mov	r22, r18
    19c0:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
    19c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    19c6:	38 2f       	mov	r19, r24
    19c8:	33 1f       	adc	r19, r19
    19ca:	33 27       	eor	r19, r19
    19cc:	33 1f       	adc	r19, r19
    19ce:	89 ad       	ldd	r24, Y+57	; 0x39
    19d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d2:	fc 01       	movw	r30, r24
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	0b 96       	adiw	r24, 0x0b	; 11
    19da:	fc 01       	movw	r30, r24
    19dc:	20 81       	ld	r18, Z
    19de:	89 ad       	ldd	r24, Y+57	; 0x39
    19e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    19e2:	fc 01       	movw	r30, r24
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	0a 96       	adiw	r24, 0x0a	; 10
    19ea:	fc 01       	movw	r30, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	43 2f       	mov	r20, r19
    19f0:	62 2f       	mov	r22, r18
    19f2:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
    19f6:	89 ad       	ldd	r24, Y+57	; 0x39
    19f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19fa:	fc 01       	movw	r30, r24
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	03 96       	adiw	r24, 0x03	; 3
    1a02:	fc 01       	movw	r30, r24
    1a04:	20 81       	ld	r18, Z
    1a06:	89 ad       	ldd	r24, Y+57	; 0x39
    1a08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	02 96       	adiw	r24, 0x02	; 2
    1a12:	fc 01       	movw	r30, r24
    1a14:	80 81       	ld	r24, Z
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	62 2f       	mov	r22, r18
    1a1a:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
    1a1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a22:	fc 01       	movw	r30, r24
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 81       	ld	r18, Z
    1a2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a32:	fc 01       	movw	r30, r24
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	fc 01       	movw	r30, r24
    1a3a:	80 81       	ld	r24, Z
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	62 2f       	mov	r22, r18
    1a40:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e8       	ldi	r26, 0x80	; 128
    1a4a:	bf e3       	ldi	r27, 0x3F	; 63
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	ab 83       	std	Y+3, r26	; 0x03
    1a52:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4a e7       	ldi	r20, 0x7A	; 122
    1a5a:	55 e4       	ldi	r21, 0x45	; 69
    1a5c:	69 81       	ldd	r22, Y+1	; 0x01
    1a5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	a9 ab       	std	Y+49, r26	; 0x31
    1a72:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e8       	ldi	r20, 0x80	; 128
    1a7a:	5f e3       	ldi	r21, 0x3F	; 63
    1a7c:	6f a5       	ldd	r22, Y+47	; 0x2f
    1a7e:	78 a9       	ldd	r23, Y+48	; 0x30
    1a80:	89 a9       	ldd	r24, Y+49	; 0x31
    1a82:	9a a9       	ldd	r25, Y+50	; 0x32
    1a84:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c ab       	std	Y+52, r25	; 0x34
    1a92:	8b ab       	std	Y+51, r24	; 0x33
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1aa0:	78 a9       	ldd	r23, Y+48	; 0x30
    1aa2:	89 a9       	ldd	r24, Y+49	; 0x31
    1aa4:	9a a9       	ldd	r25, Y+50	; 0x32
    1aa6:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	69 81       	ldd	r22, Y+1	; 0x01
    1ab8:	7a 81       	ldd	r23, Y+2	; 0x02
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9c ab       	std	Y+52, r25	; 0x34
    1ad4:	8b ab       	std	Y+51, r24	; 0x33
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <LCD_voidWriteCmd+0x1e8>
    1ad8:	80 e9       	ldi	r24, 0x90	; 144
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9e ab       	std	Y+54, r25	; 0x36
    1ade:	8d ab       	std	Y+53, r24	; 0x35
    1ae0:	8d a9       	ldd	r24, Y+53	; 0x35
    1ae2:	9e a9       	ldd	r25, Y+54	; 0x36
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_voidWriteCmd+0x1d6>
    1ae8:	9e ab       	std	Y+54, r25	; 0x36
    1aea:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8b a9       	ldd	r24, Y+51	; 0x33
    1aee:	9c a9       	ldd	r25, Y+52	; 0x34
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9c ab       	std	Y+52, r25	; 0x34
    1af4:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8b a9       	ldd	r24, Y+51	; 0x33
    1af8:	9c a9       	ldd	r25, Y+52	; 0x34
    1afa:	89 2b       	or	r24, r25
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <LCD_voidWriteCmd+0x1ca>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b02:	78 a9       	ldd	r23, Y+48	; 0x30
    1b04:	89 a9       	ldd	r24, Y+49	; 0x31
    1b06:	9a a9       	ldd	r25, Y+50	; 0x32
    1b08:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9c ab       	std	Y+52, r25	; 0x34
    1b12:	8b ab       	std	Y+51, r24	; 0x33
    1b14:	8b a9       	ldd	r24, Y+51	; 0x33
    1b16:	9c a9       	ldd	r25, Y+52	; 0x34
    1b18:	98 af       	std	Y+56, r25	; 0x38
    1b1a:	8f ab       	std	Y+55, r24	; 0x37
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_voidWriteCmd+0x212>
    1b24:	98 af       	std	Y+56, r25	; 0x38
    1b26:	8f ab       	std	Y+55, r24	; 0x37
    1b28:	89 ad       	ldd	r24, Y+57	; 0x39
    1b2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 81       	ld	r18, Z
    1b38:	89 ad       	ldd	r24, Y+57	; 0x39
    1b3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	fc 01       	movw	r30, r24
    1b44:	80 81       	ld	r24, Z
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	62 2f       	mov	r22, r18
    1b4a:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 ea       	ldi	r26, 0xA0	; 160
    1b54:	b1 e4       	ldi	r27, 0x41	; 65
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	af 83       	std	Y+7, r26	; 0x07
    1b5c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	55 e4       	ldi	r21, 0x45	; 69
    1b66:	6d 81       	ldd	r22, Y+5	; 0x05
    1b68:	7e 81       	ldd	r23, Y+6	; 0x06
    1b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6c:	98 85       	ldd	r25, Y+8	; 0x08
    1b6e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8d a3       	std	Y+37, r24	; 0x25
    1b78:	9e a3       	std	Y+38, r25	; 0x26
    1b7a:	af a3       	std	Y+39, r26	; 0x27
    1b7c:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f e3       	ldi	r21, 0x3F	; 63
    1b86:	6d a1       	ldd	r22, Y+37	; 0x25
    1b88:	7e a1       	ldd	r23, Y+38	; 0x26
    1b8a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b8c:	98 a5       	ldd	r25, Y+40	; 0x28
    1b8e:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_voidWriteCmd+0x292>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9a a7       	std	Y+42, r25	; 0x2a
    1b9c:	89 a7       	std	Y+41, r24	; 0x29
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_voidWriteCmd+0x310>
	else if (__tmp > 65535)
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	57 e4       	ldi	r21, 0x47	; 71
    1ba8:	6d a1       	ldd	r22, Y+37	; 0x25
    1baa:	7e a1       	ldd	r23, Y+38	; 0x26
    1bac:	8f a1       	ldd	r24, Y+39	; 0x27
    1bae:	98 a5       	ldd	r25, Y+40	; 0x28
    1bb0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_voidWriteCmd+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e2       	ldi	r20, 0x20	; 32
    1bbe:	51 e4       	ldi	r21, 0x41	; 65
    1bc0:	6d 81       	ldd	r22, Y+5	; 0x05
    1bc2:	7e 81       	ldd	r23, Y+6	; 0x06
    1bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc6:	98 85       	ldd	r25, Y+8	; 0x08
    1bc8:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9a a7       	std	Y+42, r25	; 0x2a
    1bde:	89 a7       	std	Y+41, r24	; 0x29
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_voidWriteCmd+0x2f2>
    1be2:	80 e9       	ldi	r24, 0x90	; 144
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	9c a7       	std	Y+44, r25	; 0x2c
    1be8:	8b a7       	std	Y+43, r24	; 0x2b
    1bea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bec:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_voidWriteCmd+0x2e0>
    1bf2:	9c a7       	std	Y+44, r25	; 0x2c
    1bf4:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9a a7       	std	Y+42, r25	; 0x2a
    1bfe:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	89 a5       	ldd	r24, Y+41	; 0x29
    1c02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c04:	89 2b       	or	r24, r25
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_voidWriteCmd+0x2d4>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_voidWriteCmd+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6d a1       	ldd	r22, Y+37	; 0x25
    1c0c:	7e a1       	ldd	r23, Y+38	; 0x26
    1c0e:	8f a1       	ldd	r24, Y+39	; 0x27
    1c10:	98 a5       	ldd	r25, Y+40	; 0x28
    1c12:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9a a7       	std	Y+42, r25	; 0x2a
    1c1c:	89 a7       	std	Y+41, r24	; 0x29
    1c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c22:	9e a7       	std	Y+46, r25	; 0x2e
    1c24:	8d a7       	std	Y+45, r24	; 0x2d
    1c26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_voidWriteCmd+0x31c>
    1c2e:	9e a7       	std	Y+46, r25	; 0x2e
    1c30:	8d a7       	std	Y+45, r24	; 0x2d
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
    1c32:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c34:	38 2f       	mov	r19, r24
    1c36:	31 70       	andi	r19, 0x01	; 1
    1c38:	89 ad       	ldd	r24, Y+57	; 0x39
    1c3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	05 96       	adiw	r24, 0x05	; 5
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 81       	ld	r18, Z
    1c48:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	04 96       	adiw	r24, 0x04	; 4
    1c54:	fc 01       	movw	r30, r24
    1c56:	80 81       	ld	r24, Z
    1c58:	43 2f       	mov	r20, r19
    1c5a:	62 2f       	mov	r22, r18
    1c5c:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
    1c60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c62:	86 95       	lsr	r24
    1c64:	38 2f       	mov	r19, r24
    1c66:	31 70       	andi	r19, 0x01	; 1
    1c68:	89 ad       	ldd	r24, Y+57	; 0x39
    1c6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	07 96       	adiw	r24, 0x07	; 7
    1c74:	fc 01       	movw	r30, r24
    1c76:	20 81       	ld	r18, Z
    1c78:	89 ad       	ldd	r24, Y+57	; 0x39
    1c7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	06 96       	adiw	r24, 0x06	; 6
    1c84:	fc 01       	movw	r30, r24
    1c86:	80 81       	ld	r24, Z
    1c88:	43 2f       	mov	r20, r19
    1c8a:	62 2f       	mov	r22, r18
    1c8c:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
    1c90:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c92:	86 95       	lsr	r24
    1c94:	86 95       	lsr	r24
    1c96:	38 2f       	mov	r19, r24
    1c98:	31 70       	andi	r19, 0x01	; 1
    1c9a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	09 96       	adiw	r24, 0x09	; 9
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	20 81       	ld	r18, Z
    1caa:	89 ad       	ldd	r24, Y+57	; 0x39
    1cac:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cae:	fc 01       	movw	r30, r24
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	08 96       	adiw	r24, 0x08	; 8
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	80 81       	ld	r24, Z
    1cba:	43 2f       	mov	r20, r19
    1cbc:	62 2f       	mov	r22, r18
    1cbe:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
    1cc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cc4:	86 95       	lsr	r24
    1cc6:	86 95       	lsr	r24
    1cc8:	86 95       	lsr	r24
    1cca:	38 2f       	mov	r19, r24
    1ccc:	31 70       	andi	r19, 0x01	; 1
    1cce:	89 ad       	ldd	r24, Y+57	; 0x39
    1cd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	0b 96       	adiw	r24, 0x0b	; 11
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 81       	ld	r18, Z
    1cde:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0a 96       	adiw	r24, 0x0a	; 10
    1cea:	fc 01       	movw	r30, r24
    1cec:	80 81       	ld	r24, Z
    1cee:	43 2f       	mov	r20, r19
    1cf0:	62 2f       	mov	r22, r18
    1cf2:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
    1cf6:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	03 96       	adiw	r24, 0x03	; 3
    1d02:	fc 01       	movw	r30, r24
    1d04:	20 81       	ld	r18, Z
    1d06:	89 ad       	ldd	r24, Y+57	; 0x39
    1d08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	02 96       	adiw	r24, 0x02	; 2
    1d12:	fc 01       	movw	r30, r24
    1d14:	80 81       	ld	r24, Z
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	62 2f       	mov	r22, r18
    1d1a:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
    1d1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d22:	fc 01       	movw	r30, r24
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	20 81       	ld	r18, Z
    1d2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d32:	fc 01       	movw	r30, r24
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	fc 01       	movw	r30, r24
    1d3a:	80 81       	ld	r24, Z
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	62 2f       	mov	r22, r18
    1d40:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	89 87       	std	Y+9, r24	; 0x09
    1d4e:	9a 87       	std	Y+10, r25	; 0x0a
    1d50:	ab 87       	std	Y+11, r26	; 0x0b
    1d52:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	55 e4       	ldi	r21, 0x45	; 69
    1d5c:	69 85       	ldd	r22, Y+9	; 0x09
    1d5e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d62:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d64:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8b 8f       	std	Y+27, r24	; 0x1b
    1d6e:	9c 8f       	std	Y+28, r25	; 0x1c
    1d70:	ad 8f       	std	Y+29, r26	; 0x1d
    1d72:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d7e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d84:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_voidWriteCmd+0x488>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	98 a3       	std	Y+32, r25	; 0x20
    1d92:	8f 8f       	std	Y+31, r24	; 0x1f
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_voidWriteCmd+0x506>
	else if (__tmp > 65535)
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1da0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1da2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da6:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_voidWriteCmd+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	69 85       	ldd	r22, Y+9	; 0x09
    1db8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dbe:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	98 a3       	std	Y+32, r25	; 0x20
    1dd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_voidWriteCmd+0x4e8>
    1dd8:	80 e9       	ldi	r24, 0x90	; 144
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	9a a3       	std	Y+34, r25	; 0x22
    1dde:	89 a3       	std	Y+33, r24	; 0x21
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_voidWriteCmd+0x4d6>
    1de8:	9a a3       	std	Y+34, r25	; 0x22
    1dea:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dee:	98 a1       	ldd	r25, Y+32	; 0x20
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	98 a3       	std	Y+32, r25	; 0x20
    1df4:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df8:	98 a1       	ldd	r25, Y+32	; 0x20
    1dfa:	89 2b       	or	r24, r25
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_voidWriteCmd+0x4ca>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_voidWriteCmd+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e08:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	98 a3       	std	Y+32, r25	; 0x20
    1e12:	8f 8f       	std	Y+31, r24	; 0x1f
    1e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e16:	98 a1       	ldd	r25, Y+32	; 0x20
    1e18:	9c a3       	std	Y+36, r25	; 0x24
    1e1a:	8b a3       	std	Y+35, r24	; 0x23
    1e1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1e1e:	9c a1       	ldd	r25, Y+36	; 0x24
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_voidWriteCmd+0x512>
    1e24:	9c a3       	std	Y+36, r25	; 0x24
    1e26:	8b a3       	std	Y+35, r24	; 0x23
    1e28:	89 ad       	ldd	r24, Y+57	; 0x39
    1e2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 81       	ld	r18, Z
    1e38:	89 ad       	ldd	r24, Y+57	; 0x39
    1e3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	fc 01       	movw	r30, r24
    1e44:	80 81       	ld	r24, Z
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	62 2f       	mov	r22, r18
    1e4a:	0e 94 ed 11 	call	0x23da	; 0x23da <GPIO_voidSetPinValue>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 ea       	ldi	r26, 0xA0	; 160
    1e54:	b1 e4       	ldi	r27, 0x41	; 65
    1e56:	8d 87       	std	Y+13, r24	; 0x0d
    1e58:	9e 87       	std	Y+14, r25	; 0x0e
    1e5a:	af 87       	std	Y+15, r26	; 0x0f
    1e5c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	55 e4       	ldi	r21, 0x45	; 69
    1e66:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e68:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6c:	98 89       	ldd	r25, Y+16	; 0x10
    1e6e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	89 8b       	std	Y+17, r24	; 0x11
    1e78:	9a 8b       	std	Y+18, r25	; 0x12
    1e7a:	ab 8b       	std	Y+19, r26	; 0x13
    1e7c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	69 89       	ldd	r22, Y+17	; 0x11
    1e88:	7a 89       	ldd	r23, Y+18	; 0x12
    1e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8e:	0e 94 ac 14 	call	0x2958	; 0x2958 <__cmpsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_voidWriteCmd+0x592>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9e 8b       	std	Y+22, r25	; 0x16
    1e9c:	8d 8b       	std	Y+21, r24	; 0x15
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <LCD_voidWriteCmd+0x610>
	else if (__tmp > 65535)
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	69 89       	ldd	r22, Y+17	; 0x11
    1eaa:	7a 89       	ldd	r23, Y+18	; 0x12
    1eac:	8b 89       	ldd	r24, Y+19	; 0x13
    1eae:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__gesf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <LCD_voidWriteCmd+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ec2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec6:	98 89       	ldd	r25, Y+16	; 0x10
    1ec8:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 8b       	std	Y+22, r25	; 0x16
    1ede:	8d 8b       	std	Y+21, r24	; 0x15
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <LCD_voidWriteCmd+0x5f2>
    1ee2:	80 e9       	ldi	r24, 0x90	; 144
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	98 8f       	std	Y+24, r25	; 0x18
    1ee8:	8f 8b       	std	Y+23, r24	; 0x17
    1eea:	8f 89       	ldd	r24, Y+23	; 0x17
    1eec:	98 8d       	ldd	r25, Y+24	; 0x18
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_voidWriteCmd+0x5e0>
    1ef2:	98 8f       	std	Y+24, r25	; 0x18
    1ef4:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef8:	9e 89       	ldd	r25, Y+22	; 0x16
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9e 8b       	std	Y+22, r25	; 0x16
    1efe:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8d 89       	ldd	r24, Y+21	; 0x15
    1f02:	9e 89       	ldd	r25, Y+22	; 0x16
    1f04:	89 2b       	or	r24, r25
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <LCD_voidWriteCmd+0x5d4>

#endif
}
    1f08:	14 c0       	rjmp	.+40     	; 0x1f32 <LCD_voidWriteCmd+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	69 89       	ldd	r22, Y+17	; 0x11
    1f0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f10:	9c 89       	ldd	r25, Y+20	; 0x14
    1f12:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9e 8b       	std	Y+22, r25	; 0x16
    1f1c:	8d 8b       	std	Y+21, r24	; 0x15
    1f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	9a 8f       	std	Y+26, r25	; 0x1a
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	89 8d       	ldd	r24, Y+25	; 0x19
    1f28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_voidWriteCmd+0x61c>
    1f2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f30:	89 8f       	std	Y+25, r24	; 0x19
    1f32:	00 00       	nop
    1f34:	eb 96       	adiw	r28, 0x3b	; 59
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <main>:
#include "APP/Calculator.h"

int main(void)
{
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	APP_voidCalculatorSetup();
    1f4e:	0e 94 4d 03 	call	0x69a	; 0x69a <APP_voidCalculatorSetup>
    while(1)
    {
		APP_voidCalculatorStrat(); 
    1f52:	0e 94 0b 04 	call	0x816	; 0x816 <APP_voidCalculatorStrat>
    }
    1f56:	fd cf       	rjmp	.-6      	; 0x1f52 <main+0xc>

00001f58 <GPIO_voidInit>:
#include "GPIO_interface.h"
#include "GPIO_private.h"
#include "GPIO_config.h"

void GPIO_voidInit()
{
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
	GPIO_PORTA = CLR ;
    1f60:	8b e3       	ldi	r24, 0x3B	; 59
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	fc 01       	movw	r30, r24
    1f66:	10 82       	st	Z, r1
	GPIO_DDRA = CLR ;
    1f68:	8a e3       	ldi	r24, 0x3A	; 58
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	10 82       	st	Z, r1
	GPIO_PINA = CLR ;
    1f70:	89 e3       	ldi	r24, 0x39	; 57
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	fc 01       	movw	r30, r24
    1f76:	10 82       	st	Z, r1
	GPIO_PORTB = CLR ;
    1f78:	88 e3       	ldi	r24, 0x38	; 56
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	10 82       	st	Z, r1
	GPIO_DDRB = CLR ;
    1f80:	87 e3       	ldi	r24, 0x37	; 55
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	fc 01       	movw	r30, r24
    1f86:	10 82       	st	Z, r1
	GPIO_PINB= CLR ;
    1f88:	86 e3       	ldi	r24, 0x36	; 54
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	10 82       	st	Z, r1
	GPIO_PORTC = CLR ;
    1f90:	85 e3       	ldi	r24, 0x35	; 53
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	fc 01       	movw	r30, r24
    1f96:	10 82       	st	Z, r1
	GPIO_DDRC= CLR ;
    1f98:	84 e3       	ldi	r24, 0x34	; 52
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	10 82       	st	Z, r1
	GPIO_PINC = CLR ;
    1fa0:	83 e3       	ldi	r24, 0x33	; 51
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	10 82       	st	Z, r1
	GPIO_PORTD = CLR ;
    1fa8:	82 e3       	ldi	r24, 0x32	; 50
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	fc 01       	movw	r30, r24
    1fae:	10 82       	st	Z, r1
	GPIO_DDRD = CLR ;
    1fb0:	81 e3       	ldi	r24, 0x31	; 49
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	10 82       	st	Z, r1
	GPIO_PIND = CLR ;
    1fb8:	80 e3       	ldi	r24, 0x30	; 48
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	10 82       	st	Z, r1
	
}
    1fc0:	00 00       	nop
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <GPIO_voidSetPinDirection>:

void GPIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8PinDirection)
{
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <GPIO_voidSetPinDirection+0x6>
    1fce:	1f 92       	push	r1
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	6a 83       	std	Y+2, r22	; 0x02
    1fd8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	88 30       	cpi	r24, 0x08	; 8
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <GPIO_voidSetPinDirection+0x1a>
    1fe0:	f5 c1       	rjmp	.+1002   	; 0x23cc <GPIO_voidSetPinDirection+0x404>
	{
		switch(copy_u8PortId)
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <GPIO_voidSetPinDirection+0x28>
    1fee:	86 c0       	rjmp	.+268    	; 0x20fc <GPIO_voidSetPinDirection+0x134>
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	1c f4       	brge	.+6      	; 0x1ffc <GPIO_voidSetPinDirection+0x34>
    1ff6:	89 2b       	or	r24, r25
    1ff8:	49 f0       	breq	.+18     	; 0x200c <GPIO_voidSetPinDirection+0x44>
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
    1ffa:	e8 c1       	rjmp	.+976    	; 0x23cc <GPIO_voidSetPinDirection+0x404>

void GPIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8PinDirection)
{
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	91 05       	cpc	r25, r1
    2000:	09 f4       	brne	.+2      	; 0x2004 <GPIO_voidSetPinDirection+0x3c>
    2002:	f4 c0       	rjmp	.+488    	; 0x21ec <GPIO_voidSetPinDirection+0x224>
    2004:	03 97       	sbiw	r24, 0x03	; 3
    2006:	09 f4       	brne	.+2      	; 0x200a <GPIO_voidSetPinDirection+0x42>
    2008:	69 c1       	rjmp	.+722    	; 0x22dc <GPIO_voidSetPinDirection+0x314>
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
    200a:	e0 c1       	rjmp	.+960    	; 0x23cc <GPIO_voidSetPinDirection+0x404>
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
		{
			case PORTA :
				switch(copy_u8PinDirection)
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	91 05       	cpc	r25, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <GPIO_voidSetPinDirection+0x52>
    2018:	5b c0       	rjmp	.+182    	; 0x20d0 <GPIO_voidSetPinDirection+0x108>
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	91 05       	cpc	r25, r1
    201e:	71 f1       	breq	.+92     	; 0x207c <GPIO_voidSetPinDirection+0xb4>
    2020:	89 2b       	or	r24, r25
    2022:	09 f0       	breq	.+2      	; 0x2026 <GPIO_voidSetPinDirection+0x5e>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRA,copy_u8PinNumber);
						break;
					default:	break ;
    2024:	6a c0       	rjmp	.+212    	; 0x20fa <GPIO_voidSetPinDirection+0x132>
			case PORTA :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRA,copy_u8PinNumber);
    2026:	8a e3       	ldi	r24, 0x3A	; 58
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	2a e3       	ldi	r18, 0x3A	; 58
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	f9 01       	movw	r30, r18
    2030:	20 81       	ld	r18, Z
    2032:	62 2f       	mov	r22, r18
    2034:	2a 81       	ldd	r18, Y+2	; 0x02
    2036:	42 2f       	mov	r20, r18
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	21 e0       	ldi	r18, 0x01	; 1
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <GPIO_voidSetPinDirection+0x7c>
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	4a 95       	dec	r20
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <GPIO_voidSetPinDirection+0x78>
    2048:	20 95       	com	r18
    204a:	26 23       	and	r18, r22
    204c:	fc 01       	movw	r30, r24
    204e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
    2050:	8b e3       	ldi	r24, 0x3B	; 59
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	2b e3       	ldi	r18, 0x3B	; 59
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	f9 01       	movw	r30, r18
    205a:	20 81       	ld	r18, Z
    205c:	62 2f       	mov	r22, r18
    205e:	2a 81       	ldd	r18, Y+2	; 0x02
    2060:	42 2f       	mov	r20, r18
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	21 e0       	ldi	r18, 0x01	; 1
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	02 c0       	rjmp	.+4      	; 0x206e <GPIO_voidSetPinDirection+0xa6>
    206a:	22 0f       	add	r18, r18
    206c:	33 1f       	adc	r19, r19
    206e:	4a 95       	dec	r20
    2070:	e2 f7       	brpl	.-8      	; 0x206a <GPIO_voidSetPinDirection+0xa2>
    2072:	20 95       	com	r18
    2074:	26 23       	and	r18, r22
    2076:	fc 01       	movw	r30, r24
    2078:	20 83       	st	Z, r18
						break;
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <GPIO_voidSetPinDirection+0x132>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRA,copy_u8PinNumber);
    207c:	8a e3       	ldi	r24, 0x3A	; 58
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	2a e3       	ldi	r18, 0x3A	; 58
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	f9 01       	movw	r30, r18
    2086:	20 81       	ld	r18, Z
    2088:	62 2f       	mov	r22, r18
    208a:	2a 81       	ldd	r18, Y+2	; 0x02
    208c:	42 2f       	mov	r20, r18
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <GPIO_voidSetPinDirection+0xd2>
    2096:	22 0f       	add	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	4a 95       	dec	r20
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <GPIO_voidSetPinDirection+0xce>
    209e:	20 95       	com	r18
    20a0:	26 23       	and	r18, r22
    20a2:	fc 01       	movw	r30, r24
    20a4:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTA,copy_u8PinNumber);
    20a6:	8b e3       	ldi	r24, 0x3B	; 59
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	2b e3       	ldi	r18, 0x3B	; 59
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	f9 01       	movw	r30, r18
    20b0:	20 81       	ld	r18, Z
    20b2:	62 2f       	mov	r22, r18
    20b4:	2a 81       	ldd	r18, Y+2	; 0x02
    20b6:	42 2f       	mov	r20, r18
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	21 e0       	ldi	r18, 0x01	; 1
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <GPIO_voidSetPinDirection+0xfc>
    20c0:	22 0f       	add	r18, r18
    20c2:	33 1f       	adc	r19, r19
    20c4:	4a 95       	dec	r20
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <GPIO_voidSetPinDirection+0xf8>
    20c8:	26 2b       	or	r18, r22
    20ca:	fc 01       	movw	r30, r24
    20cc:	20 83       	st	Z, r18
						break;
    20ce:	15 c0       	rjmp	.+42     	; 0x20fa <GPIO_voidSetPinDirection+0x132>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRA,copy_u8PinNumber);
    20d0:	8a e3       	ldi	r24, 0x3A	; 58
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	2a e3       	ldi	r18, 0x3A	; 58
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	f9 01       	movw	r30, r18
    20da:	20 81       	ld	r18, Z
    20dc:	62 2f       	mov	r22, r18
    20de:	2a 81       	ldd	r18, Y+2	; 0x02
    20e0:	42 2f       	mov	r20, r18
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	21 e0       	ldi	r18, 0x01	; 1
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <GPIO_voidSetPinDirection+0x126>
    20ea:	22 0f       	add	r18, r18
    20ec:	33 1f       	adc	r19, r19
    20ee:	4a 95       	dec	r20
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <GPIO_voidSetPinDirection+0x122>
    20f2:	26 2b       	or	r18, r22
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 83       	st	Z, r18
						break;
    20f8:	00 00       	nop
					default:	break ;
				}
				break ;
    20fa:	68 c1       	rjmp	.+720    	; 0x23cc <GPIO_voidSetPinDirection+0x404>
			case PORTB :
				switch(copy_u8PinDirection)
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	91 05       	cpc	r25, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <GPIO_voidSetPinDirection+0x142>
    2108:	5b c0       	rjmp	.+182    	; 0x21c0 <GPIO_voidSetPinDirection+0x1f8>
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	91 05       	cpc	r25, r1
    210e:	71 f1       	breq	.+92     	; 0x216c <GPIO_voidSetPinDirection+0x1a4>
    2110:	89 2b       	or	r24, r25
    2112:	09 f0       	breq	.+2      	; 0x2116 <GPIO_voidSetPinDirection+0x14e>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRB,copy_u8PinNumber);
						break;
					default:	break ;
    2114:	6a c0       	rjmp	.+212    	; 0x21ea <GPIO_voidSetPinDirection+0x222>
			case PORTB :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRB,copy_u8PinNumber);
    2116:	87 e3       	ldi	r24, 0x37	; 55
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	27 e3       	ldi	r18, 0x37	; 55
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	f9 01       	movw	r30, r18
    2120:	20 81       	ld	r18, Z
    2122:	62 2f       	mov	r22, r18
    2124:	2a 81       	ldd	r18, Y+2	; 0x02
    2126:	42 2f       	mov	r20, r18
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <GPIO_voidSetPinDirection+0x16c>
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	4a 95       	dec	r20
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <GPIO_voidSetPinDirection+0x168>
    2138:	20 95       	com	r18
    213a:	26 23       	and	r18, r22
    213c:	fc 01       	movw	r30, r24
    213e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
    2140:	88 e3       	ldi	r24, 0x38	; 56
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	28 e3       	ldi	r18, 0x38	; 56
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	f9 01       	movw	r30, r18
    214a:	20 81       	ld	r18, Z
    214c:	62 2f       	mov	r22, r18
    214e:	2a 81       	ldd	r18, Y+2	; 0x02
    2150:	42 2f       	mov	r20, r18
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	02 c0       	rjmp	.+4      	; 0x215e <GPIO_voidSetPinDirection+0x196>
    215a:	22 0f       	add	r18, r18
    215c:	33 1f       	adc	r19, r19
    215e:	4a 95       	dec	r20
    2160:	e2 f7       	brpl	.-8      	; 0x215a <GPIO_voidSetPinDirection+0x192>
    2162:	20 95       	com	r18
    2164:	26 23       	and	r18, r22
    2166:	fc 01       	movw	r30, r24
    2168:	20 83       	st	Z, r18
						break;
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <GPIO_voidSetPinDirection+0x222>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRB,copy_u8PinNumber);
    216c:	87 e3       	ldi	r24, 0x37	; 55
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	27 e3       	ldi	r18, 0x37	; 55
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	f9 01       	movw	r30, r18
    2176:	20 81       	ld	r18, Z
    2178:	62 2f       	mov	r22, r18
    217a:	2a 81       	ldd	r18, Y+2	; 0x02
    217c:	42 2f       	mov	r20, r18
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	21 e0       	ldi	r18, 0x01	; 1
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	02 c0       	rjmp	.+4      	; 0x218a <GPIO_voidSetPinDirection+0x1c2>
    2186:	22 0f       	add	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	4a 95       	dec	r20
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <GPIO_voidSetPinDirection+0x1be>
    218e:	20 95       	com	r18
    2190:	26 23       	and	r18, r22
    2192:	fc 01       	movw	r30, r24
    2194:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTB,copy_u8PinNumber);
    2196:	88 e3       	ldi	r24, 0x38	; 56
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	28 e3       	ldi	r18, 0x38	; 56
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	f9 01       	movw	r30, r18
    21a0:	20 81       	ld	r18, Z
    21a2:	62 2f       	mov	r22, r18
    21a4:	2a 81       	ldd	r18, Y+2	; 0x02
    21a6:	42 2f       	mov	r20, r18
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	21 e0       	ldi	r18, 0x01	; 1
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <GPIO_voidSetPinDirection+0x1ec>
    21b0:	22 0f       	add	r18, r18
    21b2:	33 1f       	adc	r19, r19
    21b4:	4a 95       	dec	r20
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <GPIO_voidSetPinDirection+0x1e8>
    21b8:	26 2b       	or	r18, r22
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
						break;
    21be:	15 c0       	rjmp	.+42     	; 0x21ea <GPIO_voidSetPinDirection+0x222>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRB,copy_u8PinNumber);
    21c0:	87 e3       	ldi	r24, 0x37	; 55
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	27 e3       	ldi	r18, 0x37	; 55
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	f9 01       	movw	r30, r18
    21ca:	20 81       	ld	r18, Z
    21cc:	62 2f       	mov	r22, r18
    21ce:	2a 81       	ldd	r18, Y+2	; 0x02
    21d0:	42 2f       	mov	r20, r18
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	21 e0       	ldi	r18, 0x01	; 1
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <GPIO_voidSetPinDirection+0x216>
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	4a 95       	dec	r20
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <GPIO_voidSetPinDirection+0x212>
    21e2:	26 2b       	or	r18, r22
    21e4:	fc 01       	movw	r30, r24
    21e6:	20 83       	st	Z, r18
						break;
    21e8:	00 00       	nop
					default:	break ;
				}	
				break ;
    21ea:	f0 c0       	rjmp	.+480    	; 0x23cc <GPIO_voidSetPinDirection+0x404>
			case PORTC :
				switch(copy_u8PinDirection)
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	91 05       	cpc	r25, r1
    21f6:	09 f4       	brne	.+2      	; 0x21fa <GPIO_voidSetPinDirection+0x232>
    21f8:	5b c0       	rjmp	.+182    	; 0x22b0 <GPIO_voidSetPinDirection+0x2e8>
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	91 05       	cpc	r25, r1
    21fe:	71 f1       	breq	.+92     	; 0x225c <GPIO_voidSetPinDirection+0x294>
    2200:	89 2b       	or	r24, r25
    2202:	09 f0       	breq	.+2      	; 0x2206 <GPIO_voidSetPinDirection+0x23e>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRC,copy_u8PinNumber);
						break;
					default:	break ;
    2204:	6a c0       	rjmp	.+212    	; 0x22da <GPIO_voidSetPinDirection+0x312>
			case PORTC :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRC,copy_u8PinNumber);
    2206:	84 e3       	ldi	r24, 0x34	; 52
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	24 e3       	ldi	r18, 0x34	; 52
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	f9 01       	movw	r30, r18
    2210:	20 81       	ld	r18, Z
    2212:	62 2f       	mov	r22, r18
    2214:	2a 81       	ldd	r18, Y+2	; 0x02
    2216:	42 2f       	mov	r20, r18
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <GPIO_voidSetPinDirection+0x25c>
    2220:	22 0f       	add	r18, r18
    2222:	33 1f       	adc	r19, r19
    2224:	4a 95       	dec	r20
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <GPIO_voidSetPinDirection+0x258>
    2228:	20 95       	com	r18
    222a:	26 23       	and	r18, r22
    222c:	fc 01       	movw	r30, r24
    222e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
    2230:	85 e3       	ldi	r24, 0x35	; 53
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	25 e3       	ldi	r18, 0x35	; 53
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	f9 01       	movw	r30, r18
    223a:	20 81       	ld	r18, Z
    223c:	62 2f       	mov	r22, r18
    223e:	2a 81       	ldd	r18, Y+2	; 0x02
    2240:	42 2f       	mov	r20, r18
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	21 e0       	ldi	r18, 0x01	; 1
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	02 c0       	rjmp	.+4      	; 0x224e <GPIO_voidSetPinDirection+0x286>
    224a:	22 0f       	add	r18, r18
    224c:	33 1f       	adc	r19, r19
    224e:	4a 95       	dec	r20
    2250:	e2 f7       	brpl	.-8      	; 0x224a <GPIO_voidSetPinDirection+0x282>
    2252:	20 95       	com	r18
    2254:	26 23       	and	r18, r22
    2256:	fc 01       	movw	r30, r24
    2258:	20 83       	st	Z, r18
						break;
    225a:	3f c0       	rjmp	.+126    	; 0x22da <GPIO_voidSetPinDirection+0x312>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRC,copy_u8PinNumber);
    225c:	84 e3       	ldi	r24, 0x34	; 52
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	24 e3       	ldi	r18, 0x34	; 52
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	f9 01       	movw	r30, r18
    2266:	20 81       	ld	r18, Z
    2268:	62 2f       	mov	r22, r18
    226a:	2a 81       	ldd	r18, Y+2	; 0x02
    226c:	42 2f       	mov	r20, r18
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	21 e0       	ldi	r18, 0x01	; 1
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	02 c0       	rjmp	.+4      	; 0x227a <GPIO_voidSetPinDirection+0x2b2>
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	4a 95       	dec	r20
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <GPIO_voidSetPinDirection+0x2ae>
    227e:	20 95       	com	r18
    2280:	26 23       	and	r18, r22
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTC,copy_u8PinNumber);
    2286:	85 e3       	ldi	r24, 0x35	; 53
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	25 e3       	ldi	r18, 0x35	; 53
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	f9 01       	movw	r30, r18
    2290:	20 81       	ld	r18, Z
    2292:	62 2f       	mov	r22, r18
    2294:	2a 81       	ldd	r18, Y+2	; 0x02
    2296:	42 2f       	mov	r20, r18
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	21 e0       	ldi	r18, 0x01	; 1
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <GPIO_voidSetPinDirection+0x2dc>
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	4a 95       	dec	r20
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <GPIO_voidSetPinDirection+0x2d8>
    22a8:	26 2b       	or	r18, r22
    22aa:	fc 01       	movw	r30, r24
    22ac:	20 83       	st	Z, r18
						break;
    22ae:	15 c0       	rjmp	.+42     	; 0x22da <GPIO_voidSetPinDirection+0x312>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRC,copy_u8PinNumber);
    22b0:	84 e3       	ldi	r24, 0x34	; 52
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	24 e3       	ldi	r18, 0x34	; 52
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	f9 01       	movw	r30, r18
    22ba:	20 81       	ld	r18, Z
    22bc:	62 2f       	mov	r22, r18
    22be:	2a 81       	ldd	r18, Y+2	; 0x02
    22c0:	42 2f       	mov	r20, r18
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	21 e0       	ldi	r18, 0x01	; 1
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <GPIO_voidSetPinDirection+0x306>
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	4a 95       	dec	r20
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <GPIO_voidSetPinDirection+0x302>
    22d2:	26 2b       	or	r18, r22
    22d4:	fc 01       	movw	r30, r24
    22d6:	20 83       	st	Z, r18
						break;
    22d8:	00 00       	nop
					default:	break ;
				}
				break ;
    22da:	78 c0       	rjmp	.+240    	; 0x23cc <GPIO_voidSetPinDirection+0x404>
			case PORTD :
				switch(copy_u8PinDirection)
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	81 30       	cpi	r24, 0x01	; 1
    22e4:	91 05       	cpc	r25, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <GPIO_voidSetPinDirection+0x322>
    22e8:	5b c0       	rjmp	.+182    	; 0x23a0 <GPIO_voidSetPinDirection+0x3d8>
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	91 05       	cpc	r25, r1
    22ee:	71 f1       	breq	.+92     	; 0x234c <GPIO_voidSetPinDirection+0x384>
    22f0:	89 2b       	or	r24, r25
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <GPIO_voidSetPinDirection+0x32e>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
    22f4:	6a c0       	rjmp	.+212    	; 0x23ca <GPIO_voidSetPinDirection+0x402>
			case PORTD :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRD,copy_u8PinNumber);
    22f6:	81 e3       	ldi	r24, 0x31	; 49
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	21 e3       	ldi	r18, 0x31	; 49
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	20 81       	ld	r18, Z
    2302:	62 2f       	mov	r22, r18
    2304:	2a 81       	ldd	r18, Y+2	; 0x02
    2306:	42 2f       	mov	r20, r18
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <GPIO_voidSetPinDirection+0x34c>
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	4a 95       	dec	r20
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <GPIO_voidSetPinDirection+0x348>
    2318:	20 95       	com	r18
    231a:	26 23       	and	r18, r22
    231c:	fc 01       	movw	r30, r24
    231e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
    2320:	82 e3       	ldi	r24, 0x32	; 50
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	22 e3       	ldi	r18, 0x32	; 50
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	f9 01       	movw	r30, r18
    232a:	20 81       	ld	r18, Z
    232c:	62 2f       	mov	r22, r18
    232e:	2a 81       	ldd	r18, Y+2	; 0x02
    2330:	42 2f       	mov	r20, r18
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	21 e0       	ldi	r18, 0x01	; 1
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	02 c0       	rjmp	.+4      	; 0x233e <GPIO_voidSetPinDirection+0x376>
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	4a 95       	dec	r20
    2340:	e2 f7       	brpl	.-8      	; 0x233a <GPIO_voidSetPinDirection+0x372>
    2342:	20 95       	com	r18
    2344:	26 23       	and	r18, r22
    2346:	fc 01       	movw	r30, r24
    2348:	20 83       	st	Z, r18
						break;
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <GPIO_voidSetPinDirection+0x402>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRD,copy_u8PinNumber);
    234c:	81 e3       	ldi	r24, 0x31	; 49
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	21 e3       	ldi	r18, 0x31	; 49
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	f9 01       	movw	r30, r18
    2356:	20 81       	ld	r18, Z
    2358:	62 2f       	mov	r22, r18
    235a:	2a 81       	ldd	r18, Y+2	; 0x02
    235c:	42 2f       	mov	r20, r18
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	21 e0       	ldi	r18, 0x01	; 1
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	02 c0       	rjmp	.+4      	; 0x236a <GPIO_voidSetPinDirection+0x3a2>
    2366:	22 0f       	add	r18, r18
    2368:	33 1f       	adc	r19, r19
    236a:	4a 95       	dec	r20
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <GPIO_voidSetPinDirection+0x39e>
    236e:	20 95       	com	r18
    2370:	26 23       	and	r18, r22
    2372:	fc 01       	movw	r30, r24
    2374:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTD,copy_u8PinNumber);
    2376:	82 e3       	ldi	r24, 0x32	; 50
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	22 e3       	ldi	r18, 0x32	; 50
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	f9 01       	movw	r30, r18
    2380:	20 81       	ld	r18, Z
    2382:	62 2f       	mov	r22, r18
    2384:	2a 81       	ldd	r18, Y+2	; 0x02
    2386:	42 2f       	mov	r20, r18
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <GPIO_voidSetPinDirection+0x3cc>
    2390:	22 0f       	add	r18, r18
    2392:	33 1f       	adc	r19, r19
    2394:	4a 95       	dec	r20
    2396:	e2 f7       	brpl	.-8      	; 0x2390 <GPIO_voidSetPinDirection+0x3c8>
    2398:	26 2b       	or	r18, r22
    239a:	fc 01       	movw	r30, r24
    239c:	20 83       	st	Z, r18
						break;
    239e:	15 c0       	rjmp	.+42     	; 0x23ca <GPIO_voidSetPinDirection+0x402>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
    23a0:	81 e3       	ldi	r24, 0x31	; 49
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	21 e3       	ldi	r18, 0x31	; 49
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	f9 01       	movw	r30, r18
    23aa:	20 81       	ld	r18, Z
    23ac:	62 2f       	mov	r22, r18
    23ae:	2a 81       	ldd	r18, Y+2	; 0x02
    23b0:	42 2f       	mov	r20, r18
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <GPIO_voidSetPinDirection+0x3f6>
    23ba:	22 0f       	add	r18, r18
    23bc:	33 1f       	adc	r19, r19
    23be:	4a 95       	dec	r20
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <GPIO_voidSetPinDirection+0x3f2>
    23c2:	26 2b       	or	r18, r22
    23c4:	fc 01       	movw	r30, r24
    23c6:	20 83       	st	Z, r18
						break;
    23c8:	00 00       	nop
					default:	break ;
				}
				break ;
    23ca:	00 00       	nop
	}
	else
	{
		//<!TODO> ERROR STATE
	}
}
    23cc:	00 00       	nop
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8Value)
{
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <GPIO_voidSetPinValue+0x6>
    23e0:	1f 92       	push	r1
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	6a 83       	std	Y+2, r22	; 0x02
    23ea:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	88 30       	cpi	r24, 0x08	; 8
    23f0:	08 f0       	brcs	.+2      	; 0x23f4 <GPIO_voidSetPinValue+0x1a>
    23f2:	e5 c0       	rjmp	.+458    	; 0x25be <GPIO_voidSetPinValue+0x1e4>
	{
		switch(copy_u8PortId)
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	88 2f       	mov	r24, r24
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	91 05       	cpc	r25, r1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <GPIO_voidSetPinValue+0x28>
    2400:	42 c0       	rjmp	.+132    	; 0x2486 <GPIO_voidSetPinValue+0xac>
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	91 05       	cpc	r25, r1
    2406:	1c f4       	brge	.+6      	; 0x240e <GPIO_voidSetPinValue+0x34>
    2408:	89 2b       	or	r24, r25
    240a:	49 f0       	breq	.+18     	; 0x241e <GPIO_voidSetPinValue+0x44>
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
    240c:	d8 c0       	rjmp	.+432    	; 0x25be <GPIO_voidSetPinValue+0x1e4>
}
void GPIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8Value)
{
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
    240e:	82 30       	cpi	r24, 0x02	; 2
    2410:	91 05       	cpc	r25, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <GPIO_voidSetPinValue+0x3c>
    2414:	6c c0       	rjmp	.+216    	; 0x24ee <GPIO_voidSetPinValue+0x114>
    2416:	03 97       	sbiw	r24, 0x03	; 3
    2418:	09 f4       	brne	.+2      	; 0x241c <GPIO_voidSetPinValue+0x42>
    241a:	9d c0       	rjmp	.+314    	; 0x2556 <GPIO_voidSetPinValue+0x17c>
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
    241c:	d0 c0       	rjmp	.+416    	; 0x25be <GPIO_voidSetPinValue+0x1e4>
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
		{
			case PORTA :
				switch(copy_u8Value)
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	c1 f0       	breq	.+48     	; 0x2458 <GPIO_voidSetPinValue+0x7e>
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	09 f0       	breq	.+2      	; 0x242e <GPIO_voidSetPinValue+0x54>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
						break;
					default:	break ;
    242c:	2b c0       	rjmp	.+86     	; 0x2484 <GPIO_voidSetPinValue+0xaa>
			case PORTA :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTA,copy_u8PinNumber);
    242e:	8b e3       	ldi	r24, 0x3B	; 59
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	2b e3       	ldi	r18, 0x3B	; 59
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	f9 01       	movw	r30, r18
    2438:	20 81       	ld	r18, Z
    243a:	62 2f       	mov	r22, r18
    243c:	2a 81       	ldd	r18, Y+2	; 0x02
    243e:	42 2f       	mov	r20, r18
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	21 e0       	ldi	r18, 0x01	; 1
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	02 c0       	rjmp	.+4      	; 0x244c <GPIO_voidSetPinValue+0x72>
    2448:	22 0f       	add	r18, r18
    244a:	33 1f       	adc	r19, r19
    244c:	4a 95       	dec	r20
    244e:	e2 f7       	brpl	.-8      	; 0x2448 <GPIO_voidSetPinValue+0x6e>
    2450:	26 2b       	or	r18, r22
    2452:	fc 01       	movw	r30, r24
    2454:	20 83       	st	Z, r18
						break;
    2456:	16 c0       	rjmp	.+44     	; 0x2484 <GPIO_voidSetPinValue+0xaa>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
    2458:	8b e3       	ldi	r24, 0x3B	; 59
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	2b e3       	ldi	r18, 0x3B	; 59
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	f9 01       	movw	r30, r18
    2462:	20 81       	ld	r18, Z
    2464:	62 2f       	mov	r22, r18
    2466:	2a 81       	ldd	r18, Y+2	; 0x02
    2468:	42 2f       	mov	r20, r18
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	21 e0       	ldi	r18, 0x01	; 1
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <GPIO_voidSetPinValue+0x9c>
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	4a 95       	dec	r20
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <GPIO_voidSetPinValue+0x98>
    247a:	20 95       	com	r18
    247c:	26 23       	and	r18, r22
    247e:	fc 01       	movw	r30, r24
    2480:	20 83       	st	Z, r18
						break;
    2482:	00 00       	nop
					default:	break ;
				}
				break ;
    2484:	9c c0       	rjmp	.+312    	; 0x25be <GPIO_voidSetPinValue+0x1e4>
			case PORTB : 
				switch(copy_u8Value)
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	c1 f0       	breq	.+48     	; 0x24c0 <GPIO_voidSetPinValue+0xe6>
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	09 f0       	breq	.+2      	; 0x2496 <GPIO_voidSetPinValue+0xbc>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
						break;
					default:	break ;
    2494:	2b c0       	rjmp	.+86     	; 0x24ec <GPIO_voidSetPinValue+0x112>
			case PORTB : 
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTB,copy_u8PinNumber);
    2496:	88 e3       	ldi	r24, 0x38	; 56
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	28 e3       	ldi	r18, 0x38	; 56
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	f9 01       	movw	r30, r18
    24a0:	20 81       	ld	r18, Z
    24a2:	62 2f       	mov	r22, r18
    24a4:	2a 81       	ldd	r18, Y+2	; 0x02
    24a6:	42 2f       	mov	r20, r18
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	21 e0       	ldi	r18, 0x01	; 1
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <GPIO_voidSetPinValue+0xda>
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	4a 95       	dec	r20
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <GPIO_voidSetPinValue+0xd6>
    24b8:	26 2b       	or	r18, r22
    24ba:	fc 01       	movw	r30, r24
    24bc:	20 83       	st	Z, r18
						break;
    24be:	16 c0       	rjmp	.+44     	; 0x24ec <GPIO_voidSetPinValue+0x112>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
    24c0:	88 e3       	ldi	r24, 0x38	; 56
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	28 e3       	ldi	r18, 0x38	; 56
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	f9 01       	movw	r30, r18
    24ca:	20 81       	ld	r18, Z
    24cc:	62 2f       	mov	r22, r18
    24ce:	2a 81       	ldd	r18, Y+2	; 0x02
    24d0:	42 2f       	mov	r20, r18
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	21 e0       	ldi	r18, 0x01	; 1
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <GPIO_voidSetPinValue+0x104>
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	4a 95       	dec	r20
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <GPIO_voidSetPinValue+0x100>
    24e2:	20 95       	com	r18
    24e4:	26 23       	and	r18, r22
    24e6:	fc 01       	movw	r30, r24
    24e8:	20 83       	st	Z, r18
						break;
    24ea:	00 00       	nop
					default:	break ;
				}
				break ;
    24ec:	68 c0       	rjmp	.+208    	; 0x25be <GPIO_voidSetPinValue+0x1e4>
			case PORTC :
				switch(copy_u8Value)
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	c1 f0       	breq	.+48     	; 0x2528 <GPIO_voidSetPinValue+0x14e>
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	09 f0       	breq	.+2      	; 0x24fe <GPIO_voidSetPinValue+0x124>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
						break;
					default:	break ;
    24fc:	2b c0       	rjmp	.+86     	; 0x2554 <GPIO_voidSetPinValue+0x17a>
			case PORTC :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTC,copy_u8PinNumber);
    24fe:	85 e3       	ldi	r24, 0x35	; 53
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	25 e3       	ldi	r18, 0x35	; 53
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	f9 01       	movw	r30, r18
    2508:	20 81       	ld	r18, Z
    250a:	62 2f       	mov	r22, r18
    250c:	2a 81       	ldd	r18, Y+2	; 0x02
    250e:	42 2f       	mov	r20, r18
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <GPIO_voidSetPinValue+0x142>
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	4a 95       	dec	r20
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <GPIO_voidSetPinValue+0x13e>
    2520:	26 2b       	or	r18, r22
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
						break;
    2526:	16 c0       	rjmp	.+44     	; 0x2554 <GPIO_voidSetPinValue+0x17a>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
    2528:	85 e3       	ldi	r24, 0x35	; 53
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	25 e3       	ldi	r18, 0x35	; 53
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	f9 01       	movw	r30, r18
    2532:	20 81       	ld	r18, Z
    2534:	62 2f       	mov	r22, r18
    2536:	2a 81       	ldd	r18, Y+2	; 0x02
    2538:	42 2f       	mov	r20, r18
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	21 e0       	ldi	r18, 0x01	; 1
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <GPIO_voidSetPinValue+0x16c>
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	4a 95       	dec	r20
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <GPIO_voidSetPinValue+0x168>
    254a:	20 95       	com	r18
    254c:	26 23       	and	r18, r22
    254e:	fc 01       	movw	r30, r24
    2550:	20 83       	st	Z, r18
						break;
    2552:	00 00       	nop
					default:	break ;
				}
				break ;
    2554:	34 c0       	rjmp	.+104    	; 0x25be <GPIO_voidSetPinValue+0x1e4>
			case PORTD :
				switch(copy_u8Value)
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	c1 f0       	breq	.+48     	; 0x2590 <GPIO_voidSetPinValue+0x1b6>
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	09 f0       	breq	.+2      	; 0x2566 <GPIO_voidSetPinValue+0x18c>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
    2564:	2b c0       	rjmp	.+86     	; 0x25bc <GPIO_voidSetPinValue+0x1e2>
			case PORTD :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTD,copy_u8PinNumber);
    2566:	82 e3       	ldi	r24, 0x32	; 50
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	22 e3       	ldi	r18, 0x32	; 50
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	f9 01       	movw	r30, r18
    2570:	20 81       	ld	r18, Z
    2572:	62 2f       	mov	r22, r18
    2574:	2a 81       	ldd	r18, Y+2	; 0x02
    2576:	42 2f       	mov	r20, r18
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	21 e0       	ldi	r18, 0x01	; 1
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <GPIO_voidSetPinValue+0x1aa>
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	4a 95       	dec	r20
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <GPIO_voidSetPinValue+0x1a6>
    2588:	26 2b       	or	r18, r22
    258a:	fc 01       	movw	r30, r24
    258c:	20 83       	st	Z, r18
						break;
    258e:	16 c0       	rjmp	.+44     	; 0x25bc <GPIO_voidSetPinValue+0x1e2>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
    2590:	82 e3       	ldi	r24, 0x32	; 50
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	22 e3       	ldi	r18, 0x32	; 50
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	f9 01       	movw	r30, r18
    259a:	20 81       	ld	r18, Z
    259c:	62 2f       	mov	r22, r18
    259e:	2a 81       	ldd	r18, Y+2	; 0x02
    25a0:	42 2f       	mov	r20, r18
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	21 e0       	ldi	r18, 0x01	; 1
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <GPIO_voidSetPinValue+0x1d4>
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	4a 95       	dec	r20
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <GPIO_voidSetPinValue+0x1d0>
    25b2:	20 95       	com	r18
    25b4:	26 23       	and	r18, r22
    25b6:	fc 01       	movw	r30, r24
    25b8:	20 83       	st	Z, r18
						break;
    25ba:	00 00       	nop
					default:	break ;
				}
				break ;
    25bc:	00 00       	nop
	}
	else
	{
		//<!TODO> ERROR STATE
	}
}
    25be:	00 00       	nop
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	08 95       	ret

000025cc <MCAL_USART_init>:
		case USART_FRAME_ERROR_FLAG:  
			LOC_u8Result = ((USART_UCSRA & UCSRA_FE) >> 4)?	USART_FR  : USART_NO_FR ;
			break ;	
	}
	return LOC_u8Result ; 
}
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <MCAL_USART_init+0xa>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <Global_uartcfg+0x1>
    25e6:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <Global_uartcfg>
    25ea:	8a e2       	ldi	r24, 0x2A	; 42
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	2a e2       	ldi	r18, 0x2A	; 42
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	f9 01       	movw	r30, r18
    25f4:	20 81       	ld	r18, Z
    25f6:	27 7e       	andi	r18, 0xE7	; 231
    25f8:	fc 01       	movw	r30, r24
    25fa:	20 83       	st	Z, r18
    25fc:	8a e2       	ldi	r24, 0x2A	; 42
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	2a e2       	ldi	r18, 0x2A	; 42
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	f9 01       	movw	r30, r18
    2606:	20 81       	ld	r18, Z
    2608:	42 2f       	mov	r20, r18
    260a:	29 81       	ldd	r18, Y+1	; 0x01
    260c:	3a 81       	ldd	r19, Y+2	; 0x02
    260e:	f9 01       	movw	r30, r18
    2610:	25 81       	ldd	r18, Z+5	; 0x05
    2612:	22 2f       	mov	r18, r18
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	22 0f       	add	r18, r18
    261c:	33 1f       	adc	r19, r19
    261e:	22 0f       	add	r18, r18
    2620:	33 1f       	adc	r19, r19
    2622:	24 2b       	or	r18, r20
    2624:	fc 01       	movw	r30, r24
    2626:	20 83       	st	Z, r18
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	fc 01       	movw	r30, r24
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	86 95       	lsr	r24
    2632:	86 95       	lsr	r24
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	81 70       	andi	r24, 0x01	; 1
    263a:	99 27       	eor	r25, r25
    263c:	89 2b       	or	r24, r25
    263e:	51 f0       	breq	.+20     	; 0x2654 <MCAL_USART_init+0x88>
    2640:	8a e2       	ldi	r24, 0x2A	; 42
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	2a e2       	ldi	r18, 0x2A	; 42
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	f9 01       	movw	r30, r18
    264a:	20 81       	ld	r18, Z
    264c:	24 60       	ori	r18, 0x04	; 4
    264e:	fc 01       	movw	r30, r24
    2650:	20 83       	st	Z, r18
    2652:	09 c0       	rjmp	.+18     	; 0x2666 <MCAL_USART_init+0x9a>
    2654:	8a e2       	ldi	r24, 0x2A	; 42
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	2a e2       	ldi	r18, 0x2A	; 42
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	f9 01       	movw	r30, r18
    265e:	20 81       	ld	r18, Z
    2660:	2b 7f       	andi	r18, 0xFB	; 251
    2662:	fc 01       	movw	r30, r24
    2664:	20 83       	st	Z, r18
    2666:	80 e4       	ldi	r24, 0x40	; 64
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	29 81       	ldd	r18, Y+1	; 0x01
    266c:	3a 81       	ldd	r19, Y+2	; 0x02
    266e:	f9 01       	movw	r30, r18
    2670:	22 81       	ldd	r18, Z+2	; 0x02
    2672:	22 2f       	mov	r18, r18
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	23 70       	andi	r18, 0x03	; 3
    2678:	33 27       	eor	r19, r19
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	42 2f       	mov	r20, r18
    2680:	29 81       	ldd	r18, Y+1	; 0x01
    2682:	3a 81       	ldd	r19, Y+2	; 0x02
    2684:	f9 01       	movw	r30, r18
    2686:	23 81       	ldd	r18, Z+3	; 0x03
    2688:	42 2b       	or	r20, r18
    268a:	29 81       	ldd	r18, Y+1	; 0x01
    268c:	3a 81       	ldd	r19, Y+2	; 0x02
    268e:	f9 01       	movw	r30, r18
    2690:	24 81       	ldd	r18, Z+4	; 0x04
    2692:	24 2b       	or	r18, r20
    2694:	20 68       	ori	r18, 0x80	; 128
    2696:	fc 01       	movw	r30, r24
    2698:	20 83       	st	Z, r18
    269a:	09 e2       	ldi	r16, 0x29	; 41
    269c:	10 e0       	ldi	r17, 0x00	; 0
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	fc 01       	movw	r30, r24
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	cc 01       	movw	r24, r24
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	aa 1f       	adc	r26, r26
    26b4:	bb 1f       	adc	r27, r27
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	aa 1f       	adc	r26, r26
    26cc:	bb 1f       	adc	r27, r27
    26ce:	9c 01       	movw	r18, r24
    26d0:	ad 01       	movw	r20, r26
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	94 e2       	ldi	r25, 0x24	; 36
    26d6:	a4 ef       	ldi	r26, 0xF4	; 244
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    26e2:	da 01       	movw	r26, r20
    26e4:	c9 01       	movw	r24, r18
    26e6:	81 50       	subi	r24, 0x01	; 1
    26e8:	f8 01       	movw	r30, r16
    26ea:	80 83       	st	Z, r24
    26ec:	00 e4       	ldi	r16, 0x40	; 64
    26ee:	10 e0       	ldi	r17, 0x00	; 0
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	fc 01       	movw	r30, r24
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	cc 01       	movw	r24, r24
    26fc:	a0 e0       	ldi	r26, 0x00	; 0
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	aa 1f       	adc	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	aa 1f       	adc	r26, r26
    270e:	bb 1f       	adc	r27, r27
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	aa 1f       	adc	r26, r26
    2716:	bb 1f       	adc	r27, r27
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	aa 1f       	adc	r26, r26
    271e:	bb 1f       	adc	r27, r27
    2720:	9c 01       	movw	r18, r24
    2722:	ad 01       	movw	r20, r26
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	94 e2       	ldi	r25, 0x24	; 36
    2728:	a4 ef       	ldi	r26, 0xF4	; 244
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    2734:	da 01       	movw	r26, r20
    2736:	c9 01       	movw	r24, r18
    2738:	81 50       	subi	r24, 0x01	; 1
    273a:	88 2f       	mov	r24, r24
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	89 2f       	mov	r24, r25
    2740:	99 0f       	add	r25, r25
    2742:	99 0b       	sbc	r25, r25
    2744:	f8 01       	movw	r30, r16
    2746:	80 83       	st	Z, r24
    2748:	00 00       	nop
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	08 95       	ret

00002758 <MCAL_USART_TxByteSynch>:
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	1f 92       	push	r1
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	00 00       	nop
    2766:	8b e2       	ldi	r24, 0x2B	; 43
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	fc 01       	movw	r30, r24
    276c:	80 81       	ld	r24, Z
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	80 72       	andi	r24, 0x20	; 32
    2774:	99 27       	eor	r25, r25
    2776:	89 2b       	or	r24, r25
    2778:	b1 f3       	breq	.-20     	; 0x2766 <MCAL_USART_TxByteSynch+0xe>
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	0e 94 1f 14 	call	0x283e	; 0x283e <MCAL_u8PrivateEffectiveData>
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	8c e2       	ldi	r24, 0x2C	; 44
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	29 81       	ldd	r18, Y+1	; 0x01
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18
    278c:	00 00       	nop
    278e:	0f 90       	pop	r0
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <MCAL_USART_RxByteSynch>:
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	00 d0       	rcall	.+0      	; 0x279c <MCAL_USART_RxByteSynch+0x6>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	00 00       	nop
    27a6:	8b e2       	ldi	r24, 0x2B	; 43
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	fc 01       	movw	r30, r24
    27ac:	80 81       	ld	r24, Z
    27ae:	88 23       	and	r24, r24
    27b0:	d4 f7       	brge	.-12     	; 0x27a6 <MCAL_USART_RxByteSynch+0x10>
    27b2:	8c e2       	ldi	r24, 0x2C	; 44
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	fc 01       	movw	r30, r24
    27b8:	20 81       	ld	r18, Z
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	fc 01       	movw	r30, r24
    27c0:	20 83       	st	Z, r18
    27c2:	00 00       	nop
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <MCAL_USART_TxChar>:
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	1f 92       	push	r1
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	0e 94 ac 13 	call	0x2758	; 0x2758 <MCAL_USART_TxByteSynch>
    27e0:	00 00       	nop
    27e2:	0f 90       	pop	r0
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <MCAL_USART_SendString>:
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <MCAL_USART_SendString+0x6>
    27f0:	1f 92       	push	r1
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	9b 83       	std	Y+3, r25	; 0x03
    27f8:	8a 83       	std	Y+2, r24	; 0x02
    27fa:	19 82       	std	Y+1, r1	; 0x01
    27fc:	0e c0       	rjmp	.+28     	; 0x281a <MCAL_USART_SendString+0x30>
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	2a 81       	ldd	r18, Y+2	; 0x02
    2806:	3b 81       	ldd	r19, Y+3	; 0x03
    2808:	82 0f       	add	r24, r18
    280a:	93 1f       	adc	r25, r19
    280c:	fc 01       	movw	r30, r24
    280e:	80 81       	ld	r24, Z
    2810:	0e 94 e7 13 	call	0x27ce	; 0x27ce <MCAL_USART_TxChar>
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	2a 81       	ldd	r18, Y+2	; 0x02
    2822:	3b 81       	ldd	r19, Y+3	; 0x03
    2824:	82 0f       	add	r24, r18
    2826:	93 1f       	adc	r25, r19
    2828:	fc 01       	movw	r30, r24
    282a:	80 81       	ld	r24, Z
    282c:	88 23       	and	r24, r24
    282e:	39 f7       	brne	.-50     	; 0x27fe <MCAL_USART_SendString+0x14>
    2830:	00 00       	nop
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret

0000283e <MCAL_u8PrivateEffectiveData>:
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	00 d0       	rcall	.+0      	; 0x2844 <MCAL_u8PrivateEffectiveData+0x6>
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	8a 83       	std	Y+2, r24	; 0x02
    284a:	19 82       	std	Y+1, r1	; 0x01
    284c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Global_uartcfg>
    2850:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <Global_uartcfg+0x1>
    2854:	fc 01       	movw	r30, r24
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	88 2f       	mov	r24, r24
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	91 05       	cpc	r25, r1
    2860:	81 f0       	breq	.+32     	; 0x2882 <MCAL_u8PrivateEffectiveData+0x44>
    2862:	82 30       	cpi	r24, 0x02	; 2
    2864:	91 05       	cpc	r25, r1
    2866:	1c f4       	brge	.+6      	; 0x286e <MCAL_u8PrivateEffectiveData+0x30>
    2868:	89 2b       	or	r24, r25
    286a:	39 f0       	breq	.+14     	; 0x287a <MCAL_u8PrivateEffectiveData+0x3c>
    286c:	15 c0       	rjmp	.+42     	; 0x2898 <MCAL_u8PrivateEffectiveData+0x5a>
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	91 05       	cpc	r25, r1
    2872:	59 f0       	breq	.+22     	; 0x288a <MCAL_u8PrivateEffectiveData+0x4c>
    2874:	03 97       	sbiw	r24, 0x03	; 3
    2876:	69 f0       	breq	.+26     	; 0x2892 <MCAL_u8PrivateEffectiveData+0x54>
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <MCAL_u8PrivateEffectiveData+0x5a>
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	8f 71       	andi	r24, 0x1F	; 31
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	0b c0       	rjmp	.+22     	; 0x2898 <MCAL_u8PrivateEffectiveData+0x5a>
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	8f 73       	andi	r24, 0x3F	; 63
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	07 c0       	rjmp	.+14     	; 0x2898 <MCAL_u8PrivateEffectiveData+0x5a>
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	8f 77       	andi	r24, 0x7F	; 127
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <MCAL_u8PrivateEffectiveData+0x5a>
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	00 00       	nop
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	08 95       	ret

000028a4 <__vector_11>:
 void __vector_11(void)	//USART, Rx Complete
{
    28a4:	1f 92       	push	r1
    28a6:	0f 92       	push	r0
    28a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    28ac:	0f 92       	push	r0
    28ae:	11 24       	eor	r1, r1
    28b0:	2f 93       	push	r18
    28b2:	3f 93       	push	r19
    28b4:	8f 93       	push	r24
    28b6:	9f 93       	push	r25
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	*Global_u8Rx = USART_UDR;
    28c4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <Global_u8Rx>
    28c8:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <Global_u8Rx+0x1>
    28cc:	2c e2       	ldi	r18, 0x2C	; 44
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	f9 01       	movw	r30, r18
    28d2:	20 81       	ld	r18, Z
    28d4:	fc 01       	movw	r30, r24
    28d6:	20 83       	st	Z, r18
}
    28d8:	00 00       	nop
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	9f 91       	pop	r25
    28e4:	8f 91       	pop	r24
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    28f0:	0f 90       	pop	r0
    28f2:	1f 90       	pop	r1
    28f4:	18 95       	reti

000028f6 <__vector_13>:

 void __vector_13(void)    //USART, Tx Complete
{
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    28fe:	0f 92       	push	r0
    2900:	11 24       	eor	r1, r1
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	ef 93       	push	r30
    2918:	ff 93       	push	r31
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
	Global_TxComplate();
    2922:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Global_TxComplate>
    2926:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Global_TxComplate+0x1>
    292a:	fc 01       	movw	r30, r24
    292c:	09 95       	icall
}
    292e:	00 00       	nop
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	ff 91       	pop	r31
    2936:	ef 91       	pop	r30
    2938:	bf 91       	pop	r27
    293a:	af 91       	pop	r26
    293c:	9f 91       	pop	r25
    293e:	8f 91       	pop	r24
    2940:	7f 91       	pop	r23
    2942:	6f 91       	pop	r22
    2944:	5f 91       	pop	r21
    2946:	4f 91       	pop	r20
    2948:	3f 91       	pop	r19
    294a:	2f 91       	pop	r18
    294c:	0f 90       	pop	r0
    294e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <__cmpsf2>:
    2958:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__fp_cmp>
    295c:	08 f4       	brcc	.+2      	; 0x2960 <__cmpsf2+0x8>
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	08 95       	ret

00002962 <__fixunssfsi>:
    2962:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__fp_splitA>
    2966:	88 f0       	brcs	.+34     	; 0x298a <__fixunssfsi+0x28>
    2968:	9f 57       	subi	r25, 0x7F	; 127
    296a:	98 f0       	brcs	.+38     	; 0x2992 <__fixunssfsi+0x30>
    296c:	b9 2f       	mov	r27, r25
    296e:	99 27       	eor	r25, r25
    2970:	b7 51       	subi	r27, 0x17	; 23
    2972:	b0 f0       	brcs	.+44     	; 0x29a0 <__fixunssfsi+0x3e>
    2974:	e1 f0       	breq	.+56     	; 0x29ae <__fixunssfsi+0x4c>
    2976:	66 0f       	add	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	1a f0       	brmi	.+6      	; 0x2986 <__fixunssfsi+0x24>
    2980:	ba 95       	dec	r27
    2982:	c9 f7       	brne	.-14     	; 0x2976 <__fixunssfsi+0x14>
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <__fixunssfsi+0x4c>
    2986:	b1 30       	cpi	r27, 0x01	; 1
    2988:	91 f0       	breq	.+36     	; 0x29ae <__fixunssfsi+0x4c>
    298a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__fp_zero>
    298e:	b1 e0       	ldi	r27, 0x01	; 1
    2990:	08 95       	ret
    2992:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__fp_zero>
    2996:	67 2f       	mov	r22, r23
    2998:	78 2f       	mov	r23, r24
    299a:	88 27       	eor	r24, r24
    299c:	b8 5f       	subi	r27, 0xF8	; 248
    299e:	39 f0       	breq	.+14     	; 0x29ae <__fixunssfsi+0x4c>
    29a0:	b9 3f       	cpi	r27, 0xF9	; 249
    29a2:	cc f3       	brlt	.-14     	; 0x2996 <__fixunssfsi+0x34>
    29a4:	86 95       	lsr	r24
    29a6:	77 95       	ror	r23
    29a8:	67 95       	ror	r22
    29aa:	b3 95       	inc	r27
    29ac:	d9 f7       	brne	.-10     	; 0x29a4 <__fixunssfsi+0x42>
    29ae:	3e f4       	brtc	.+14     	; 0x29be <__fixunssfsi+0x5c>
    29b0:	90 95       	com	r25
    29b2:	80 95       	com	r24
    29b4:	70 95       	com	r23
    29b6:	61 95       	neg	r22
    29b8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ba:	8f 4f       	sbci	r24, 0xFF	; 255
    29bc:	9f 4f       	sbci	r25, 0xFF	; 255
    29be:	08 95       	ret

000029c0 <__fp_cmp>:
    29c0:	99 0f       	add	r25, r25
    29c2:	00 08       	sbc	r0, r0
    29c4:	55 0f       	add	r21, r21
    29c6:	aa 0b       	sbc	r26, r26
    29c8:	e0 e8       	ldi	r30, 0x80	; 128
    29ca:	fe ef       	ldi	r31, 0xFE	; 254
    29cc:	16 16       	cp	r1, r22
    29ce:	17 06       	cpc	r1, r23
    29d0:	e8 07       	cpc	r30, r24
    29d2:	f9 07       	cpc	r31, r25
    29d4:	c0 f0       	brcs	.+48     	; 0x2a06 <__fp_cmp+0x46>
    29d6:	12 16       	cp	r1, r18
    29d8:	13 06       	cpc	r1, r19
    29da:	e4 07       	cpc	r30, r20
    29dc:	f5 07       	cpc	r31, r21
    29de:	98 f0       	brcs	.+38     	; 0x2a06 <__fp_cmp+0x46>
    29e0:	62 1b       	sub	r22, r18
    29e2:	73 0b       	sbc	r23, r19
    29e4:	84 0b       	sbc	r24, r20
    29e6:	95 0b       	sbc	r25, r21
    29e8:	39 f4       	brne	.+14     	; 0x29f8 <__fp_cmp+0x38>
    29ea:	0a 26       	eor	r0, r26
    29ec:	61 f0       	breq	.+24     	; 0x2a06 <__fp_cmp+0x46>
    29ee:	23 2b       	or	r18, r19
    29f0:	24 2b       	or	r18, r20
    29f2:	25 2b       	or	r18, r21
    29f4:	21 f4       	brne	.+8      	; 0x29fe <__fp_cmp+0x3e>
    29f6:	08 95       	ret
    29f8:	0a 26       	eor	r0, r26
    29fa:	09 f4       	brne	.+2      	; 0x29fe <__fp_cmp+0x3e>
    29fc:	a1 40       	sbci	r26, 0x01	; 1
    29fe:	a6 95       	lsr	r26
    2a00:	8f ef       	ldi	r24, 0xFF	; 255
    2a02:	81 1d       	adc	r24, r1
    2a04:	81 1d       	adc	r24, r1
    2a06:	08 95       	ret

00002a08 <__fp_split3>:
    2a08:	57 fd       	sbrc	r21, 7
    2a0a:	90 58       	subi	r25, 0x80	; 128
    2a0c:	44 0f       	add	r20, r20
    2a0e:	55 1f       	adc	r21, r21
    2a10:	59 f0       	breq	.+22     	; 0x2a28 <__fp_splitA+0x10>
    2a12:	5f 3f       	cpi	r21, 0xFF	; 255
    2a14:	71 f0       	breq	.+28     	; 0x2a32 <__fp_splitA+0x1a>
    2a16:	47 95       	ror	r20

00002a18 <__fp_splitA>:
    2a18:	88 0f       	add	r24, r24
    2a1a:	97 fb       	bst	r25, 7
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	61 f0       	breq	.+24     	; 0x2a38 <__fp_splitA+0x20>
    2a20:	9f 3f       	cpi	r25, 0xFF	; 255
    2a22:	79 f0       	breq	.+30     	; 0x2a42 <__fp_splitA+0x2a>
    2a24:	87 95       	ror	r24
    2a26:	08 95       	ret
    2a28:	12 16       	cp	r1, r18
    2a2a:	13 06       	cpc	r1, r19
    2a2c:	14 06       	cpc	r1, r20
    2a2e:	55 1f       	adc	r21, r21
    2a30:	f2 cf       	rjmp	.-28     	; 0x2a16 <__fp_split3+0xe>
    2a32:	46 95       	lsr	r20
    2a34:	f1 df       	rcall	.-30     	; 0x2a18 <__fp_splitA>
    2a36:	08 c0       	rjmp	.+16     	; 0x2a48 <__fp_splitA+0x30>
    2a38:	16 16       	cp	r1, r22
    2a3a:	17 06       	cpc	r1, r23
    2a3c:	18 06       	cpc	r1, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	f1 cf       	rjmp	.-30     	; 0x2a24 <__fp_splitA+0xc>
    2a42:	86 95       	lsr	r24
    2a44:	71 05       	cpc	r23, r1
    2a46:	61 05       	cpc	r22, r1
    2a48:	08 94       	sec
    2a4a:	08 95       	ret

00002a4c <__fp_zero>:
    2a4c:	e8 94       	clt

00002a4e <__fp_szero>:
    2a4e:	bb 27       	eor	r27, r27
    2a50:	66 27       	eor	r22, r22
    2a52:	77 27       	eor	r23, r23
    2a54:	cb 01       	movw	r24, r22
    2a56:	97 f9       	bld	r25, 7
    2a58:	08 95       	ret

00002a5a <__gesf2>:
    2a5a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__fp_cmp>
    2a5e:	08 f4       	brcc	.+2      	; 0x2a62 <__gesf2+0x8>
    2a60:	8f ef       	ldi	r24, 0xFF	; 255
    2a62:	08 95       	ret

00002a64 <__mulsf3>:
    2a64:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__mulsf3x>
    2a68:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__fp_round>
    2a6c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__fp_pscA>
    2a70:	38 f0       	brcs	.+14     	; 0x2a80 <__mulsf3+0x1c>
    2a72:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fp_pscB>
    2a76:	20 f0       	brcs	.+8      	; 0x2a80 <__mulsf3+0x1c>
    2a78:	95 23       	and	r25, r21
    2a7a:	11 f0       	breq	.+4      	; 0x2a80 <__mulsf3+0x1c>
    2a7c:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__fp_inf>
    2a80:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__fp_nan>
    2a84:	11 24       	eor	r1, r1
    2a86:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_szero>

00002a8a <__mulsf3x>:
    2a8a:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fp_split3>
    2a8e:	70 f3       	brcs	.-36     	; 0x2a6c <__mulsf3+0x8>

00002a90 <__mulsf3_pse>:
    2a90:	95 9f       	mul	r25, r21
    2a92:	c1 f3       	breq	.-16     	; 0x2a84 <__mulsf3+0x20>
    2a94:	95 0f       	add	r25, r21
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	55 1f       	adc	r21, r21
    2a9a:	62 9f       	mul	r22, r18
    2a9c:	f0 01       	movw	r30, r0
    2a9e:	72 9f       	mul	r23, r18
    2aa0:	bb 27       	eor	r27, r27
    2aa2:	f0 0d       	add	r31, r0
    2aa4:	b1 1d       	adc	r27, r1
    2aa6:	63 9f       	mul	r22, r19
    2aa8:	aa 27       	eor	r26, r26
    2aaa:	f0 0d       	add	r31, r0
    2aac:	b1 1d       	adc	r27, r1
    2aae:	aa 1f       	adc	r26, r26
    2ab0:	64 9f       	mul	r22, r20
    2ab2:	66 27       	eor	r22, r22
    2ab4:	b0 0d       	add	r27, r0
    2ab6:	a1 1d       	adc	r26, r1
    2ab8:	66 1f       	adc	r22, r22
    2aba:	82 9f       	mul	r24, r18
    2abc:	22 27       	eor	r18, r18
    2abe:	b0 0d       	add	r27, r0
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	62 1f       	adc	r22, r18
    2ac4:	73 9f       	mul	r23, r19
    2ac6:	b0 0d       	add	r27, r0
    2ac8:	a1 1d       	adc	r26, r1
    2aca:	62 1f       	adc	r22, r18
    2acc:	83 9f       	mul	r24, r19
    2ace:	a0 0d       	add	r26, r0
    2ad0:	61 1d       	adc	r22, r1
    2ad2:	22 1f       	adc	r18, r18
    2ad4:	74 9f       	mul	r23, r20
    2ad6:	33 27       	eor	r19, r19
    2ad8:	a0 0d       	add	r26, r0
    2ada:	61 1d       	adc	r22, r1
    2adc:	23 1f       	adc	r18, r19
    2ade:	84 9f       	mul	r24, r20
    2ae0:	60 0d       	add	r22, r0
    2ae2:	21 1d       	adc	r18, r1
    2ae4:	82 2f       	mov	r24, r18
    2ae6:	76 2f       	mov	r23, r22
    2ae8:	6a 2f       	mov	r22, r26
    2aea:	11 24       	eor	r1, r1
    2aec:	9f 57       	subi	r25, 0x7F	; 127
    2aee:	50 40       	sbci	r21, 0x00	; 0
    2af0:	9a f0       	brmi	.+38     	; 0x2b18 <__mulsf3_pse+0x88>
    2af2:	f1 f0       	breq	.+60     	; 0x2b30 <__mulsf3_pse+0xa0>
    2af4:	88 23       	and	r24, r24
    2af6:	4a f0       	brmi	.+18     	; 0x2b0a <__mulsf3_pse+0x7a>
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	bb 1f       	adc	r27, r27
    2afe:	66 1f       	adc	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	88 1f       	adc	r24, r24
    2b04:	91 50       	subi	r25, 0x01	; 1
    2b06:	50 40       	sbci	r21, 0x00	; 0
    2b08:	a9 f7       	brne	.-22     	; 0x2af4 <__mulsf3_pse+0x64>
    2b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b0c:	51 05       	cpc	r21, r1
    2b0e:	80 f0       	brcs	.+32     	; 0x2b30 <__mulsf3_pse+0xa0>
    2b10:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__fp_inf>
    2b14:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_szero>
    2b18:	5f 3f       	cpi	r21, 0xFF	; 255
    2b1a:	e4 f3       	brlt	.-8      	; 0x2b14 <__mulsf3_pse+0x84>
    2b1c:	98 3e       	cpi	r25, 0xE8	; 232
    2b1e:	d4 f3       	brlt	.-12     	; 0x2b14 <__mulsf3_pse+0x84>
    2b20:	86 95       	lsr	r24
    2b22:	77 95       	ror	r23
    2b24:	67 95       	ror	r22
    2b26:	b7 95       	ror	r27
    2b28:	f7 95       	ror	r31
    2b2a:	e7 95       	ror	r30
    2b2c:	9f 5f       	subi	r25, 0xFF	; 255
    2b2e:	c1 f7       	brne	.-16     	; 0x2b20 <__mulsf3_pse+0x90>
    2b30:	fe 2b       	or	r31, r30
    2b32:	88 0f       	add	r24, r24
    2b34:	91 1d       	adc	r25, r1
    2b36:	96 95       	lsr	r25
    2b38:	87 95       	ror	r24
    2b3a:	97 f9       	bld	r25, 7
    2b3c:	08 95       	ret

00002b3e <__fp_inf>:
    2b3e:	97 f9       	bld	r25, 7
    2b40:	9f 67       	ori	r25, 0x7F	; 127
    2b42:	80 e8       	ldi	r24, 0x80	; 128
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	08 95       	ret

00002b4a <__fp_nan>:
    2b4a:	9f ef       	ldi	r25, 0xFF	; 255
    2b4c:	80 ec       	ldi	r24, 0xC0	; 192
    2b4e:	08 95       	ret

00002b50 <__fp_pscA>:
    2b50:	00 24       	eor	r0, r0
    2b52:	0a 94       	dec	r0
    2b54:	16 16       	cp	r1, r22
    2b56:	17 06       	cpc	r1, r23
    2b58:	18 06       	cpc	r1, r24
    2b5a:	09 06       	cpc	r0, r25
    2b5c:	08 95       	ret

00002b5e <__fp_pscB>:
    2b5e:	00 24       	eor	r0, r0
    2b60:	0a 94       	dec	r0
    2b62:	12 16       	cp	r1, r18
    2b64:	13 06       	cpc	r1, r19
    2b66:	14 06       	cpc	r1, r20
    2b68:	05 06       	cpc	r0, r21
    2b6a:	08 95       	ret

00002b6c <__fp_round>:
    2b6c:	09 2e       	mov	r0, r25
    2b6e:	03 94       	inc	r0
    2b70:	00 0c       	add	r0, r0
    2b72:	11 f4       	brne	.+4      	; 0x2b78 <__fp_round+0xc>
    2b74:	88 23       	and	r24, r24
    2b76:	52 f0       	brmi	.+20     	; 0x2b8c <__fp_round+0x20>
    2b78:	bb 0f       	add	r27, r27
    2b7a:	40 f4       	brcc	.+16     	; 0x2b8c <__fp_round+0x20>
    2b7c:	bf 2b       	or	r27, r31
    2b7e:	11 f4       	brne	.+4      	; 0x2b84 <__fp_round+0x18>
    2b80:	60 ff       	sbrs	r22, 0
    2b82:	04 c0       	rjmp	.+8      	; 0x2b8c <__fp_round+0x20>
    2b84:	6f 5f       	subi	r22, 0xFF	; 255
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255
    2b88:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	08 95       	ret

00002b8e <__udivmodqi4>:
    2b8e:	99 1b       	sub	r25, r25
    2b90:	79 e0       	ldi	r23, 0x09	; 9
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <__udivmodqi4_ep>

00002b94 <__udivmodqi4_loop>:
    2b94:	99 1f       	adc	r25, r25
    2b96:	96 17       	cp	r25, r22
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <__udivmodqi4_ep>
    2b9a:	96 1b       	sub	r25, r22

00002b9c <__udivmodqi4_ep>:
    2b9c:	88 1f       	adc	r24, r24
    2b9e:	7a 95       	dec	r23
    2ba0:	c9 f7       	brne	.-14     	; 0x2b94 <__udivmodqi4_loop>
    2ba2:	80 95       	com	r24
    2ba4:	08 95       	ret

00002ba6 <__divmodhi4>:
    2ba6:	97 fb       	bst	r25, 7
    2ba8:	07 2e       	mov	r0, r23
    2baa:	16 f4       	brtc	.+4      	; 0x2bb0 <__divmodhi4+0xa>
    2bac:	00 94       	com	r0
    2bae:	07 d0       	rcall	.+14     	; 0x2bbe <__divmodhi4_neg1>
    2bb0:	77 fd       	sbrc	r23, 7
    2bb2:	09 d0       	rcall	.+18     	; 0x2bc6 <__divmodhi4_neg2>
    2bb4:	0e 94 09 16 	call	0x2c12	; 0x2c12 <__udivmodhi4>
    2bb8:	07 fc       	sbrc	r0, 7
    2bba:	05 d0       	rcall	.+10     	; 0x2bc6 <__divmodhi4_neg2>
    2bbc:	3e f4       	brtc	.+14     	; 0x2bcc <__divmodhi4_exit>

00002bbe <__divmodhi4_neg1>:
    2bbe:	90 95       	com	r25
    2bc0:	81 95       	neg	r24
    2bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc4:	08 95       	ret

00002bc6 <__divmodhi4_neg2>:
    2bc6:	70 95       	com	r23
    2bc8:	61 95       	neg	r22
    2bca:	7f 4f       	sbci	r23, 0xFF	; 255

00002bcc <__divmodhi4_exit>:
    2bcc:	08 95       	ret

00002bce <__udivmodsi4>:
    2bce:	a1 e2       	ldi	r26, 0x21	; 33
    2bd0:	1a 2e       	mov	r1, r26
    2bd2:	aa 1b       	sub	r26, r26
    2bd4:	bb 1b       	sub	r27, r27
    2bd6:	fd 01       	movw	r30, r26
    2bd8:	0d c0       	rjmp	.+26     	; 0x2bf4 <__udivmodsi4_ep>

00002bda <__udivmodsi4_loop>:
    2bda:	aa 1f       	adc	r26, r26
    2bdc:	bb 1f       	adc	r27, r27
    2bde:	ee 1f       	adc	r30, r30
    2be0:	ff 1f       	adc	r31, r31
    2be2:	a2 17       	cp	r26, r18
    2be4:	b3 07       	cpc	r27, r19
    2be6:	e4 07       	cpc	r30, r20
    2be8:	f5 07       	cpc	r31, r21
    2bea:	20 f0       	brcs	.+8      	; 0x2bf4 <__udivmodsi4_ep>
    2bec:	a2 1b       	sub	r26, r18
    2bee:	b3 0b       	sbc	r27, r19
    2bf0:	e4 0b       	sbc	r30, r20
    2bf2:	f5 0b       	sbc	r31, r21

00002bf4 <__udivmodsi4_ep>:
    2bf4:	66 1f       	adc	r22, r22
    2bf6:	77 1f       	adc	r23, r23
    2bf8:	88 1f       	adc	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	1a 94       	dec	r1
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <__udivmodsi4_loop>
    2c00:	60 95       	com	r22
    2c02:	70 95       	com	r23
    2c04:	80 95       	com	r24
    2c06:	90 95       	com	r25
    2c08:	9b 01       	movw	r18, r22
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	bd 01       	movw	r22, r26
    2c0e:	cf 01       	movw	r24, r30
    2c10:	08 95       	ret

00002c12 <__udivmodhi4>:
    2c12:	aa 1b       	sub	r26, r26
    2c14:	bb 1b       	sub	r27, r27
    2c16:	51 e1       	ldi	r21, 0x11	; 17
    2c18:	07 c0       	rjmp	.+14     	; 0x2c28 <__udivmodhi4_ep>

00002c1a <__udivmodhi4_loop>:
    2c1a:	aa 1f       	adc	r26, r26
    2c1c:	bb 1f       	adc	r27, r27
    2c1e:	a6 17       	cp	r26, r22
    2c20:	b7 07       	cpc	r27, r23
    2c22:	10 f0       	brcs	.+4      	; 0x2c28 <__udivmodhi4_ep>
    2c24:	a6 1b       	sub	r26, r22
    2c26:	b7 0b       	sbc	r27, r23

00002c28 <__udivmodhi4_ep>:
    2c28:	88 1f       	adc	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	5a 95       	dec	r21
    2c2e:	a9 f7       	brne	.-22     	; 0x2c1a <__udivmodhi4_loop>
    2c30:	80 95       	com	r24
    2c32:	90 95       	com	r25
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	08 95       	ret

00002c3a <_exit>:
    2c3a:	f8 94       	cli

00002c3c <__stop_program>:
    2c3c:	ff cf       	rjmp	.-2      	; 0x2c3c <__stop_program>
