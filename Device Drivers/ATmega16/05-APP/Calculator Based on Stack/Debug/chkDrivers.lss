
chkDrivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000024e6  0000257a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  0080008c  0080008c  000025a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c2b  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eac  00000000  00000000  000055d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028aa  00000000  00000000  00006483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f2c  00000000  00000000  00008d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d7f  00000000  00000000  00009c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020b2  00000000  00000000  0000b9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000da8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_1>
       8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_4>
      14:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_8>
      24:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_9>
      28:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_10>
      2c:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_13>
      38:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_18>
      4c:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 0c 	call	0x1968	; 0x1968 <main>
      8a:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
} 

u8 ADC_u8IsConversionComplete()
{
	return 	(!(_ADC->ADCSRA&(1<<ADCSRA_ADIF))); 
}
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <ADC_voidInit+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	84 e2       	ldi	r24, 0x24	; 36
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	24 e2       	ldi	r18, 0x24	; 36
      a6:	30 e0       	ldi	r19, 0x00	; 0
      a8:	f9 01       	movw	r30, r18
      aa:	43 81       	ldd	r20, Z+3	; 0x03
      ac:	29 81       	ldd	r18, Y+1	; 0x01
      ae:	3a 81       	ldd	r19, Y+2	; 0x02
      b0:	f9 01       	movw	r30, r18
      b2:	20 81       	ld	r18, Z
      b4:	24 2b       	or	r18, r20
      b6:	fc 01       	movw	r30, r24
      b8:	23 83       	std	Z+3, r18	; 0x03
      ba:	84 e2       	ldi	r24, 0x24	; 36
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	24 e2       	ldi	r18, 0x24	; 36
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	f9 01       	movw	r30, r18
      c4:	42 81       	ldd	r20, Z+2	; 0x02
      c6:	29 81       	ldd	r18, Y+1	; 0x01
      c8:	3a 81       	ldd	r19, Y+2	; 0x02
      ca:	f9 01       	movw	r30, r18
      cc:	21 81       	ldd	r18, Z+1	; 0x01
      ce:	24 2b       	or	r18, r20
      d0:	fc 01       	movw	r30, r24
      d2:	22 83       	std	Z+2, r18	; 0x02
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	9a 81       	ldd	r25, Y+2	; 0x02
      d8:	fc 01       	movw	r30, r24
      da:	82 81       	ldd	r24, Z+2	; 0x02
      dc:	88 23       	and	r24, r24
      de:	51 f4       	brne	.+20     	; 0xf4 <ADC_voidInit+0x62>
      e0:	84 e2       	ldi	r24, 0x24	; 36
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	24 e2       	ldi	r18, 0x24	; 36
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	22 81       	ldd	r18, Z+2	; 0x02
      ec:	20 62       	ori	r18, 0x20	; 32
      ee:	fc 01       	movw	r30, r24
      f0:	22 83       	std	Z+2, r18	; 0x02
      f2:	09 c0       	rjmp	.+18     	; 0x106 <ADC_voidInit+0x74>
      f4:	84 e2       	ldi	r24, 0x24	; 36
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	24 e2       	ldi	r18, 0x24	; 36
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	22 81       	ldd	r18, Z+2	; 0x02
     100:	2f 7d       	andi	r18, 0xDF	; 223
     102:	fc 01       	movw	r30, r24
     104:	22 83       	std	Z+2, r18	; 0x02
     106:	84 e2       	ldi	r24, 0x24	; 36
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	24 e2       	ldi	r18, 0x24	; 36
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	f9 01       	movw	r30, r18
     110:	42 81       	ldd	r20, Z+2	; 0x02
     112:	29 81       	ldd	r18, Y+1	; 0x01
     114:	3a 81       	ldd	r19, Y+2	; 0x02
     116:	f9 01       	movw	r30, r18
     118:	23 81       	ldd	r18, Z+3	; 0x03
     11a:	24 2b       	or	r18, r20
     11c:	fc 01       	movw	r30, r24
     11e:	22 83       	std	Z+2, r18	; 0x02
     120:	84 e2       	ldi	r24, 0x24	; 36
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	24 e2       	ldi	r18, 0x24	; 36
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	f9 01       	movw	r30, r18
     12a:	22 81       	ldd	r18, Z+2	; 0x02
     12c:	20 68       	ori	r18, 0x80	; 128
     12e:	fc 01       	movw	r30, r24
     130:	22 83       	std	Z+2, r18	; 0x02
     132:	00 00       	nop
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <ADC_voidEnable>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	84 e2       	ldi	r24, 0x24	; 36
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	24 e2       	ldi	r18, 0x24	; 36
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	22 81       	ldd	r18, Z+2	; 0x02
     152:	20 68       	ori	r18, 0x80	; 128
     154:	fc 01       	movw	r30, r24
     156:	22 83       	std	Z+2, r18	; 0x02
     158:	00 00       	nop
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <ADC_voidSetInterruptStates>:
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	1f 92       	push	r1
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	84 e2       	ldi	r24, 0x24	; 36
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	24 e2       	ldi	r18, 0x24	; 36
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	f9 01       	movw	r30, r18
     176:	22 81       	ldd	r18, Z+2	; 0x02
     178:	27 7f       	andi	r18, 0xF7	; 247
     17a:	fc 01       	movw	r30, r24
     17c:	22 83       	std	Z+2, r18	; 0x02
     17e:	84 e2       	ldi	r24, 0x24	; 36
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	24 e2       	ldi	r18, 0x24	; 36
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	f9 01       	movw	r30, r18
     188:	32 81       	ldd	r19, Z+2	; 0x02
     18a:	29 81       	ldd	r18, Y+1	; 0x01
     18c:	23 2b       	or	r18, r19
     18e:	fc 01       	movw	r30, r24
     190:	22 83       	std	Z+2, r18	; 0x02
     192:	00 00       	nop
     194:	0f 90       	pop	r0
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <ADC_voidSetIRQ_CallBack>:
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <ADC_voidSetIRQ_CallBack+0x6>
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
     1b2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
     1b6:	00 00       	nop
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <ADC_voidReadVal>:
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <ADC_voidReadVal+0x6>
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <ADC_voidReadVal+0x8>
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	9c 83       	std	Y+4, r25	; 0x04
     1d0:	8b 83       	std	Y+3, r24	; 0x03
     1d2:	84 e2       	ldi	r24, 0x24	; 36
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	9a 83       	std	Y+2, r25	; 0x02
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
     1e4:	9c 01       	movw	r18, r24
     1e6:	33 70       	andi	r19, 0x03	; 3
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	fc 01       	movw	r30, r24
     1ee:	31 83       	std	Z+1, r19	; 0x01
     1f0:	20 83       	st	Z, r18
     1f2:	00 00       	nop
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <ADC_voidStartConvertionAsynch>:
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	0e 94 9f 00 	call	0x13e	; 0x13e <ADC_voidEnable>
     212:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     216:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
     21a:	89 2b       	or	r24, r25
     21c:	99 f0       	breq	.+38     	; 0x244 <ADC_voidStartConvertionAsynch+0x42>
     21e:	84 e2       	ldi	r24, 0x24	; 36
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	24 e2       	ldi	r18, 0x24	; 36
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	33 81       	ldd	r19, Z+3	; 0x03
     22a:	29 81       	ldd	r18, Y+1	; 0x01
     22c:	23 2b       	or	r18, r19
     22e:	fc 01       	movw	r30, r24
     230:	23 83       	std	Z+3, r18	; 0x03
     232:	84 e2       	ldi	r24, 0x24	; 36
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	24 e2       	ldi	r18, 0x24	; 36
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	f9 01       	movw	r30, r18
     23c:	22 81       	ldd	r18, Z+2	; 0x02
     23e:	20 64       	ori	r18, 0x40	; 64
     240:	fc 01       	movw	r30, r24
     242:	22 83       	std	Z+2, r18	; 0x02
     244:	00 00       	nop
     246:	0f 90       	pop	r0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <__vector_14>:
/************************************ IRQs *************************************************/
void __vector_14(void)
{
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	2f 93       	push	r18
     25c:	3f 93       	push	r19
     25e:	4f 93       	push	r20
     260:	5f 93       	push	r21
     262:	6f 93       	push	r22
     264:	7f 93       	push	r23
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	af 93       	push	r26
     26c:	bf 93       	push	r27
     26e:	ef 93       	push	r30
     270:	ff 93       	push	r31
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
    __CMPLT_CONVERSION_ADC__();
     27a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     27e:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
     282:	fc 01       	movw	r30, r24
     284:	09 95       	icall
    // ADIF is cleared by writing a logical one to the flag. Beware that if doing a Read-Modify-Write on ADCSRA
}
     286:	00 00       	nop
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	ff 91       	pop	r31
     28e:	ef 91       	pop	r30
     290:	bf 91       	pop	r27
     292:	af 91       	pop	r26
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	7f 91       	pop	r23
     29a:	6f 91       	pop	r22
     29c:	5f 91       	pop	r21
     29e:	4f 91       	pop	r20
     2a0:	3f 91       	pop	r19
     2a2:	2f 91       	pop	r18
     2a4:	0f 90       	pop	r0
     2a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <EXTINT_voidGlobalIntEnable>:
		break ;

	}
}
void EXTINT_voidGlobalIntEnable(void)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
	/*	ENABLE GLOBAL INTTERUPT	*/
	SET_BIT(SREG,SREG_GIE);
     2b8:	8f e5       	ldi	r24, 0x5F	; 95
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	2f e5       	ldi	r18, 0x5F	; 95
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	f9 01       	movw	r30, r18
     2c2:	20 81       	ld	r18, Z
     2c4:	20 68       	ori	r18, 0x80	; 128
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
}
     2ca:	00 00       	nop
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <__vector_1>:


void __vector_1(void)
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
	Callback_INT0();	
     2fe:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Callback_INT0>
     302:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <Callback_INT0+0x1>
     306:	fc 01       	movw	r30, r24
     308:	09 95       	icall
}
     30a:	00 00       	nop
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	ff 91       	pop	r31
     312:	ef 91       	pop	r30
     314:	bf 91       	pop	r27
     316:	af 91       	pop	r26
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	7f 91       	pop	r23
     31e:	6f 91       	pop	r22
     320:	5f 91       	pop	r21
     322:	4f 91       	pop	r20
     324:	3f 91       	pop	r19
     326:	2f 91       	pop	r18
     328:	0f 90       	pop	r0
     32a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <__vector_2>:

void __vector_2(void)
{
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	2f 93       	push	r18
     342:	3f 93       	push	r19
     344:	4f 93       	push	r20
     346:	5f 93       	push	r21
     348:	6f 93       	push	r22
     34a:	7f 93       	push	r23
     34c:	8f 93       	push	r24
     34e:	9f 93       	push	r25
     350:	af 93       	push	r26
     352:	bf 93       	push	r27
     354:	ef 93       	push	r30
     356:	ff 93       	push	r31
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
		Callback_INT1();
     360:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Callback_INT1>
     364:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <Callback_INT1+0x1>
     368:	fc 01       	movw	r30, r24
     36a:	09 95       	icall
	
		
}
     36c:	00 00       	nop
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <__vector_18>:

void __vector_18(void)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
	Callback_INT2();
     3c2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Callback_INT2>
     3c6:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <Callback_INT2+0x1>
     3ca:	fc 01       	movw	r30, r24
     3cc:	09 95       	icall
     3ce:	00 00       	nop
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <GPIO_voidSetPinDirection>:
	GPIO_PIND = CLR ;
	
}

void GPIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8PinDirection)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <GPIO_voidSetPinDirection+0x6>
     3fe:	1f 92       	push	r1
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	6a 83       	std	Y+2, r22	; 0x02
     408:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	88 30       	cpi	r24, 0x08	; 8
     40e:	08 f0       	brcs	.+2      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
     410:	f5 c1       	rjmp	.+1002   	; 0x7fc <__stack+0x39d>
	{
		switch(copy_u8PortId)
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	91 05       	cpc	r25, r1
     41c:	09 f4       	brne	.+2      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
     41e:	86 c0       	rjmp	.+268    	; 0x52c <__stack+0xcd>
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	91 05       	cpc	r25, r1
     424:	1c f4       	brge	.+6      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
     426:	89 2b       	or	r24, r25
     428:	49 f0       	breq	.+18     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
     42a:	e8 c1       	rjmp	.+976    	; 0x7fc <__stack+0x39d>

void GPIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8PinDirection)
{
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	91 05       	cpc	r25, r1
     430:	09 f4       	brne	.+2      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     432:	f4 c0       	rjmp	.+488    	; 0x61c <__stack+0x1bd>
     434:	03 97       	sbiw	r24, 0x03	; 3
     436:	09 f4       	brne	.+2      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     438:	69 c1       	rjmp	.+722    	; 0x70c <__stack+0x2ad>
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
     43a:	e0 c1       	rjmp	.+960    	; 0x7fc <__stack+0x39d>
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
		{
			case PORTA :
				switch(copy_u8PinDirection)
     43c:	8b 81       	ldd	r24, Y+3	; 0x03
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	91 05       	cpc	r25, r1
     446:	09 f4       	brne	.+2      	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
     448:	5b c0       	rjmp	.+182    	; 0x500 <__stack+0xa1>
     44a:	82 30       	cpi	r24, 0x02	; 2
     44c:	91 05       	cpc	r25, r1
     44e:	71 f1       	breq	.+92     	; 0x4ac <__stack+0x4d>
     450:	89 2b       	or	r24, r25
     452:	09 f0       	breq	.+2      	; 0x456 <__DATA_REGION_LENGTH__+0x56>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRA,copy_u8PinNumber);
						break;
					default:	break ;
     454:	6a c0       	rjmp	.+212    	; 0x52a <__stack+0xcb>
			case PORTA :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRA,copy_u8PinNumber);
     456:	8a e3       	ldi	r24, 0x3A	; 58
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2a e3       	ldi	r18, 0x3A	; 58
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	62 2f       	mov	r22, r18
     464:	2a 81       	ldd	r18, Y+2	; 0x02
     466:	42 2f       	mov	r20, r18
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__stack+0x15>
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	4a 95       	dec	r20
     476:	e2 f7       	brpl	.-8      	; 0x470 <__stack+0x11>
     478:	20 95       	com	r18
     47a:	26 23       	and	r18, r22
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
     480:	8b e3       	ldi	r24, 0x3B	; 59
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	2b e3       	ldi	r18, 0x3B	; 59
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	62 2f       	mov	r22, r18
     48e:	2a 81       	ldd	r18, Y+2	; 0x02
     490:	42 2f       	mov	r20, r18
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	02 c0       	rjmp	.+4      	; 0x49e <__stack+0x3f>
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	4a 95       	dec	r20
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <__stack+0x3b>
     4a2:	20 95       	com	r18
     4a4:	26 23       	and	r18, r22
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
						break;
     4aa:	3f c0       	rjmp	.+126    	; 0x52a <__stack+0xcb>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRA,copy_u8PinNumber);
     4ac:	8a e3       	ldi	r24, 0x3A	; 58
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	2a e3       	ldi	r18, 0x3A	; 58
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	20 81       	ld	r18, Z
     4b8:	62 2f       	mov	r22, r18
     4ba:	2a 81       	ldd	r18, Y+2	; 0x02
     4bc:	42 2f       	mov	r20, r18
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__stack+0x6b>
     4c6:	22 0f       	add	r18, r18
     4c8:	33 1f       	adc	r19, r19
     4ca:	4a 95       	dec	r20
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__stack+0x67>
     4ce:	20 95       	com	r18
     4d0:	26 23       	and	r18, r22
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTA,copy_u8PinNumber);
     4d6:	8b e3       	ldi	r24, 0x3B	; 59
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	2b e3       	ldi	r18, 0x3B	; 59
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	62 2f       	mov	r22, r18
     4e4:	2a 81       	ldd	r18, Y+2	; 0x02
     4e6:	42 2f       	mov	r20, r18
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__stack+0x95>
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	4a 95       	dec	r20
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__stack+0x91>
     4f8:	26 2b       	or	r18, r22
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
						break;
     4fe:	15 c0       	rjmp	.+42     	; 0x52a <__stack+0xcb>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRA,copy_u8PinNumber);
     500:	8a e3       	ldi	r24, 0x3A	; 58
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2a e3       	ldi	r18, 0x3A	; 58
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	20 81       	ld	r18, Z
     50c:	62 2f       	mov	r22, r18
     50e:	2a 81       	ldd	r18, Y+2	; 0x02
     510:	42 2f       	mov	r20, r18
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	02 c0       	rjmp	.+4      	; 0x51e <__stack+0xbf>
     51a:	22 0f       	add	r18, r18
     51c:	33 1f       	adc	r19, r19
     51e:	4a 95       	dec	r20
     520:	e2 f7       	brpl	.-8      	; 0x51a <__stack+0xbb>
     522:	26 2b       	or	r18, r22
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
						break;
     528:	00 00       	nop
					default:	break ;
				}
				break ;
     52a:	68 c1       	rjmp	.+720    	; 0x7fc <__stack+0x39d>
			case PORTB :
				switch(copy_u8PinDirection)
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	91 05       	cpc	r25, r1
     536:	09 f4       	brne	.+2      	; 0x53a <__stack+0xdb>
     538:	5b c0       	rjmp	.+182    	; 0x5f0 <__stack+0x191>
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	91 05       	cpc	r25, r1
     53e:	71 f1       	breq	.+92     	; 0x59c <__stack+0x13d>
     540:	89 2b       	or	r24, r25
     542:	09 f0       	breq	.+2      	; 0x546 <__stack+0xe7>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRB,copy_u8PinNumber);
						break;
					default:	break ;
     544:	6a c0       	rjmp	.+212    	; 0x61a <__stack+0x1bb>
			case PORTB :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRB,copy_u8PinNumber);
     546:	87 e3       	ldi	r24, 0x37	; 55
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	27 e3       	ldi	r18, 0x37	; 55
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	62 2f       	mov	r22, r18
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	42 2f       	mov	r20, r18
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	21 e0       	ldi	r18, 0x01	; 1
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	02 c0       	rjmp	.+4      	; 0x564 <__stack+0x105>
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	4a 95       	dec	r20
     566:	e2 f7       	brpl	.-8      	; 0x560 <__stack+0x101>
     568:	20 95       	com	r18
     56a:	26 23       	and	r18, r22
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	28 e3       	ldi	r18, 0x38	; 56
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	62 2f       	mov	r22, r18
     57e:	2a 81       	ldd	r18, Y+2	; 0x02
     580:	42 2f       	mov	r20, r18
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <__stack+0x12f>
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	4a 95       	dec	r20
     590:	e2 f7       	brpl	.-8      	; 0x58a <__stack+0x12b>
     592:	20 95       	com	r18
     594:	26 23       	and	r18, r22
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
						break;
     59a:	3f c0       	rjmp	.+126    	; 0x61a <__stack+0x1bb>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRB,copy_u8PinNumber);
     59c:	87 e3       	ldi	r24, 0x37	; 55
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	27 e3       	ldi	r18, 0x37	; 55
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	20 81       	ld	r18, Z
     5a8:	62 2f       	mov	r22, r18
     5aa:	2a 81       	ldd	r18, Y+2	; 0x02
     5ac:	42 2f       	mov	r20, r18
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__stack+0x15b>
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	4a 95       	dec	r20
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <__stack+0x157>
     5be:	20 95       	com	r18
     5c0:	26 23       	and	r18, r22
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTB,copy_u8PinNumber);
     5c6:	88 e3       	ldi	r24, 0x38	; 56
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	28 e3       	ldi	r18, 0x38	; 56
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	62 2f       	mov	r22, r18
     5d4:	2a 81       	ldd	r18, Y+2	; 0x02
     5d6:	42 2f       	mov	r20, r18
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__stack+0x185>
     5e0:	22 0f       	add	r18, r18
     5e2:	33 1f       	adc	r19, r19
     5e4:	4a 95       	dec	r20
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <__stack+0x181>
     5e8:	26 2b       	or	r18, r22
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
						break;
     5ee:	15 c0       	rjmp	.+42     	; 0x61a <__stack+0x1bb>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRB,copy_u8PinNumber);
     5f0:	87 e3       	ldi	r24, 0x37	; 55
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	27 e3       	ldi	r18, 0x37	; 55
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	62 2f       	mov	r22, r18
     5fe:	2a 81       	ldd	r18, Y+2	; 0x02
     600:	42 2f       	mov	r20, r18
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	02 c0       	rjmp	.+4      	; 0x60e <__stack+0x1af>
     60a:	22 0f       	add	r18, r18
     60c:	33 1f       	adc	r19, r19
     60e:	4a 95       	dec	r20
     610:	e2 f7       	brpl	.-8      	; 0x60a <__stack+0x1ab>
     612:	26 2b       	or	r18, r22
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
						break;
     618:	00 00       	nop
					default:	break ;
				}	
				break ;
     61a:	f0 c0       	rjmp	.+480    	; 0x7fc <__stack+0x39d>
			case PORTC :
				switch(copy_u8PinDirection)
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	88 2f       	mov	r24, r24
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	91 05       	cpc	r25, r1
     626:	09 f4       	brne	.+2      	; 0x62a <__stack+0x1cb>
     628:	5b c0       	rjmp	.+182    	; 0x6e0 <__stack+0x281>
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	91 05       	cpc	r25, r1
     62e:	71 f1       	breq	.+92     	; 0x68c <__stack+0x22d>
     630:	89 2b       	or	r24, r25
     632:	09 f0       	breq	.+2      	; 0x636 <__stack+0x1d7>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRC,copy_u8PinNumber);
						break;
					default:	break ;
     634:	6a c0       	rjmp	.+212    	; 0x70a <__stack+0x2ab>
			case PORTC :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRC,copy_u8PinNumber);
     636:	84 e3       	ldi	r24, 0x34	; 52
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	24 e3       	ldi	r18, 0x34	; 52
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	62 2f       	mov	r22, r18
     644:	2a 81       	ldd	r18, Y+2	; 0x02
     646:	42 2f       	mov	r20, r18
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	02 c0       	rjmp	.+4      	; 0x654 <__stack+0x1f5>
     650:	22 0f       	add	r18, r18
     652:	33 1f       	adc	r19, r19
     654:	4a 95       	dec	r20
     656:	e2 f7       	brpl	.-8      	; 0x650 <__stack+0x1f1>
     658:	20 95       	com	r18
     65a:	26 23       	and	r18, r22
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
     660:	85 e3       	ldi	r24, 0x35	; 53
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	25 e3       	ldi	r18, 0x35	; 53
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	f9 01       	movw	r30, r18
     66a:	20 81       	ld	r18, Z
     66c:	62 2f       	mov	r22, r18
     66e:	2a 81       	ldd	r18, Y+2	; 0x02
     670:	42 2f       	mov	r20, r18
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <__stack+0x21f>
     67a:	22 0f       	add	r18, r18
     67c:	33 1f       	adc	r19, r19
     67e:	4a 95       	dec	r20
     680:	e2 f7       	brpl	.-8      	; 0x67a <__stack+0x21b>
     682:	20 95       	com	r18
     684:	26 23       	and	r18, r22
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
						break;
     68a:	3f c0       	rjmp	.+126    	; 0x70a <__stack+0x2ab>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRC,copy_u8PinNumber);
     68c:	84 e3       	ldi	r24, 0x34	; 52
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	24 e3       	ldi	r18, 0x34	; 52
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	62 2f       	mov	r22, r18
     69a:	2a 81       	ldd	r18, Y+2	; 0x02
     69c:	42 2f       	mov	r20, r18
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <__stack+0x24b>
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	4a 95       	dec	r20
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <__stack+0x247>
     6ae:	20 95       	com	r18
     6b0:	26 23       	and	r18, r22
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTC,copy_u8PinNumber);
     6b6:	85 e3       	ldi	r24, 0x35	; 53
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	25 e3       	ldi	r18, 0x35	; 53
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	62 2f       	mov	r22, r18
     6c4:	2a 81       	ldd	r18, Y+2	; 0x02
     6c6:	42 2f       	mov	r20, r18
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__stack+0x275>
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	4a 95       	dec	r20
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <__stack+0x271>
     6d8:	26 2b       	or	r18, r22
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
						break;
     6de:	15 c0       	rjmp	.+42     	; 0x70a <__stack+0x2ab>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRC,copy_u8PinNumber);
     6e0:	84 e3       	ldi	r24, 0x34	; 52
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	24 e3       	ldi	r18, 0x34	; 52
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	f9 01       	movw	r30, r18
     6ea:	20 81       	ld	r18, Z
     6ec:	62 2f       	mov	r22, r18
     6ee:	2a 81       	ldd	r18, Y+2	; 0x02
     6f0:	42 2f       	mov	r20, r18
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__stack+0x29f>
     6fa:	22 0f       	add	r18, r18
     6fc:	33 1f       	adc	r19, r19
     6fe:	4a 95       	dec	r20
     700:	e2 f7       	brpl	.-8      	; 0x6fa <__stack+0x29b>
     702:	26 2b       	or	r18, r22
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
						break;
     708:	00 00       	nop
					default:	break ;
				}
				break ;
     70a:	78 c0       	rjmp	.+240    	; 0x7fc <__stack+0x39d>
			case PORTD :
				switch(copy_u8PinDirection)
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	91 05       	cpc	r25, r1
     716:	09 f4       	brne	.+2      	; 0x71a <__stack+0x2bb>
     718:	5b c0       	rjmp	.+182    	; 0x7d0 <__stack+0x371>
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	91 05       	cpc	r25, r1
     71e:	71 f1       	breq	.+92     	; 0x77c <__stack+0x31d>
     720:	89 2b       	or	r24, r25
     722:	09 f0       	breq	.+2      	; 0x726 <__stack+0x2c7>
						break;
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
						break;
					default:	break ;
     724:	6a c0       	rjmp	.+212    	; 0x7fa <__stack+0x39b>
			case PORTD :
				switch(copy_u8PinDirection)
				{
					case INPUT_FLOAT:
						/*	CLEAR DDxn AND PORTxn	*/
						CLR_BIT(GPIO_DDRD,copy_u8PinNumber);
     726:	81 e3       	ldi	r24, 0x31	; 49
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	21 e3       	ldi	r18, 0x31	; 49
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	20 81       	ld	r18, Z
     732:	62 2f       	mov	r22, r18
     734:	2a 81       	ldd	r18, Y+2	; 0x02
     736:	42 2f       	mov	r20, r18
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	02 c0       	rjmp	.+4      	; 0x744 <__stack+0x2e5>
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	4a 95       	dec	r20
     746:	e2 f7       	brpl	.-8      	; 0x740 <__stack+0x2e1>
     748:	20 95       	com	r18
     74a:	26 23       	and	r18, r22
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
     750:	82 e3       	ldi	r24, 0x32	; 50
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	22 e3       	ldi	r18, 0x32	; 50
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	f9 01       	movw	r30, r18
     75a:	20 81       	ld	r18, Z
     75c:	62 2f       	mov	r22, r18
     75e:	2a 81       	ldd	r18, Y+2	; 0x02
     760:	42 2f       	mov	r20, r18
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	02 c0       	rjmp	.+4      	; 0x76e <__stack+0x30f>
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	4a 95       	dec	r20
     770:	e2 f7       	brpl	.-8      	; 0x76a <__stack+0x30b>
     772:	20 95       	com	r18
     774:	26 23       	and	r18, r22
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
						break;
     77a:	3f c0       	rjmp	.+126    	; 0x7fa <__stack+0x39b>
					case INPUT_PULLUP:
						/*	CLEAR DDxn AND SET PORTxn	*/
						CLR_BIT(GPIO_DDRD,copy_u8PinNumber);
     77c:	81 e3       	ldi	r24, 0x31	; 49
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	21 e3       	ldi	r18, 0x31	; 49
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	62 2f       	mov	r22, r18
     78a:	2a 81       	ldd	r18, Y+2	; 0x02
     78c:	42 2f       	mov	r20, r18
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <__stack+0x33b>
     796:	22 0f       	add	r18, r18
     798:	33 1f       	adc	r19, r19
     79a:	4a 95       	dec	r20
     79c:	e2 f7       	brpl	.-8      	; 0x796 <__stack+0x337>
     79e:	20 95       	com	r18
     7a0:	26 23       	and	r18, r22
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
						SET_BIT(GPIO_PORTD,copy_u8PinNumber);
     7a6:	82 e3       	ldi	r24, 0x32	; 50
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	22 e3       	ldi	r18, 0x32	; 50
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	62 2f       	mov	r22, r18
     7b4:	2a 81       	ldd	r18, Y+2	; 0x02
     7b6:	42 2f       	mov	r20, r18
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <__stack+0x365>
     7c0:	22 0f       	add	r18, r18
     7c2:	33 1f       	adc	r19, r19
     7c4:	4a 95       	dec	r20
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <__stack+0x361>
     7c8:	26 2b       	or	r18, r22
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
						break;
     7ce:	15 c0       	rjmp	.+42     	; 0x7fa <__stack+0x39b>
					case OUTPUT:	
						/* SET DDxn	*/
						SET_BIT(GPIO_DDRD,copy_u8PinNumber);
     7d0:	81 e3       	ldi	r24, 0x31	; 49
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	21 e3       	ldi	r18, 0x31	; 49
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	62 2f       	mov	r22, r18
     7de:	2a 81       	ldd	r18, Y+2	; 0x02
     7e0:	42 2f       	mov	r20, r18
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__stack+0x38f>
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	4a 95       	dec	r20
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <__stack+0x38b>
     7f2:	26 2b       	or	r18, r22
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
						break;
     7f8:	00 00       	nop
					default:	break ;
				}
				break ;
     7fa:	00 00       	nop
	}
	else
	{
		//<!TODO> ERROR STATE
	}
}
     7fc:	00 00       	nop
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8Value)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	00 d0       	rcall	.+0      	; 0x810 <GPIO_voidSetPinValue+0x6>
     810:	1f 92       	push	r1
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	6a 83       	std	Y+2, r22	; 0x02
     81a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
     81e:	88 30       	cpi	r24, 0x08	; 8
     820:	08 f0       	brcs	.+2      	; 0x824 <GPIO_voidSetPinValue+0x1a>
     822:	e5 c0       	rjmp	.+458    	; 0x9ee <GPIO_voidSetPinValue+0x1e4>
	{
		switch(copy_u8PortId)
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	91 05       	cpc	r25, r1
     82e:	09 f4       	brne	.+2      	; 0x832 <GPIO_voidSetPinValue+0x28>
     830:	42 c0       	rjmp	.+132    	; 0x8b6 <GPIO_voidSetPinValue+0xac>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	91 05       	cpc	r25, r1
     836:	1c f4       	brge	.+6      	; 0x83e <GPIO_voidSetPinValue+0x34>
     838:	89 2b       	or	r24, r25
     83a:	49 f0       	breq	.+18     	; 0x84e <GPIO_voidSetPinValue+0x44>
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
     83c:	d8 c0       	rjmp	.+432    	; 0x9ee <GPIO_voidSetPinValue+0x1e4>
}
void GPIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinNumber ,u8 copy_u8Value)
{
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	91 05       	cpc	r25, r1
     842:	09 f4       	brne	.+2      	; 0x846 <GPIO_voidSetPinValue+0x3c>
     844:	6c c0       	rjmp	.+216    	; 0x91e <GPIO_voidSetPinValue+0x114>
     846:	03 97       	sbiw	r24, 0x03	; 3
     848:	09 f4       	brne	.+2      	; 0x84c <GPIO_voidSetPinValue+0x42>
     84a:	9d c0       	rjmp	.+314    	; 0x986 <GPIO_voidSetPinValue+0x17c>
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
				}
				break ;
			default: break ;
     84c:	d0 c0       	rjmp	.+416    	; 0x9ee <GPIO_voidSetPinValue+0x1e4>
	if(copy_u8PinNumber >= GPIO_FIRST_PIN && copy_u8PinNumber <= GPIO_LAST_PIN)
	{
		switch(copy_u8PortId)
		{
			case PORTA :
				switch(copy_u8Value)
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	88 2f       	mov	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	c1 f0       	breq	.+48     	; 0x888 <GPIO_voidSetPinValue+0x7e>
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	09 f0       	breq	.+2      	; 0x85e <GPIO_voidSetPinValue+0x54>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
						break;
					default:	break ;
     85c:	2b c0       	rjmp	.+86     	; 0x8b4 <GPIO_voidSetPinValue+0xaa>
			case PORTA :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTA,copy_u8PinNumber);
     85e:	8b e3       	ldi	r24, 0x3B	; 59
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	2b e3       	ldi	r18, 0x3B	; 59
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f9 01       	movw	r30, r18
     868:	20 81       	ld	r18, Z
     86a:	62 2f       	mov	r22, r18
     86c:	2a 81       	ldd	r18, Y+2	; 0x02
     86e:	42 2f       	mov	r20, r18
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	02 c0       	rjmp	.+4      	; 0x87c <GPIO_voidSetPinValue+0x72>
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	4a 95       	dec	r20
     87e:	e2 f7       	brpl	.-8      	; 0x878 <GPIO_voidSetPinValue+0x6e>
     880:	26 2b       	or	r18, r22
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
						break;
     886:	16 c0       	rjmp	.+44     	; 0x8b4 <GPIO_voidSetPinValue+0xaa>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTA,copy_u8PinNumber);
     888:	8b e3       	ldi	r24, 0x3B	; 59
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	2b e3       	ldi	r18, 0x3B	; 59
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	f9 01       	movw	r30, r18
     892:	20 81       	ld	r18, Z
     894:	62 2f       	mov	r22, r18
     896:	2a 81       	ldd	r18, Y+2	; 0x02
     898:	42 2f       	mov	r20, r18
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <GPIO_voidSetPinValue+0x9c>
     8a2:	22 0f       	add	r18, r18
     8a4:	33 1f       	adc	r19, r19
     8a6:	4a 95       	dec	r20
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <GPIO_voidSetPinValue+0x98>
     8aa:	20 95       	com	r18
     8ac:	26 23       	and	r18, r22
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
						break;
     8b2:	00 00       	nop
					default:	break ;
				}
				break ;
     8b4:	9c c0       	rjmp	.+312    	; 0x9ee <GPIO_voidSetPinValue+0x1e4>
			case PORTB : 
				switch(copy_u8Value)
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	c1 f0       	breq	.+48     	; 0x8f0 <GPIO_voidSetPinValue+0xe6>
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <GPIO_voidSetPinValue+0xbc>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
						break;
					default:	break ;
     8c4:	2b c0       	rjmp	.+86     	; 0x91c <GPIO_voidSetPinValue+0x112>
			case PORTB : 
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTB,copy_u8PinNumber);
     8c6:	88 e3       	ldi	r24, 0x38	; 56
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	28 e3       	ldi	r18, 0x38	; 56
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	62 2f       	mov	r22, r18
     8d4:	2a 81       	ldd	r18, Y+2	; 0x02
     8d6:	42 2f       	mov	r20, r18
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <GPIO_voidSetPinValue+0xda>
     8e0:	22 0f       	add	r18, r18
     8e2:	33 1f       	adc	r19, r19
     8e4:	4a 95       	dec	r20
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <GPIO_voidSetPinValue+0xd6>
     8e8:	26 2b       	or	r18, r22
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
						break;
     8ee:	16 c0       	rjmp	.+44     	; 0x91c <GPIO_voidSetPinValue+0x112>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTB,copy_u8PinNumber);
     8f0:	88 e3       	ldi	r24, 0x38	; 56
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	28 e3       	ldi	r18, 0x38	; 56
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	62 2f       	mov	r22, r18
     8fe:	2a 81       	ldd	r18, Y+2	; 0x02
     900:	42 2f       	mov	r20, r18
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	02 c0       	rjmp	.+4      	; 0x90e <GPIO_voidSetPinValue+0x104>
     90a:	22 0f       	add	r18, r18
     90c:	33 1f       	adc	r19, r19
     90e:	4a 95       	dec	r20
     910:	e2 f7       	brpl	.-8      	; 0x90a <GPIO_voidSetPinValue+0x100>
     912:	20 95       	com	r18
     914:	26 23       	and	r18, r22
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
						break;
     91a:	00 00       	nop
					default:	break ;
				}
				break ;
     91c:	68 c0       	rjmp	.+208    	; 0x9ee <GPIO_voidSetPinValue+0x1e4>
			case PORTC :
				switch(copy_u8Value)
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	c1 f0       	breq	.+48     	; 0x958 <GPIO_voidSetPinValue+0x14e>
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	09 f0       	breq	.+2      	; 0x92e <GPIO_voidSetPinValue+0x124>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
						break;
					default:	break ;
     92c:	2b c0       	rjmp	.+86     	; 0x984 <GPIO_voidSetPinValue+0x17a>
			case PORTC :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTC,copy_u8PinNumber);
     92e:	85 e3       	ldi	r24, 0x35	; 53
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	25 e3       	ldi	r18, 0x35	; 53
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	62 2f       	mov	r22, r18
     93c:	2a 81       	ldd	r18, Y+2	; 0x02
     93e:	42 2f       	mov	r20, r18
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	02 c0       	rjmp	.+4      	; 0x94c <GPIO_voidSetPinValue+0x142>
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	4a 95       	dec	r20
     94e:	e2 f7       	brpl	.-8      	; 0x948 <GPIO_voidSetPinValue+0x13e>
     950:	26 2b       	or	r18, r22
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
						break;
     956:	16 c0       	rjmp	.+44     	; 0x984 <GPIO_voidSetPinValue+0x17a>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTC,copy_u8PinNumber);
     958:	85 e3       	ldi	r24, 0x35	; 53
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	25 e3       	ldi	r18, 0x35	; 53
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	f9 01       	movw	r30, r18
     962:	20 81       	ld	r18, Z
     964:	62 2f       	mov	r22, r18
     966:	2a 81       	ldd	r18, Y+2	; 0x02
     968:	42 2f       	mov	r20, r18
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	02 c0       	rjmp	.+4      	; 0x976 <GPIO_voidSetPinValue+0x16c>
     972:	22 0f       	add	r18, r18
     974:	33 1f       	adc	r19, r19
     976:	4a 95       	dec	r20
     978:	e2 f7       	brpl	.-8      	; 0x972 <GPIO_voidSetPinValue+0x168>
     97a:	20 95       	com	r18
     97c:	26 23       	and	r18, r22
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
						break;
     982:	00 00       	nop
					default:	break ;
				}
				break ;
     984:	34 c0       	rjmp	.+104    	; 0x9ee <GPIO_voidSetPinValue+0x1e4>
			case PORTD :
				switch(copy_u8Value)
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	c1 f0       	breq	.+48     	; 0x9c0 <GPIO_voidSetPinValue+0x1b6>
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	09 f0       	breq	.+2      	; 0x996 <GPIO_voidSetPinValue+0x18c>
						break;
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
						break;
					default:	break ;
     994:	2b c0       	rjmp	.+86     	; 0x9ec <GPIO_voidSetPinValue+0x1e2>
			case PORTD :
				switch(copy_u8Value)
				{
					case HIGH:
						/*	SET PORTxn	*/
						SET_BIT(GPIO_PORTD,copy_u8PinNumber);
     996:	82 e3       	ldi	r24, 0x32	; 50
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	22 e3       	ldi	r18, 0x32	; 50
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	62 2f       	mov	r22, r18
     9a4:	2a 81       	ldd	r18, Y+2	; 0x02
     9a6:	42 2f       	mov	r20, r18
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <GPIO_voidSetPinValue+0x1aa>
     9b0:	22 0f       	add	r18, r18
     9b2:	33 1f       	adc	r19, r19
     9b4:	4a 95       	dec	r20
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <GPIO_voidSetPinValue+0x1a6>
     9b8:	26 2b       	or	r18, r22
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
						break;
     9be:	16 c0       	rjmp	.+44     	; 0x9ec <GPIO_voidSetPinValue+0x1e2>
					case LOW:
						/*	CLEAR PORTxn	*/
						CLR_BIT(GPIO_PORTD,copy_u8PinNumber);
     9c0:	82 e3       	ldi	r24, 0x32	; 50
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	22 e3       	ldi	r18, 0x32	; 50
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	62 2f       	mov	r22, r18
     9ce:	2a 81       	ldd	r18, Y+2	; 0x02
     9d0:	42 2f       	mov	r20, r18
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	21 e0       	ldi	r18, 0x01	; 1
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <GPIO_voidSetPinValue+0x1d4>
     9da:	22 0f       	add	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	4a 95       	dec	r20
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <GPIO_voidSetPinValue+0x1d0>
     9e2:	20 95       	com	r18
     9e4:	26 23       	and	r18, r22
     9e6:	fc 01       	movw	r30, r24
     9e8:	20 83       	st	Z, r18
						break;
     9ea:	00 00       	nop
					default:	break ;
				}
				break ;
     9ec:	00 00       	nop
	}
	else
	{
		//<!TODO> ERROR STATE
	}
}
     9ee:	00 00       	nop
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <LCD_voidInit>:
{

	LCD_voidSendChar(ptrLCD,storedCharIndex);
	
	
}
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	60 97       	sbiw	r28, 0x10	; 16
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	98 8b       	std	Y+16, r25	; 0x10
     a12:	8f 87       	std	Y+15, r24	; 0x0f
     a14:	8f 85       	ldd	r24, Y+15	; 0x0f
     a16:	98 89       	ldd	r25, Y+16	; 0x10
     a18:	fc 01       	movw	r30, r24
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	93 81       	ldd	r25, Z+3	; 0x03
     a1e:	05 96       	adiw	r24, 0x05	; 5
     a20:	fc 01       	movw	r30, r24
     a22:	20 81       	ld	r18, Z
     a24:	8f 85       	ldd	r24, Y+15	; 0x0f
     a26:	98 89       	ldd	r25, Y+16	; 0x10
     a28:	fc 01       	movw	r30, r24
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	04 96       	adiw	r24, 0x04	; 4
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	41 e0       	ldi	r20, 0x01	; 1
     a36:	62 2f       	mov	r22, r18
     a38:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <GPIO_voidSetPinDirection>
     a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a3e:	98 89       	ldd	r25, Y+16	; 0x10
     a40:	fc 01       	movw	r30, r24
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	07 96       	adiw	r24, 0x07	; 7
     a48:	fc 01       	movw	r30, r24
     a4a:	20 81       	ld	r18, Z
     a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a4e:	98 89       	ldd	r25, Y+16	; 0x10
     a50:	fc 01       	movw	r30, r24
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	06 96       	adiw	r24, 0x06	; 6
     a58:	fc 01       	movw	r30, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	41 e0       	ldi	r20, 0x01	; 1
     a5e:	62 2f       	mov	r22, r18
     a60:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <GPIO_voidSetPinDirection>
     a64:	8f 85       	ldd	r24, Y+15	; 0x0f
     a66:	98 89       	ldd	r25, Y+16	; 0x10
     a68:	fc 01       	movw	r30, r24
     a6a:	82 81       	ldd	r24, Z+2	; 0x02
     a6c:	93 81       	ldd	r25, Z+3	; 0x03
     a6e:	09 96       	adiw	r24, 0x09	; 9
     a70:	fc 01       	movw	r30, r24
     a72:	20 81       	ld	r18, Z
     a74:	8f 85       	ldd	r24, Y+15	; 0x0f
     a76:	98 89       	ldd	r25, Y+16	; 0x10
     a78:	fc 01       	movw	r30, r24
     a7a:	82 81       	ldd	r24, Z+2	; 0x02
     a7c:	93 81       	ldd	r25, Z+3	; 0x03
     a7e:	08 96       	adiw	r24, 0x08	; 8
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	62 2f       	mov	r22, r18
     a88:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <GPIO_voidSetPinDirection>
     a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a8e:	98 89       	ldd	r25, Y+16	; 0x10
     a90:	fc 01       	movw	r30, r24
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	0b 96       	adiw	r24, 0x0b	; 11
     a98:	fc 01       	movw	r30, r24
     a9a:	20 81       	ld	r18, Z
     a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a9e:	98 89       	ldd	r25, Y+16	; 0x10
     aa0:	fc 01       	movw	r30, r24
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	0a 96       	adiw	r24, 0x0a	; 10
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	62 2f       	mov	r22, r18
     ab0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <GPIO_voidSetPinDirection>
     ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ab6:	98 89       	ldd	r25, Y+16	; 0x10
     ab8:	fc 01       	movw	r30, r24
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	03 96       	adiw	r24, 0x03	; 3
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 81       	ld	r18, Z
     ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac6:	98 89       	ldd	r25, Y+16	; 0x10
     ac8:	fc 01       	movw	r30, r24
     aca:	82 81       	ldd	r24, Z+2	; 0x02
     acc:	93 81       	ldd	r25, Z+3	; 0x03
     ace:	02 96       	adiw	r24, 0x02	; 2
     ad0:	fc 01       	movw	r30, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	62 2f       	mov	r22, r18
     ad8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <GPIO_voidSetPinDirection>
     adc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ade:	98 89       	ldd	r25, Y+16	; 0x10
     ae0:	fc 01       	movw	r30, r24
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	fc 01       	movw	r30, r24
     aea:	20 81       	ld	r18, Z
     aec:	8f 85       	ldd	r24, Y+15	; 0x0f
     aee:	98 89       	ldd	r25, Y+16	; 0x10
     af0:	fc 01       	movw	r30, r24
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	fc 01       	movw	r30, r24
     af8:	80 81       	ld	r24, Z
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	62 2f       	mov	r22, r18
     afe:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <GPIO_voidSetPinDirection>
     b02:	8f 85       	ldd	r24, Y+15	; 0x0f
     b04:	98 89       	ldd	r25, Y+16	; 0x10
     b06:	62 e0       	ldi	r22, 0x02	; 2
     b08:	0e 94 98 09 	call	0x1330	; 0x1330 <LCD_voidWriteCmd>
     b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0e:	98 89       	ldd	r25, Y+16	; 0x10
     b10:	68 e2       	ldi	r22, 0x28	; 40
     b12:	0e 94 98 09 	call	0x1330	; 0x1330 <LCD_voidWriteCmd>
     b16:	8f 85       	ldd	r24, Y+15	; 0x0f
     b18:	98 89       	ldd	r25, Y+16	; 0x10
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	0e 94 98 09 	call	0x1330	; 0x1330 <LCD_voidWriteCmd>
     b20:	8f 85       	ldd	r24, Y+15	; 0x0f
     b22:	98 89       	ldd	r25, Y+16	; 0x10
     b24:	6f e0       	ldi	r22, 0x0F	; 15
     b26:	0e 94 98 09 	call	0x1330	; 0x1330 <LCD_voidWriteCmd>
     b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b2c:	98 89       	ldd	r25, Y+16	; 0x10
     b2e:	60 e8       	ldi	r22, 0x80	; 128
     b30:	0e 94 98 09 	call	0x1330	; 0x1330 <LCD_voidWriteCmd>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e4       	ldi	r27, 0x40	; 64
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	ab 83       	std	Y+3, r26	; 0x03
     b42:	bc 83       	std	Y+4, r27	; 0x04
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	4a e7       	ldi	r20, 0x7A	; 122
     b4a:	55 e4       	ldi	r21, 0x45	; 69
     b4c:	69 81       	ldd	r22, Y+1	; 0x01
     b4e:	7a 81       	ldd	r23, Y+2	; 0x02
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	8d 83       	std	Y+5, r24	; 0x05
     b5e:	9e 83       	std	Y+6, r25	; 0x06
     b60:	af 83       	std	Y+7, r26	; 0x07
     b62:	b8 87       	std	Y+8, r27	; 0x08
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	6d 81       	ldd	r22, Y+5	; 0x05
     b6e:	7e 81       	ldd	r23, Y+6	; 0x06
     b70:	8f 81       	ldd	r24, Y+7	; 0x07
     b72:	98 85       	ldd	r25, Y+8	; 0x08
     b74:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
     b78:	88 23       	and	r24, r24
     b7a:	2c f4       	brge	.+10     	; 0xb86 <LCD_voidInit+0x18a>
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9a 87       	std	Y+10, r25	; 0x0a
     b82:	89 87       	std	Y+9, r24	; 0x09
     b84:	3f c0       	rjmp	.+126    	; 0xc04 <LCD_voidInit+0x208>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	3f ef       	ldi	r19, 0xFF	; 255
     b8a:	4f e7       	ldi	r20, 0x7F	; 127
     b8c:	57 e4       	ldi	r21, 0x47	; 71
     b8e:	6d 81       	ldd	r22, Y+5	; 0x05
     b90:	7e 81       	ldd	r23, Y+6	; 0x06
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	98 85       	ldd	r25, Y+8	; 0x08
     b96:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
     b9a:	18 16       	cp	r1, r24
     b9c:	4c f5       	brge	.+82     	; 0xbf0 <LCD_voidInit+0x1f4>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e2       	ldi	r20, 0x20	; 32
     ba4:	51 e4       	ldi	r21, 0x41	; 65
     ba6:	69 81       	ldd	r22, Y+1	; 0x01
     ba8:	7a 81       	ldd	r23, Y+2	; 0x02
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	bc 01       	movw	r22, r24
     bb8:	cd 01       	movw	r24, r26
     bba:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	9a 87       	std	Y+10, r25	; 0x0a
     bc4:	89 87       	std	Y+9, r24	; 0x09
     bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <LCD_voidInit+0x1ea>
     bc8:	80 e9       	ldi	r24, 0x90	; 144
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	9c 87       	std	Y+12, r25	; 0x0c
     bce:	8b 87       	std	Y+11, r24	; 0x0b
     bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <LCD_voidInit+0x1d8>
     bd8:	9c 87       	std	Y+12, r25	; 0x0c
     bda:	8b 87       	std	Y+11, r24	; 0x0b
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	9a 87       	std	Y+10, r25	; 0x0a
     be4:	89 87       	std	Y+9, r24	; 0x09
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bea:	89 2b       	or	r24, r25
     bec:	69 f7       	brne	.-38     	; 0xbc8 <LCD_voidInit+0x1cc>
     bee:	14 c0       	rjmp	.+40     	; 0xc18 <LCD_voidInit+0x21c>
     bf0:	6d 81       	ldd	r22, Y+5	; 0x05
     bf2:	7e 81       	ldd	r23, Y+6	; 0x06
     bf4:	8f 81       	ldd	r24, Y+7	; 0x07
     bf6:	98 85       	ldd	r25, Y+8	; 0x08
     bf8:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9a 87       	std	Y+10, r25	; 0x0a
     c02:	89 87       	std	Y+9, r24	; 0x09
     c04:	89 85       	ldd	r24, Y+9	; 0x09
     c06:	9a 85       	ldd	r25, Y+10	; 0x0a
     c08:	9e 87       	std	Y+14, r25	; 0x0e
     c0a:	8d 87       	std	Y+13, r24	; 0x0d
     c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <LCD_voidInit+0x214>
     c14:	9e 87       	std	Y+14, r25	; 0x0e
     c16:	8d 87       	std	Y+13, r24	; 0x0d
     c18:	00 00       	nop
     c1a:	60 96       	adiw	r28, 0x10	; 16
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <LCD_voidSendChar>:
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	eb 97       	sbiw	r28, 0x3b	; 59
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	9a af       	std	Y+58, r25	; 0x3a
     c42:	89 af       	std	Y+57, r24	; 0x39
     c44:	6b af       	std	Y+59, r22	; 0x3b
     c46:	8b ad       	ldd	r24, Y+59	; 0x3b
     c48:	82 95       	swap	r24
     c4a:	8f 70       	andi	r24, 0x0F	; 15
     c4c:	38 2f       	mov	r19, r24
     c4e:	31 70       	andi	r19, 0x01	; 1
     c50:	89 ad       	ldd	r24, Y+57	; 0x39
     c52:	9a ad       	ldd	r25, Y+58	; 0x3a
     c54:	fc 01       	movw	r30, r24
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	05 96       	adiw	r24, 0x05	; 5
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 81       	ld	r18, Z
     c60:	89 ad       	ldd	r24, Y+57	; 0x39
     c62:	9a ad       	ldd	r25, Y+58	; 0x3a
     c64:	fc 01       	movw	r30, r24
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	04 96       	adiw	r24, 0x04	; 4
     c6c:	fc 01       	movw	r30, r24
     c6e:	80 81       	ld	r24, Z
     c70:	43 2f       	mov	r20, r19
     c72:	62 2f       	mov	r22, r18
     c74:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     c78:	8b ad       	ldd	r24, Y+59	; 0x3b
     c7a:	82 95       	swap	r24
     c7c:	86 95       	lsr	r24
     c7e:	87 70       	andi	r24, 0x07	; 7
     c80:	38 2f       	mov	r19, r24
     c82:	31 70       	andi	r19, 0x01	; 1
     c84:	89 ad       	ldd	r24, Y+57	; 0x39
     c86:	9a ad       	ldd	r25, Y+58	; 0x3a
     c88:	fc 01       	movw	r30, r24
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	07 96       	adiw	r24, 0x07	; 7
     c90:	fc 01       	movw	r30, r24
     c92:	20 81       	ld	r18, Z
     c94:	89 ad       	ldd	r24, Y+57	; 0x39
     c96:	9a ad       	ldd	r25, Y+58	; 0x3a
     c98:	fc 01       	movw	r30, r24
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	06 96       	adiw	r24, 0x06	; 6
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	43 2f       	mov	r20, r19
     ca6:	62 2f       	mov	r22, r18
     ca8:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     cac:	8b ad       	ldd	r24, Y+59	; 0x3b
     cae:	82 95       	swap	r24
     cb0:	86 95       	lsr	r24
     cb2:	86 95       	lsr	r24
     cb4:	83 70       	andi	r24, 0x03	; 3
     cb6:	38 2f       	mov	r19, r24
     cb8:	31 70       	andi	r19, 0x01	; 1
     cba:	89 ad       	ldd	r24, Y+57	; 0x39
     cbc:	9a ad       	ldd	r25, Y+58	; 0x3a
     cbe:	fc 01       	movw	r30, r24
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	09 96       	adiw	r24, 0x09	; 9
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 81       	ld	r18, Z
     cca:	89 ad       	ldd	r24, Y+57	; 0x39
     ccc:	9a ad       	ldd	r25, Y+58	; 0x3a
     cce:	fc 01       	movw	r30, r24
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	08 96       	adiw	r24, 0x08	; 8
     cd6:	fc 01       	movw	r30, r24
     cd8:	80 81       	ld	r24, Z
     cda:	43 2f       	mov	r20, r19
     cdc:	62 2f       	mov	r22, r18
     cde:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     ce2:	8b ad       	ldd	r24, Y+59	; 0x3b
     ce4:	38 2f       	mov	r19, r24
     ce6:	33 1f       	adc	r19, r19
     ce8:	33 27       	eor	r19, r19
     cea:	33 1f       	adc	r19, r19
     cec:	89 ad       	ldd	r24, Y+57	; 0x39
     cee:	9a ad       	ldd	r25, Y+58	; 0x3a
     cf0:	fc 01       	movw	r30, r24
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0b 96       	adiw	r24, 0x0b	; 11
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 81       	ld	r18, Z
     cfc:	89 ad       	ldd	r24, Y+57	; 0x39
     cfe:	9a ad       	ldd	r25, Y+58	; 0x3a
     d00:	fc 01       	movw	r30, r24
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	0a 96       	adiw	r24, 0x0a	; 10
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	43 2f       	mov	r20, r19
     d0e:	62 2f       	mov	r22, r18
     d10:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     d14:	89 ad       	ldd	r24, Y+57	; 0x39
     d16:	9a ad       	ldd	r25, Y+58	; 0x3a
     d18:	fc 01       	movw	r30, r24
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	03 96       	adiw	r24, 0x03	; 3
     d20:	fc 01       	movw	r30, r24
     d22:	20 81       	ld	r18, Z
     d24:	89 ad       	ldd	r24, Y+57	; 0x39
     d26:	9a ad       	ldd	r25, Y+58	; 0x3a
     d28:	fc 01       	movw	r30, r24
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	02 96       	adiw	r24, 0x02	; 2
     d30:	fc 01       	movw	r30, r24
     d32:	80 81       	ld	r24, Z
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	62 2f       	mov	r22, r18
     d38:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     d3c:	89 ad       	ldd	r24, Y+57	; 0x39
     d3e:	9a ad       	ldd	r25, Y+58	; 0x3a
     d40:	fc 01       	movw	r30, r24
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	fc 01       	movw	r30, r24
     d4a:	20 81       	ld	r18, Z
     d4c:	89 ad       	ldd	r24, Y+57	; 0x39
     d4e:	9a ad       	ldd	r25, Y+58	; 0x3a
     d50:	fc 01       	movw	r30, r24
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	fc 01       	movw	r30, r24
     d58:	80 81       	ld	r24, Z
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	62 2f       	mov	r22, r18
     d5e:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a0 e8       	ldi	r26, 0x80	; 128
     d68:	bf e3       	ldi	r27, 0x3F	; 63
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	ab 83       	std	Y+3, r26	; 0x03
     d70:	bc 83       	std	Y+4, r27	; 0x04
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	4a e7       	ldi	r20, 0x7A	; 122
     d78:	55 e4       	ldi	r21, 0x45	; 69
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	8f a7       	std	Y+47, r24	; 0x2f
     d8c:	98 ab       	std	Y+48, r25	; 0x30
     d8e:	a9 ab       	std	Y+49, r26	; 0x31
     d90:	ba ab       	std	Y+50, r27	; 0x32
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	6f a5       	ldd	r22, Y+47	; 0x2f
     d9c:	78 a9       	ldd	r23, Y+48	; 0x30
     d9e:	89 a9       	ldd	r24, Y+49	; 0x31
     da0:	9a a9       	ldd	r25, Y+50	; 0x32
     da2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
     da6:	88 23       	and	r24, r24
     da8:	2c f4       	brge	.+10     	; 0xdb4 <LCD_voidSendChar+0x188>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9c ab       	std	Y+52, r25	; 0x34
     db0:	8b ab       	std	Y+51, r24	; 0x33
     db2:	3f c0       	rjmp	.+126    	; 0xe32 <LCD_voidSendChar+0x206>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	3f ef       	ldi	r19, 0xFF	; 255
     db8:	4f e7       	ldi	r20, 0x7F	; 127
     dba:	57 e4       	ldi	r21, 0x47	; 71
     dbc:	6f a5       	ldd	r22, Y+47	; 0x2f
     dbe:	78 a9       	ldd	r23, Y+48	; 0x30
     dc0:	89 a9       	ldd	r24, Y+49	; 0x31
     dc2:	9a a9       	ldd	r25, Y+50	; 0x32
     dc4:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
     dc8:	18 16       	cp	r1, r24
     dca:	4c f5       	brge	.+82     	; 0xe1e <LCD_voidSendChar+0x1f2>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e2       	ldi	r20, 0x20	; 32
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	69 81       	ldd	r22, Y+1	; 0x01
     dd6:	7a 81       	ldd	r23, Y+2	; 0x02
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	9c ab       	std	Y+52, r25	; 0x34
     df2:	8b ab       	std	Y+51, r24	; 0x33
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <LCD_voidSendChar+0x1e8>
     df6:	80 e9       	ldi	r24, 0x90	; 144
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	9e ab       	std	Y+54, r25	; 0x36
     dfc:	8d ab       	std	Y+53, r24	; 0x35
     dfe:	8d a9       	ldd	r24, Y+53	; 0x35
     e00:	9e a9       	ldd	r25, Y+54	; 0x36
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <LCD_voidSendChar+0x1d6>
     e06:	9e ab       	std	Y+54, r25	; 0x36
     e08:	8d ab       	std	Y+53, r24	; 0x35
     e0a:	8b a9       	ldd	r24, Y+51	; 0x33
     e0c:	9c a9       	ldd	r25, Y+52	; 0x34
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9c ab       	std	Y+52, r25	; 0x34
     e12:	8b ab       	std	Y+51, r24	; 0x33
     e14:	8b a9       	ldd	r24, Y+51	; 0x33
     e16:	9c a9       	ldd	r25, Y+52	; 0x34
     e18:	89 2b       	or	r24, r25
     e1a:	69 f7       	brne	.-38     	; 0xdf6 <LCD_voidSendChar+0x1ca>
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <LCD_voidSendChar+0x21a>
     e1e:	6f a5       	ldd	r22, Y+47	; 0x2f
     e20:	78 a9       	ldd	r23, Y+48	; 0x30
     e22:	89 a9       	ldd	r24, Y+49	; 0x31
     e24:	9a a9       	ldd	r25, Y+50	; 0x32
     e26:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9c ab       	std	Y+52, r25	; 0x34
     e30:	8b ab       	std	Y+51, r24	; 0x33
     e32:	8b a9       	ldd	r24, Y+51	; 0x33
     e34:	9c a9       	ldd	r25, Y+52	; 0x34
     e36:	98 af       	std	Y+56, r25	; 0x38
     e38:	8f ab       	std	Y+55, r24	; 0x37
     e3a:	8f a9       	ldd	r24, Y+55	; 0x37
     e3c:	98 ad       	ldd	r25, Y+56	; 0x38
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <LCD_voidSendChar+0x212>
     e42:	98 af       	std	Y+56, r25	; 0x38
     e44:	8f ab       	std	Y+55, r24	; 0x37
     e46:	89 ad       	ldd	r24, Y+57	; 0x39
     e48:	9a ad       	ldd	r25, Y+58	; 0x3a
     e4a:	fc 01       	movw	r30, r24
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	fc 01       	movw	r30, r24
     e54:	20 81       	ld	r18, Z
     e56:	89 ad       	ldd	r24, Y+57	; 0x39
     e58:	9a ad       	ldd	r25, Y+58	; 0x3a
     e5a:	fc 01       	movw	r30, r24
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	62 2f       	mov	r22, r18
     e68:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 ea       	ldi	r26, 0xA0	; 160
     e72:	b1 e4       	ldi	r27, 0x41	; 65
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	af 83       	std	Y+7, r26	; 0x07
     e7a:	b8 87       	std	Y+8, r27	; 0x08
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a e7       	ldi	r20, 0x7A	; 122
     e82:	55 e4       	ldi	r21, 0x45	; 69
     e84:	6d 81       	ldd	r22, Y+5	; 0x05
     e86:	7e 81       	ldd	r23, Y+6	; 0x06
     e88:	8f 81       	ldd	r24, Y+7	; 0x07
     e8a:	98 85       	ldd	r25, Y+8	; 0x08
     e8c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8d a3       	std	Y+37, r24	; 0x25
     e96:	9e a3       	std	Y+38, r25	; 0x26
     e98:	af a3       	std	Y+39, r26	; 0x27
     e9a:	b8 a7       	std	Y+40, r27	; 0x28
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e8       	ldi	r20, 0x80	; 128
     ea2:	5f e3       	ldi	r21, 0x3F	; 63
     ea4:	6d a1       	ldd	r22, Y+37	; 0x25
     ea6:	7e a1       	ldd	r23, Y+38	; 0x26
     ea8:	8f a1       	ldd	r24, Y+39	; 0x27
     eaa:	98 a5       	ldd	r25, Y+40	; 0x28
     eac:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <LCD_voidSendChar+0x292>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9a a7       	std	Y+42, r25	; 0x2a
     eba:	89 a7       	std	Y+41, r24	; 0x29
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <LCD_voidSendChar+0x310>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	57 e4       	ldi	r21, 0x47	; 71
     ec6:	6d a1       	ldd	r22, Y+37	; 0x25
     ec8:	7e a1       	ldd	r23, Y+38	; 0x26
     eca:	8f a1       	ldd	r24, Y+39	; 0x27
     ecc:	98 a5       	ldd	r25, Y+40	; 0x28
     ece:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	4c f5       	brge	.+82     	; 0xf28 <LCD_voidSendChar+0x2fc>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e2       	ldi	r20, 0x20	; 32
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	6d 81       	ldd	r22, Y+5	; 0x05
     ee0:	7e 81       	ldd	r23, Y+6	; 0x06
     ee2:	8f 81       	ldd	r24, Y+7	; 0x07
     ee4:	98 85       	ldd	r25, Y+8	; 0x08
     ee6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9a a7       	std	Y+42, r25	; 0x2a
     efc:	89 a7       	std	Y+41, r24	; 0x29
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <LCD_voidSendChar+0x2f2>
     f00:	80 e9       	ldi	r24, 0x90	; 144
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	9c a7       	std	Y+44, r25	; 0x2c
     f06:	8b a7       	std	Y+43, r24	; 0x2b
     f08:	8b a5       	ldd	r24, Y+43	; 0x2b
     f0a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <LCD_voidSendChar+0x2e0>
     f10:	9c a7       	std	Y+44, r25	; 0x2c
     f12:	8b a7       	std	Y+43, r24	; 0x2b
     f14:	89 a5       	ldd	r24, Y+41	; 0x29
     f16:	9a a5       	ldd	r25, Y+42	; 0x2a
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	9a a7       	std	Y+42, r25	; 0x2a
     f1c:	89 a7       	std	Y+41, r24	; 0x29
     f1e:	89 a5       	ldd	r24, Y+41	; 0x29
     f20:	9a a5       	ldd	r25, Y+42	; 0x2a
     f22:	89 2b       	or	r24, r25
     f24:	69 f7       	brne	.-38     	; 0xf00 <LCD_voidSendChar+0x2d4>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <LCD_voidSendChar+0x324>
     f28:	6d a1       	ldd	r22, Y+37	; 0x25
     f2a:	7e a1       	ldd	r23, Y+38	; 0x26
     f2c:	8f a1       	ldd	r24, Y+39	; 0x27
     f2e:	98 a5       	ldd	r25, Y+40	; 0x28
     f30:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9a a7       	std	Y+42, r25	; 0x2a
     f3a:	89 a7       	std	Y+41, r24	; 0x29
     f3c:	89 a5       	ldd	r24, Y+41	; 0x29
     f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f40:	9e a7       	std	Y+46, r25	; 0x2e
     f42:	8d a7       	std	Y+45, r24	; 0x2d
     f44:	8d a5       	ldd	r24, Y+45	; 0x2d
     f46:	9e a5       	ldd	r25, Y+46	; 0x2e
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <LCD_voidSendChar+0x31c>
     f4c:	9e a7       	std	Y+46, r25	; 0x2e
     f4e:	8d a7       	std	Y+45, r24	; 0x2d
     f50:	8b ad       	ldd	r24, Y+59	; 0x3b
     f52:	38 2f       	mov	r19, r24
     f54:	31 70       	andi	r19, 0x01	; 1
     f56:	89 ad       	ldd	r24, Y+57	; 0x39
     f58:	9a ad       	ldd	r25, Y+58	; 0x3a
     f5a:	fc 01       	movw	r30, r24
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	05 96       	adiw	r24, 0x05	; 5
     f62:	fc 01       	movw	r30, r24
     f64:	20 81       	ld	r18, Z
     f66:	89 ad       	ldd	r24, Y+57	; 0x39
     f68:	9a ad       	ldd	r25, Y+58	; 0x3a
     f6a:	fc 01       	movw	r30, r24
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	04 96       	adiw	r24, 0x04	; 4
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	43 2f       	mov	r20, r19
     f78:	62 2f       	mov	r22, r18
     f7a:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     f7e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f80:	86 95       	lsr	r24
     f82:	38 2f       	mov	r19, r24
     f84:	31 70       	andi	r19, 0x01	; 1
     f86:	89 ad       	ldd	r24, Y+57	; 0x39
     f88:	9a ad       	ldd	r25, Y+58	; 0x3a
     f8a:	fc 01       	movw	r30, r24
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	07 96       	adiw	r24, 0x07	; 7
     f92:	fc 01       	movw	r30, r24
     f94:	20 81       	ld	r18, Z
     f96:	89 ad       	ldd	r24, Y+57	; 0x39
     f98:	9a ad       	ldd	r25, Y+58	; 0x3a
     f9a:	fc 01       	movw	r30, r24
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	06 96       	adiw	r24, 0x06	; 6
     fa2:	fc 01       	movw	r30, r24
     fa4:	80 81       	ld	r24, Z
     fa6:	43 2f       	mov	r20, r19
     fa8:	62 2f       	mov	r22, r18
     faa:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     fae:	8b ad       	ldd	r24, Y+59	; 0x3b
     fb0:	86 95       	lsr	r24
     fb2:	86 95       	lsr	r24
     fb4:	38 2f       	mov	r19, r24
     fb6:	31 70       	andi	r19, 0x01	; 1
     fb8:	89 ad       	ldd	r24, Y+57	; 0x39
     fba:	9a ad       	ldd	r25, Y+58	; 0x3a
     fbc:	fc 01       	movw	r30, r24
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	09 96       	adiw	r24, 0x09	; 9
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 81       	ld	r18, Z
     fc8:	89 ad       	ldd	r24, Y+57	; 0x39
     fca:	9a ad       	ldd	r25, Y+58	; 0x3a
     fcc:	fc 01       	movw	r30, r24
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	08 96       	adiw	r24, 0x08	; 8
     fd4:	fc 01       	movw	r30, r24
     fd6:	80 81       	ld	r24, Z
     fd8:	43 2f       	mov	r20, r19
     fda:	62 2f       	mov	r22, r18
     fdc:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
     fe0:	8b ad       	ldd	r24, Y+59	; 0x3b
     fe2:	86 95       	lsr	r24
     fe4:	86 95       	lsr	r24
     fe6:	86 95       	lsr	r24
     fe8:	38 2f       	mov	r19, r24
     fea:	31 70       	andi	r19, 0x01	; 1
     fec:	89 ad       	ldd	r24, Y+57	; 0x39
     fee:	9a ad       	ldd	r25, Y+58	; 0x3a
     ff0:	fc 01       	movw	r30, r24
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	93 81       	ldd	r25, Z+3	; 0x03
     ff6:	0b 96       	adiw	r24, 0x0b	; 11
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 81       	ld	r18, Z
     ffc:	89 ad       	ldd	r24, Y+57	; 0x39
     ffe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1000:	fc 01       	movw	r30, r24
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	0a 96       	adiw	r24, 0x0a	; 10
    1008:	fc 01       	movw	r30, r24
    100a:	80 81       	ld	r24, Z
    100c:	43 2f       	mov	r20, r19
    100e:	62 2f       	mov	r22, r18
    1010:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    1014:	89 ad       	ldd	r24, Y+57	; 0x39
    1016:	9a ad       	ldd	r25, Y+58	; 0x3a
    1018:	fc 01       	movw	r30, r24
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	03 96       	adiw	r24, 0x03	; 3
    1020:	fc 01       	movw	r30, r24
    1022:	20 81       	ld	r18, Z
    1024:	89 ad       	ldd	r24, Y+57	; 0x39
    1026:	9a ad       	ldd	r25, Y+58	; 0x3a
    1028:	fc 01       	movw	r30, r24
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	02 96       	adiw	r24, 0x02	; 2
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	41 e0       	ldi	r20, 0x01	; 1
    1036:	62 2f       	mov	r22, r18
    1038:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    103c:	89 ad       	ldd	r24, Y+57	; 0x39
    103e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1040:	fc 01       	movw	r30, r24
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	fc 01       	movw	r30, r24
    104a:	20 81       	ld	r18, Z
    104c:	89 ad       	ldd	r24, Y+57	; 0x39
    104e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1050:	fc 01       	movw	r30, r24
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	fc 01       	movw	r30, r24
    1058:	80 81       	ld	r24, Z
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	62 2f       	mov	r22, r18
    105e:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e8       	ldi	r26, 0x80	; 128
    1068:	bf e3       	ldi	r27, 0x3F	; 63
    106a:	89 87       	std	Y+9, r24	; 0x09
    106c:	9a 87       	std	Y+10, r25	; 0x0a
    106e:	ab 87       	std	Y+11, r26	; 0x0b
    1070:	bc 87       	std	Y+12, r27	; 0x0c
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a e7       	ldi	r20, 0x7A	; 122
    1078:	55 e4       	ldi	r21, 0x45	; 69
    107a:	69 85       	ldd	r22, Y+9	; 0x09
    107c:	7a 85       	ldd	r23, Y+10	; 0x0a
    107e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1080:	9c 85       	ldd	r25, Y+12	; 0x0c
    1082:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8b 8f       	std	Y+27, r24	; 0x1b
    108c:	9c 8f       	std	Y+28, r25	; 0x1c
    108e:	ad 8f       	std	Y+29, r26	; 0x1d
    1090:	be 8f       	std	Y+30, r27	; 0x1e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    109c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    109e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10a2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <LCD_voidSendChar+0x488>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	98 a3       	std	Y+32, r25	; 0x20
    10b0:	8f 8f       	std	Y+31, r24	; 0x1f
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <LCD_voidSendChar+0x506>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    10be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c4:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	4c f5       	brge	.+82     	; 0x111e <LCD_voidSendChar+0x4f2>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	69 85       	ldd	r22, Y+9	; 0x09
    10d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10da:	9c 85       	ldd	r25, Y+12	; 0x0c
    10dc:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	98 a3       	std	Y+32, r25	; 0x20
    10f2:	8f 8f       	std	Y+31, r24	; 0x1f
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <LCD_voidSendChar+0x4e8>
    10f6:	80 e9       	ldi	r24, 0x90	; 144
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	9a a3       	std	Y+34, r25	; 0x22
    10fc:	89 a3       	std	Y+33, r24	; 0x21
    10fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1100:	9a a1       	ldd	r25, Y+34	; 0x22
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <LCD_voidSendChar+0x4d6>
    1106:	9a a3       	std	Y+34, r25	; 0x22
    1108:	89 a3       	std	Y+33, r24	; 0x21
    110a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    110c:	98 a1       	ldd	r25, Y+32	; 0x20
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	98 a3       	std	Y+32, r25	; 0x20
    1112:	8f 8f       	std	Y+31, r24	; 0x1f
    1114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1116:	98 a1       	ldd	r25, Y+32	; 0x20
    1118:	89 2b       	or	r24, r25
    111a:	69 f7       	brne	.-38     	; 0x10f6 <LCD_voidSendChar+0x4ca>
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <LCD_voidSendChar+0x51a>
    111e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1120:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1126:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	98 a3       	std	Y+32, r25	; 0x20
    1130:	8f 8f       	std	Y+31, r24	; 0x1f
    1132:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1134:	98 a1       	ldd	r25, Y+32	; 0x20
    1136:	9c a3       	std	Y+36, r25	; 0x24
    1138:	8b a3       	std	Y+35, r24	; 0x23
    113a:	8b a1       	ldd	r24, Y+35	; 0x23
    113c:	9c a1       	ldd	r25, Y+36	; 0x24
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <LCD_voidSendChar+0x512>
    1142:	9c a3       	std	Y+36, r25	; 0x24
    1144:	8b a3       	std	Y+35, r24	; 0x23
    1146:	89 ad       	ldd	r24, Y+57	; 0x39
    1148:	9a ad       	ldd	r25, Y+58	; 0x3a
    114a:	fc 01       	movw	r30, r24
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	fc 01       	movw	r30, r24
    1154:	20 81       	ld	r18, Z
    1156:	89 ad       	ldd	r24, Y+57	; 0x39
    1158:	9a ad       	ldd	r25, Y+58	; 0x3a
    115a:	fc 01       	movw	r30, r24
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	fc 01       	movw	r30, r24
    1162:	80 81       	ld	r24, Z
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	62 2f       	mov	r22, r18
    1168:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a0 ea       	ldi	r26, 0xA0	; 160
    1172:	b1 e4       	ldi	r27, 0x41	; 65
    1174:	8d 87       	std	Y+13, r24	; 0x0d
    1176:	9e 87       	std	Y+14, r25	; 0x0e
    1178:	af 87       	std	Y+15, r26	; 0x0f
    117a:	b8 8b       	std	Y+16, r27	; 0x10
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	4a e7       	ldi	r20, 0x7A	; 122
    1182:	55 e4       	ldi	r21, 0x45	; 69
    1184:	6d 85       	ldd	r22, Y+13	; 0x0d
    1186:	7e 85       	ldd	r23, Y+14	; 0x0e
    1188:	8f 85       	ldd	r24, Y+15	; 0x0f
    118a:	98 89       	ldd	r25, Y+16	; 0x10
    118c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	89 8b       	std	Y+17, r24	; 0x11
    1196:	9a 8b       	std	Y+18, r25	; 0x12
    1198:	ab 8b       	std	Y+19, r26	; 0x13
    119a:	bc 8b       	std	Y+20, r27	; 0x14
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	69 89       	ldd	r22, Y+17	; 0x11
    11a6:	7a 89       	ldd	r23, Y+18	; 0x12
    11a8:	8b 89       	ldd	r24, Y+19	; 0x13
    11aa:	9c 89       	ldd	r25, Y+20	; 0x14
    11ac:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    11b0:	88 23       	and	r24, r24
    11b2:	2c f4       	brge	.+10     	; 0x11be <LCD_voidSendChar+0x592>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9e 8b       	std	Y+22, r25	; 0x16
    11ba:	8d 8b       	std	Y+21, r24	; 0x15
    11bc:	3f c0       	rjmp	.+126    	; 0x123c <LCD_voidSendChar+0x610>
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	3f ef       	ldi	r19, 0xFF	; 255
    11c2:	4f e7       	ldi	r20, 0x7F	; 127
    11c4:	57 e4       	ldi	r21, 0x47	; 71
    11c6:	69 89       	ldd	r22, Y+17	; 0x11
    11c8:	7a 89       	ldd	r23, Y+18	; 0x12
    11ca:	8b 89       	ldd	r24, Y+19	; 0x13
    11cc:	9c 89       	ldd	r25, Y+20	; 0x14
    11ce:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    11d2:	18 16       	cp	r1, r24
    11d4:	4c f5       	brge	.+82     	; 0x1228 <LCD_voidSendChar+0x5fc>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	6d 85       	ldd	r22, Y+13	; 0x0d
    11e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	98 89       	ldd	r25, Y+16	; 0x10
    11e6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	9e 8b       	std	Y+22, r25	; 0x16
    11fc:	8d 8b       	std	Y+21, r24	; 0x15
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <LCD_voidSendChar+0x5f2>
    1200:	80 e9       	ldi	r24, 0x90	; 144
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	98 8f       	std	Y+24, r25	; 0x18
    1206:	8f 8b       	std	Y+23, r24	; 0x17
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <LCD_voidSendChar+0x5e0>
    1210:	98 8f       	std	Y+24, r25	; 0x18
    1212:	8f 8b       	std	Y+23, r24	; 0x17
    1214:	8d 89       	ldd	r24, Y+21	; 0x15
    1216:	9e 89       	ldd	r25, Y+22	; 0x16
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	9e 8b       	std	Y+22, r25	; 0x16
    121c:	8d 8b       	std	Y+21, r24	; 0x15
    121e:	8d 89       	ldd	r24, Y+21	; 0x15
    1220:	9e 89       	ldd	r25, Y+22	; 0x16
    1222:	89 2b       	or	r24, r25
    1224:	69 f7       	brne	.-38     	; 0x1200 <LCD_voidSendChar+0x5d4>
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <LCD_voidSendChar+0x624>
    1228:	69 89       	ldd	r22, Y+17	; 0x11
    122a:	7a 89       	ldd	r23, Y+18	; 0x12
    122c:	8b 89       	ldd	r24, Y+19	; 0x13
    122e:	9c 89       	ldd	r25, Y+20	; 0x14
    1230:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9e 8b       	std	Y+22, r25	; 0x16
    123a:	8d 8b       	std	Y+21, r24	; 0x15
    123c:	8d 89       	ldd	r24, Y+21	; 0x15
    123e:	9e 89       	ldd	r25, Y+22	; 0x16
    1240:	9a 8f       	std	Y+26, r25	; 0x1a
    1242:	89 8f       	std	Y+25, r24	; 0x19
    1244:	89 8d       	ldd	r24, Y+25	; 0x19
    1246:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <LCD_voidSendChar+0x61c>
    124c:	9a 8f       	std	Y+26, r25	; 0x1a
    124e:	89 8f       	std	Y+25, r24	; 0x19
    1250:	00 00       	nop
    1252:	eb 96       	adiw	r28, 0x3b	; 59
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <LCD_voidSendString>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	00 d0       	rcall	.+0      	; 0x126a <LCD_voidSendString+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <LCD_voidSendString+0x8>
    126c:	1f 92       	push	r1
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9b 83       	std	Y+3, r25	; 0x03
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	7d 83       	std	Y+5, r23	; 0x05
    1278:	6c 83       	std	Y+4, r22	; 0x04
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <LCD_voidSendString+0x3c>
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	fc 01       	movw	r30, r24
    128e:	20 81       	ld	r18, Z
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	62 2f       	mov	r22, r18
    1296:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_voidSendChar>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	2c 81       	ldd	r18, Y+4	; 0x04
    12a8:	3d 81       	ldd	r19, Y+5	; 0x05
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	fc 01       	movw	r30, r24
    12b0:	80 81       	ld	r24, Z
    12b2:	88 23       	and	r24, r24
    12b4:	21 f7       	brne	.-56     	; 0x127e <LCD_voidSendString+0x1a>
    12b6:	00 00       	nop
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <LCD_voidGotoXY>:
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <LCD_voidGotoXY+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <LCD_voidGotoXY+0x8>
    12d0:	1f 92       	push	r1
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	6c 83       	std	Y+4, r22	; 0x04
    12dc:	4d 83       	std	Y+5, r20	; 0x05
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	fc 01       	movw	r30, r24
    12e6:	90 81       	ld	r25, Z
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	89 17       	cp	r24, r25
    12ec:	c0 f4       	brcc	.+48     	; 0x131e <LCD_voidGotoXY+0x56>
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	fc 01       	movw	r30, r24
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	89 17       	cp	r24, r25
    12fa:	88 f4       	brcc	.+34     	; 0x131e <LCD_voidGotoXY+0x56>
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	98 2f       	mov	r25, r24
    1300:	92 95       	swap	r25
    1302:	99 0f       	add	r25, r25
    1304:	99 0f       	add	r25, r25
    1306:	90 7c       	andi	r25, 0xC0	; 192
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	89 0f       	add	r24, r25
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	80 68       	ori	r24, 0x80	; 128
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	9b 81       	ldd	r25, Y+3	; 0x03
    1318:	69 81       	ldd	r22, Y+1	; 0x01
    131a:	0e 94 98 09 	call	0x1330	; 0x1330 <LCD_voidWriteCmd>
    131e:	00 00       	nop
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <LCD_voidWriteCmd>:
/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	eb 97       	sbiw	r28, 0x3b	; 59
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	9a af       	std	Y+58, r25	; 0x3a
    1346:	89 af       	std	Y+57, r24	; 0x39
    1348:	6b af       	std	Y+59, r22	; 0x3b
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
    134a:	8b ad       	ldd	r24, Y+59	; 0x3b
    134c:	82 95       	swap	r24
    134e:	8f 70       	andi	r24, 0x0F	; 15
    1350:	38 2f       	mov	r19, r24
    1352:	31 70       	andi	r19, 0x01	; 1
    1354:	89 ad       	ldd	r24, Y+57	; 0x39
    1356:	9a ad       	ldd	r25, Y+58	; 0x3a
    1358:	fc 01       	movw	r30, r24
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	05 96       	adiw	r24, 0x05	; 5
    1360:	fc 01       	movw	r30, r24
    1362:	20 81       	ld	r18, Z
    1364:	89 ad       	ldd	r24, Y+57	; 0x39
    1366:	9a ad       	ldd	r25, Y+58	; 0x3a
    1368:	fc 01       	movw	r30, r24
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	04 96       	adiw	r24, 0x04	; 4
    1370:	fc 01       	movw	r30, r24
    1372:	80 81       	ld	r24, Z
    1374:	43 2f       	mov	r20, r19
    1376:	62 2f       	mov	r22, r18
    1378:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
    137c:	8b ad       	ldd	r24, Y+59	; 0x3b
    137e:	82 95       	swap	r24
    1380:	86 95       	lsr	r24
    1382:	87 70       	andi	r24, 0x07	; 7
    1384:	38 2f       	mov	r19, r24
    1386:	31 70       	andi	r19, 0x01	; 1
    1388:	89 ad       	ldd	r24, Y+57	; 0x39
    138a:	9a ad       	ldd	r25, Y+58	; 0x3a
    138c:	fc 01       	movw	r30, r24
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	07 96       	adiw	r24, 0x07	; 7
    1394:	fc 01       	movw	r30, r24
    1396:	20 81       	ld	r18, Z
    1398:	89 ad       	ldd	r24, Y+57	; 0x39
    139a:	9a ad       	ldd	r25, Y+58	; 0x3a
    139c:	fc 01       	movw	r30, r24
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	06 96       	adiw	r24, 0x06	; 6
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	43 2f       	mov	r20, r19
    13aa:	62 2f       	mov	r22, r18
    13ac:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
    13b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    13b2:	82 95       	swap	r24
    13b4:	86 95       	lsr	r24
    13b6:	86 95       	lsr	r24
    13b8:	83 70       	andi	r24, 0x03	; 3
    13ba:	38 2f       	mov	r19, r24
    13bc:	31 70       	andi	r19, 0x01	; 1
    13be:	89 ad       	ldd	r24, Y+57	; 0x39
    13c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13c2:	fc 01       	movw	r30, r24
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	09 96       	adiw	r24, 0x09	; 9
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 81       	ld	r18, Z
    13ce:	89 ad       	ldd	r24, Y+57	; 0x39
    13d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13d2:	fc 01       	movw	r30, r24
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	08 96       	adiw	r24, 0x08	; 8
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
    13de:	43 2f       	mov	r20, r19
    13e0:	62 2f       	mov	r22, r18
    13e2:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
    13e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    13e8:	38 2f       	mov	r19, r24
    13ea:	33 1f       	adc	r19, r19
    13ec:	33 27       	eor	r19, r19
    13ee:	33 1f       	adc	r19, r19
    13f0:	89 ad       	ldd	r24, Y+57	; 0x39
    13f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13f4:	fc 01       	movw	r30, r24
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	0b 96       	adiw	r24, 0x0b	; 11
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 81       	ld	r18, Z
    1400:	89 ad       	ldd	r24, Y+57	; 0x39
    1402:	9a ad       	ldd	r25, Y+58	; 0x3a
    1404:	fc 01       	movw	r30, r24
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	0a 96       	adiw	r24, 0x0a	; 10
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	43 2f       	mov	r20, r19
    1412:	62 2f       	mov	r22, r18
    1414:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
    1418:	89 ad       	ldd	r24, Y+57	; 0x39
    141a:	9a ad       	ldd	r25, Y+58	; 0x3a
    141c:	fc 01       	movw	r30, r24
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	03 96       	adiw	r24, 0x03	; 3
    1424:	fc 01       	movw	r30, r24
    1426:	20 81       	ld	r18, Z
    1428:	89 ad       	ldd	r24, Y+57	; 0x39
    142a:	9a ad       	ldd	r25, Y+58	; 0x3a
    142c:	fc 01       	movw	r30, r24
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	02 96       	adiw	r24, 0x02	; 2
    1434:	fc 01       	movw	r30, r24
    1436:	80 81       	ld	r24, Z
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	62 2f       	mov	r22, r18
    143c:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
    1440:	89 ad       	ldd	r24, Y+57	; 0x39
    1442:	9a ad       	ldd	r25, Y+58	; 0x3a
    1444:	fc 01       	movw	r30, r24
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	fc 01       	movw	r30, r24
    144e:	20 81       	ld	r18, Z
    1450:	89 ad       	ldd	r24, Y+57	; 0x39
    1452:	9a ad       	ldd	r25, Y+58	; 0x3a
    1454:	fc 01       	movw	r30, r24
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	fc 01       	movw	r30, r24
    145c:	80 81       	ld	r24, Z
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	62 2f       	mov	r22, r18
    1462:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e8       	ldi	r26, 0x80	; 128
    146c:	bf e3       	ldi	r27, 0x3F	; 63
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	ab 83       	std	Y+3, r26	; 0x03
    1474:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4a e7       	ldi	r20, 0x7A	; 122
    147c:	55 e4       	ldi	r21, 0x45	; 69
    147e:	69 81       	ldd	r22, Y+1	; 0x01
    1480:	7a 81       	ldd	r23, Y+2	; 0x02
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8f a7       	std	Y+47, r24	; 0x2f
    1490:	98 ab       	std	Y+48, r25	; 0x30
    1492:	a9 ab       	std	Y+49, r26	; 0x31
    1494:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	6f a5       	ldd	r22, Y+47	; 0x2f
    14a0:	78 a9       	ldd	r23, Y+48	; 0x30
    14a2:	89 a9       	ldd	r24, Y+49	; 0x31
    14a4:	9a a9       	ldd	r25, Y+50	; 0x32
    14a6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9c ab       	std	Y+52, r25	; 0x34
    14b4:	8b ab       	std	Y+51, r24	; 0x33
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	57 e4       	ldi	r21, 0x47	; 71
    14c0:	6f a5       	ldd	r22, Y+47	; 0x2f
    14c2:	78 a9       	ldd	r23, Y+48	; 0x30
    14c4:	89 a9       	ldd	r24, Y+49	; 0x31
    14c6:	9a a9       	ldd	r25, Y+50	; 0x32
    14c8:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e2       	ldi	r20, 0x20	; 32
    14d6:	51 e4       	ldi	r21, 0x41	; 65
    14d8:	69 81       	ldd	r22, Y+1	; 0x01
    14da:	7a 81       	ldd	r23, Y+2	; 0x02
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9c ab       	std	Y+52, r25	; 0x34
    14f6:	8b ab       	std	Y+51, r24	; 0x33
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <LCD_voidWriteCmd+0x1e8>
    14fa:	80 e9       	ldi	r24, 0x90	; 144
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	9e ab       	std	Y+54, r25	; 0x36
    1500:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1502:	8d a9       	ldd	r24, Y+53	; 0x35
    1504:	9e a9       	ldd	r25, Y+54	; 0x36
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_voidWriteCmd+0x1d6>
    150a:	9e ab       	std	Y+54, r25	; 0x36
    150c:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	8b a9       	ldd	r24, Y+51	; 0x33
    1510:	9c a9       	ldd	r25, Y+52	; 0x34
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9c ab       	std	Y+52, r25	; 0x34
    1516:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	8b a9       	ldd	r24, Y+51	; 0x33
    151a:	9c a9       	ldd	r25, Y+52	; 0x34
    151c:	89 2b       	or	r24, r25
    151e:	69 f7       	brne	.-38     	; 0x14fa <LCD_voidWriteCmd+0x1ca>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6f a5       	ldd	r22, Y+47	; 0x2f
    1524:	78 a9       	ldd	r23, Y+48	; 0x30
    1526:	89 a9       	ldd	r24, Y+49	; 0x31
    1528:	9a a9       	ldd	r25, Y+50	; 0x32
    152a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c ab       	std	Y+52, r25	; 0x34
    1534:	8b ab       	std	Y+51, r24	; 0x33
    1536:	8b a9       	ldd	r24, Y+51	; 0x33
    1538:	9c a9       	ldd	r25, Y+52	; 0x34
    153a:	98 af       	std	Y+56, r25	; 0x38
    153c:	8f ab       	std	Y+55, r24	; 0x37
    153e:	8f a9       	ldd	r24, Y+55	; 0x37
    1540:	98 ad       	ldd	r25, Y+56	; 0x38
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_voidWriteCmd+0x212>
    1546:	98 af       	std	Y+56, r25	; 0x38
    1548:	8f ab       	std	Y+55, r24	; 0x37
    154a:	89 ad       	ldd	r24, Y+57	; 0x39
    154c:	9a ad       	ldd	r25, Y+58	; 0x3a
    154e:	fc 01       	movw	r30, r24
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	fc 01       	movw	r30, r24
    1558:	20 81       	ld	r18, Z
    155a:	89 ad       	ldd	r24, Y+57	; 0x39
    155c:	9a ad       	ldd	r25, Y+58	; 0x3a
    155e:	fc 01       	movw	r30, r24
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	62 2f       	mov	r22, r18
    156c:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a0 ea       	ldi	r26, 0xA0	; 160
    1576:	b1 e4       	ldi	r27, 0x41	; 65
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	af 83       	std	Y+7, r26	; 0x07
    157e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4a e7       	ldi	r20, 0x7A	; 122
    1586:	55 e4       	ldi	r21, 0x45	; 69
    1588:	6d 81       	ldd	r22, Y+5	; 0x05
    158a:	7e 81       	ldd	r23, Y+6	; 0x06
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	8d a3       	std	Y+37, r24	; 0x25
    159a:	9e a3       	std	Y+38, r25	; 0x26
    159c:	af a3       	std	Y+39, r26	; 0x27
    159e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	6d a1       	ldd	r22, Y+37	; 0x25
    15aa:	7e a1       	ldd	r23, Y+38	; 0x26
    15ac:	8f a1       	ldd	r24, Y+39	; 0x27
    15ae:	98 a5       	ldd	r25, Y+40	; 0x28
    15b0:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <LCD_voidWriteCmd+0x292>
		__ticks = 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9a a7       	std	Y+42, r25	; 0x2a
    15be:	89 a7       	std	Y+41, r24	; 0x29
    15c0:	3f c0       	rjmp	.+126    	; 0x1640 <LCD_voidWriteCmd+0x310>
	else if (__tmp > 65535)
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	6d a1       	ldd	r22, Y+37	; 0x25
    15cc:	7e a1       	ldd	r23, Y+38	; 0x26
    15ce:	8f a1       	ldd	r24, Y+39	; 0x27
    15d0:	98 a5       	ldd	r25, Y+40	; 0x28
    15d2:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    15d6:	18 16       	cp	r1, r24
    15d8:	4c f5       	brge	.+82     	; 0x162c <LCD_voidWriteCmd+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	6d 81       	ldd	r22, Y+5	; 0x05
    15e4:	7e 81       	ldd	r23, Y+6	; 0x06
    15e6:	8f 81       	ldd	r24, Y+7	; 0x07
    15e8:	98 85       	ldd	r25, Y+8	; 0x08
    15ea:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9a a7       	std	Y+42, r25	; 0x2a
    1600:	89 a7       	std	Y+41, r24	; 0x29
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <LCD_voidWriteCmd+0x2f2>
    1604:	80 e9       	ldi	r24, 0x90	; 144
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	9c a7       	std	Y+44, r25	; 0x2c
    160a:	8b a7       	std	Y+43, r24	; 0x2b
    160c:	8b a5       	ldd	r24, Y+43	; 0x2b
    160e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <LCD_voidWriteCmd+0x2e0>
    1614:	9c a7       	std	Y+44, r25	; 0x2c
    1616:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1618:	89 a5       	ldd	r24, Y+41	; 0x29
    161a:	9a a5       	ldd	r25, Y+42	; 0x2a
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	9a a7       	std	Y+42, r25	; 0x2a
    1620:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1622:	89 a5       	ldd	r24, Y+41	; 0x29
    1624:	9a a5       	ldd	r25, Y+42	; 0x2a
    1626:	89 2b       	or	r24, r25
    1628:	69 f7       	brne	.-38     	; 0x1604 <LCD_voidWriteCmd+0x2d4>
    162a:	14 c0       	rjmp	.+40     	; 0x1654 <LCD_voidWriteCmd+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162c:	6d a1       	ldd	r22, Y+37	; 0x25
    162e:	7e a1       	ldd	r23, Y+38	; 0x26
    1630:	8f a1       	ldd	r24, Y+39	; 0x27
    1632:	98 a5       	ldd	r25, Y+40	; 0x28
    1634:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9a a7       	std	Y+42, r25	; 0x2a
    163e:	89 a7       	std	Y+41, r24	; 0x29
    1640:	89 a5       	ldd	r24, Y+41	; 0x29
    1642:	9a a5       	ldd	r25, Y+42	; 0x2a
    1644:	9e a7       	std	Y+46, r25	; 0x2e
    1646:	8d a7       	std	Y+45, r24	; 0x2d
    1648:	8d a5       	ldd	r24, Y+45	; 0x2d
    164a:	9e a5       	ldd	r25, Y+46	; 0x2e
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <LCD_voidWriteCmd+0x31c>
    1650:	9e a7       	std	Y+46, r25	; 0x2e
    1652:	8d a7       	std	Y+45, r24	; 0x2d
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
    1654:	8b ad       	ldd	r24, Y+59	; 0x3b
    1656:	38 2f       	mov	r19, r24
    1658:	31 70       	andi	r19, 0x01	; 1
    165a:	89 ad       	ldd	r24, Y+57	; 0x39
    165c:	9a ad       	ldd	r25, Y+58	; 0x3a
    165e:	fc 01       	movw	r30, r24
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	05 96       	adiw	r24, 0x05	; 5
    1666:	fc 01       	movw	r30, r24
    1668:	20 81       	ld	r18, Z
    166a:	89 ad       	ldd	r24, Y+57	; 0x39
    166c:	9a ad       	ldd	r25, Y+58	; 0x3a
    166e:	fc 01       	movw	r30, r24
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	04 96       	adiw	r24, 0x04	; 4
    1676:	fc 01       	movw	r30, r24
    1678:	80 81       	ld	r24, Z
    167a:	43 2f       	mov	r20, r19
    167c:	62 2f       	mov	r22, r18
    167e:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
    1682:	8b ad       	ldd	r24, Y+59	; 0x3b
    1684:	86 95       	lsr	r24
    1686:	38 2f       	mov	r19, r24
    1688:	31 70       	andi	r19, 0x01	; 1
    168a:	89 ad       	ldd	r24, Y+57	; 0x39
    168c:	9a ad       	ldd	r25, Y+58	; 0x3a
    168e:	fc 01       	movw	r30, r24
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	07 96       	adiw	r24, 0x07	; 7
    1696:	fc 01       	movw	r30, r24
    1698:	20 81       	ld	r18, Z
    169a:	89 ad       	ldd	r24, Y+57	; 0x39
    169c:	9a ad       	ldd	r25, Y+58	; 0x3a
    169e:	fc 01       	movw	r30, r24
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	06 96       	adiw	r24, 0x06	; 6
    16a6:	fc 01       	movw	r30, r24
    16a8:	80 81       	ld	r24, Z
    16aa:	43 2f       	mov	r20, r19
    16ac:	62 2f       	mov	r22, r18
    16ae:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
    16b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    16b4:	86 95       	lsr	r24
    16b6:	86 95       	lsr	r24
    16b8:	38 2f       	mov	r19, r24
    16ba:	31 70       	andi	r19, 0x01	; 1
    16bc:	89 ad       	ldd	r24, Y+57	; 0x39
    16be:	9a ad       	ldd	r25, Y+58	; 0x3a
    16c0:	fc 01       	movw	r30, r24
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	09 96       	adiw	r24, 0x09	; 9
    16c8:	fc 01       	movw	r30, r24
    16ca:	20 81       	ld	r18, Z
    16cc:	89 ad       	ldd	r24, Y+57	; 0x39
    16ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    16d0:	fc 01       	movw	r30, r24
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	08 96       	adiw	r24, 0x08	; 8
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	43 2f       	mov	r20, r19
    16de:	62 2f       	mov	r22, r18
    16e0:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
    16e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    16e6:	86 95       	lsr	r24
    16e8:	86 95       	lsr	r24
    16ea:	86 95       	lsr	r24
    16ec:	38 2f       	mov	r19, r24
    16ee:	31 70       	andi	r19, 0x01	; 1
    16f0:	89 ad       	ldd	r24, Y+57	; 0x39
    16f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    16f4:	fc 01       	movw	r30, r24
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	0b 96       	adiw	r24, 0x0b	; 11
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 81       	ld	r18, Z
    1700:	89 ad       	ldd	r24, Y+57	; 0x39
    1702:	9a ad       	ldd	r25, Y+58	; 0x3a
    1704:	fc 01       	movw	r30, r24
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0a 96       	adiw	r24, 0x0a	; 10
    170c:	fc 01       	movw	r30, r24
    170e:	80 81       	ld	r24, Z
    1710:	43 2f       	mov	r20, r19
    1712:	62 2f       	mov	r22, r18
    1714:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
    1718:	89 ad       	ldd	r24, Y+57	; 0x39
    171a:	9a ad       	ldd	r25, Y+58	; 0x3a
    171c:	fc 01       	movw	r30, r24
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	03 96       	adiw	r24, 0x03	; 3
    1724:	fc 01       	movw	r30, r24
    1726:	20 81       	ld	r18, Z
    1728:	89 ad       	ldd	r24, Y+57	; 0x39
    172a:	9a ad       	ldd	r25, Y+58	; 0x3a
    172c:	fc 01       	movw	r30, r24
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	02 96       	adiw	r24, 0x02	; 2
    1734:	fc 01       	movw	r30, r24
    1736:	80 81       	ld	r24, Z
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	62 2f       	mov	r22, r18
    173c:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
    1740:	89 ad       	ldd	r24, Y+57	; 0x39
    1742:	9a ad       	ldd	r25, Y+58	; 0x3a
    1744:	fc 01       	movw	r30, r24
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	fc 01       	movw	r30, r24
    174e:	20 81       	ld	r18, Z
    1750:	89 ad       	ldd	r24, Y+57	; 0x39
    1752:	9a ad       	ldd	r25, Y+58	; 0x3a
    1754:	fc 01       	movw	r30, r24
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	62 2f       	mov	r22, r18
    1762:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e8       	ldi	r26, 0x80	; 128
    176c:	bf e3       	ldi	r27, 0x3F	; 63
    176e:	89 87       	std	Y+9, r24	; 0x09
    1770:	9a 87       	std	Y+10, r25	; 0x0a
    1772:	ab 87       	std	Y+11, r26	; 0x0b
    1774:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a e7       	ldi	r20, 0x7A	; 122
    177c:	55 e4       	ldi	r21, 0x45	; 69
    177e:	69 85       	ldd	r22, Y+9	; 0x09
    1780:	7a 85       	ldd	r23, Y+10	; 0x0a
    1782:	8b 85       	ldd	r24, Y+11	; 0x0b
    1784:	9c 85       	ldd	r25, Y+12	; 0x0c
    1786:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8b 8f       	std	Y+27, r24	; 0x1b
    1790:	9c 8f       	std	Y+28, r25	; 0x1c
    1792:	ad 8f       	std	Y+29, r26	; 0x1d
    1794:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    17a0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    17a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <LCD_voidWriteCmd+0x488>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	98 a3       	std	Y+32, r25	; 0x20
    17b4:	8f 8f       	std	Y+31, r24	; 0x1f
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <LCD_voidWriteCmd+0x506>
	else if (__tmp > 65535)
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    17c2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    17c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c8:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <LCD_voidWriteCmd+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	69 85       	ldd	r22, Y+9	; 0x09
    17da:	7a 85       	ldd	r23, Y+10	; 0x0a
    17dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17de:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e0:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 a3       	std	Y+32, r25	; 0x20
    17f6:	8f 8f       	std	Y+31, r24	; 0x1f
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <LCD_voidWriteCmd+0x4e8>
    17fa:	80 e9       	ldi	r24, 0x90	; 144
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	9a a3       	std	Y+34, r25	; 0x22
    1800:	89 a3       	std	Y+33, r24	; 0x21
    1802:	89 a1       	ldd	r24, Y+33	; 0x21
    1804:	9a a1       	ldd	r25, Y+34	; 0x22
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_voidWriteCmd+0x4d6>
    180a:	9a a3       	std	Y+34, r25	; 0x22
    180c:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1810:	98 a1       	ldd	r25, Y+32	; 0x20
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181a:	98 a1       	ldd	r25, Y+32	; 0x20
    181c:	89 2b       	or	r24, r25
    181e:	69 f7       	brne	.-38     	; 0x17fa <LCD_voidWriteCmd+0x4ca>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <LCD_voidWriteCmd+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1824:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1828:	9e 8d       	ldd	r25, Y+30	; 0x1e
    182a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 a3       	std	Y+32, r25	; 0x20
    1834:	8f 8f       	std	Y+31, r24	; 0x1f
    1836:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1838:	98 a1       	ldd	r25, Y+32	; 0x20
    183a:	9c a3       	std	Y+36, r25	; 0x24
    183c:	8b a3       	std	Y+35, r24	; 0x23
    183e:	8b a1       	ldd	r24, Y+35	; 0x23
    1840:	9c a1       	ldd	r25, Y+36	; 0x24
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_voidWriteCmd+0x512>
    1846:	9c a3       	std	Y+36, r25	; 0x24
    1848:	8b a3       	std	Y+35, r24	; 0x23
    184a:	89 ad       	ldd	r24, Y+57	; 0x39
    184c:	9a ad       	ldd	r25, Y+58	; 0x3a
    184e:	fc 01       	movw	r30, r24
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	fc 01       	movw	r30, r24
    1858:	20 81       	ld	r18, Z
    185a:	89 ad       	ldd	r24, Y+57	; 0x39
    185c:	9a ad       	ldd	r25, Y+58	; 0x3a
    185e:	fc 01       	movw	r30, r24
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	62 2f       	mov	r22, r18
    186c:	0e 94 05 04 	call	0x80a	; 0x80a <GPIO_voidSetPinValue>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 ea       	ldi	r26, 0xA0	; 160
    1876:	b1 e4       	ldi	r27, 0x41	; 65
    1878:	8d 87       	std	Y+13, r24	; 0x0d
    187a:	9e 87       	std	Y+14, r25	; 0x0e
    187c:	af 87       	std	Y+15, r26	; 0x0f
    187e:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	55 e4       	ldi	r21, 0x45	; 69
    1888:	6d 85       	ldd	r22, Y+13	; 0x0d
    188a:	7e 85       	ldd	r23, Y+14	; 0x0e
    188c:	8f 85       	ldd	r24, Y+15	; 0x0f
    188e:	98 89       	ldd	r25, Y+16	; 0x10
    1890:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	89 8b       	std	Y+17, r24	; 0x11
    189a:	9a 8b       	std	Y+18, r25	; 0x12
    189c:	ab 8b       	std	Y+19, r26	; 0x13
    189e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	69 89       	ldd	r22, Y+17	; 0x11
    18aa:	7a 89       	ldd	r23, Y+18	; 0x12
    18ac:	8b 89       	ldd	r24, Y+19	; 0x13
    18ae:	9c 89       	ldd	r25, Y+20	; 0x14
    18b0:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <LCD_voidWriteCmd+0x592>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9e 8b       	std	Y+22, r25	; 0x16
    18be:	8d 8b       	std	Y+21, r24	; 0x15
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <LCD_voidWriteCmd+0x610>
	else if (__tmp > 65535)
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	69 89       	ldd	r22, Y+17	; 0x11
    18cc:	7a 89       	ldd	r23, Y+18	; 0x12
    18ce:	8b 89       	ldd	r24, Y+19	; 0x13
    18d0:	9c 89       	ldd	r25, Y+20	; 0x14
    18d2:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <LCD_voidWriteCmd+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    18e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	98 89       	ldd	r25, Y+16	; 0x10
    18ea:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 8b       	std	Y+22, r25	; 0x16
    1900:	8d 8b       	std	Y+21, r24	; 0x15
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <LCD_voidWriteCmd+0x5f2>
    1904:	80 e9       	ldi	r24, 0x90	; 144
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	98 8f       	std	Y+24, r25	; 0x18
    190a:	8f 8b       	std	Y+23, r24	; 0x17
    190c:	8f 89       	ldd	r24, Y+23	; 0x17
    190e:	98 8d       	ldd	r25, Y+24	; 0x18
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_voidWriteCmd+0x5e0>
    1914:	98 8f       	std	Y+24, r25	; 0x18
    1916:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8d 89       	ldd	r24, Y+21	; 0x15
    191a:	9e 89       	ldd	r25, Y+22	; 0x16
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9e 8b       	std	Y+22, r25	; 0x16
    1920:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8d 89       	ldd	r24, Y+21	; 0x15
    1924:	9e 89       	ldd	r25, Y+22	; 0x16
    1926:	89 2b       	or	r24, r25
    1928:	69 f7       	brne	.-38     	; 0x1904 <LCD_voidWriteCmd+0x5d4>

#endif
}
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <LCD_voidWriteCmd+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	69 89       	ldd	r22, Y+17	; 0x11
    192e:	7a 89       	ldd	r23, Y+18	; 0x12
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 8b       	std	Y+22, r25	; 0x16
    193e:	8d 8b       	std	Y+21, r24	; 0x15
    1940:	8d 89       	ldd	r24, Y+21	; 0x15
    1942:	9e 89       	ldd	r25, Y+22	; 0x16
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	89 8f       	std	Y+25, r24	; 0x19
    1948:	89 8d       	ldd	r24, Y+25	; 0x19
    194a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_voidWriteCmd+0x61c>
    1950:	9a 8f       	std	Y+26, r25	; 0x1a
    1952:	89 8f       	std	Y+25, r24	; 0x19
    1954:	00 00       	nop
    1956:	eb 96       	adiw	r28, 0x3b	; 59
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <main>:
u16 convVal  = 0 ;
float temp ; 
u8 buffer[10] ; 
void xxx (void); 
int main(void)
{
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	6c 97       	sbiw	r28, 0x1c	; 28
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
	/*	ADC INIT	*/
	ADC_voidInit(&myADC);
    197c:	80 e6       	ldi	r24, 0x60	; 96
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_voidSetInterruptStates(ADC_IRQ_ENABLE);
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_voidSetInterruptStates>
	ADC_voidSetIRQ_CallBack(xxx);
    198a:	83 ec       	ldi	r24, 0xC3	; 195
    198c:	9d e0       	ldi	r25, 0x0D	; 13
    198e:	0e 94 ce 00 	call	0x19c	; 0x19c <ADC_voidSetIRQ_CallBack>
	/* LCD INIT	*/
	LCD_voidInit(&myLCD); 
    1992:	80 e7       	ldi	r24, 0x70	; 112
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LCD_voidInit>
	LCD_voidSendString(&myLCD,addString("LCD Initialized"));
    199a:	64 e7       	ldi	r22, 0x74	; 116
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	80 e7       	ldi	r24, 0x70	; 112
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_voidSendString>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	aa ef       	ldi	r26, 0xFA	; 250
    19ac:	b3 e4       	ldi	r27, 0x43	; 67
    19ae:	8d 83       	std	Y+5, r24	; 0x05
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	af 83       	std	Y+7, r26	; 0x07
    19b4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	55 e4       	ldi	r21, 0x45	; 69
    19be:	6d 81       	ldd	r22, Y+5	; 0x05
    19c0:	7e 81       	ldd	r23, Y+6	; 0x06
    19c2:	8f 81       	ldd	r24, Y+7	; 0x07
    19c4:	98 85       	ldd	r25, Y+8	; 0x08
    19c6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	89 87       	std	Y+9, r24	; 0x09
    19d0:	9a 87       	std	Y+10, r25	; 0x0a
    19d2:	ab 87       	std	Y+11, r26	; 0x0b
    19d4:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	69 85       	ldd	r22, Y+9	; 0x09
    19e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    19e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    19e6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <main+0x90>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9e 87       	std	Y+14, r25	; 0x0e
    19f4:	8d 87       	std	Y+13, r24	; 0x0d
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <main+0x10e>
	else if (__tmp > 65535)
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	69 85       	ldd	r22, Y+9	; 0x09
    1a02:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a08:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	4c f5       	brge	.+82     	; 0x1a62 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	6d 81       	ldd	r22, Y+5	; 0x05
    1a1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1e:	98 85       	ldd	r25, Y+8	; 0x08
    1a20:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9e 87       	std	Y+14, r25	; 0x0e
    1a36:	8d 87       	std	Y+13, r24	; 0x0d
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <main+0xf0>
    1a3a:	80 e9       	ldi	r24, 0x90	; 144
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	98 8b       	std	Y+16, r25	; 0x10
    1a40:	8f 87       	std	Y+15, r24	; 0x0f
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	98 89       	ldd	r25, Y+16	; 0x10
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <main+0xde>
    1a4a:	98 8b       	std	Y+16, r25	; 0x10
    1a4c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9e 87       	std	Y+14, r25	; 0x0e
    1a56:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5c:	89 2b       	or	r24, r25
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <main+0xd2>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	69 85       	ldd	r22, Y+9	; 0x09
    1a64:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a6a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9e 87       	std	Y+14, r25	; 0x0e
    1a74:	8d 87       	std	Y+13, r24	; 0x0d
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	9a 8b       	std	Y+18, r25	; 0x12
    1a7c:	89 8b       	std	Y+17, r24	; 0x11
    1a7e:	89 89       	ldd	r24, Y+17	; 0x11
    1a80:	9a 89       	ldd	r25, Y+18	; 0x12
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <main+0x11a>
    1a86:	9a 8b       	std	Y+18, r25	; 0x12
    1a88:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(500);
	LCD_voidSendString(&myLCD,addString("Temp is"));
    1a8a:	64 e8       	ldi	r22, 0x84	; 132
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 e7       	ldi	r24, 0x70	; 112
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_voidSendString>
	/*	INTERRUPT ENABLE	*/
	EXTINT_voidGlobalIntEnable();
    1a96:	0e 94 58 01 	call	0x2b0	; 0x2b0 <EXTINT_voidGlobalIntEnable>
    while(1)
    {
		ADC_voidStartConvertionAsynch(ADC_CHENNEL_7_SE);
    1a9a:	87 e0       	ldi	r24, 0x07	; 7
    1a9c:	0e 94 01 01 	call	0x202	; 0x202 <ADC_voidStartConvertionAsynch>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	aa ef       	ldi	r26, 0xFA	; 250
    1aa6:	b3 e4       	ldi	r27, 0x43	; 67
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	ab 83       	std	Y+3, r26	; 0x03
    1aae:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a e7       	ldi	r20, 0x7A	; 122
    1ab6:	55 e4       	ldi	r21, 0x45	; 69
    1ab8:	69 81       	ldd	r22, Y+1	; 0x01
    1aba:	7a 81       	ldd	r23, Y+2	; 0x02
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8b 8b       	std	Y+19, r24	; 0x13
    1aca:	9c 8b       	std	Y+20, r25	; 0x14
    1acc:	ad 8b       	std	Y+21, r26	; 0x15
    1ace:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	6b 89       	ldd	r22, Y+19	; 0x13
    1ada:	7c 89       	ldd	r23, Y+20	; 0x14
    1adc:	8d 89       	ldd	r24, Y+21	; 0x15
    1ade:	9e 89       	ldd	r25, Y+22	; 0x16
    1ae0:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__cmpsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <main+0x18a>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	98 8f       	std	Y+24, r25	; 0x18
    1aee:	8f 8b       	std	Y+23, r24	; 0x17
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <main+0x208>
	else if (__tmp > 65535)
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	6b 89       	ldd	r22, Y+19	; 0x13
    1afc:	7c 89       	ldd	r23, Y+20	; 0x14
    1afe:	8d 89       	ldd	r24, Y+21	; 0x15
    1b00:	9e 89       	ldd	r25, Y+22	; 0x16
    1b02:	0e 94 bf 11 	call	0x237e	; 0x237e <__gesf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	69 81       	ldd	r22, Y+1	; 0x01
    1b14:	7a 81       	ldd	r23, Y+2	; 0x02
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	98 8f       	std	Y+24, r25	; 0x18
    1b30:	8f 8b       	std	Y+23, r24	; 0x17
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <main+0x1ea>
    1b34:	80 e9       	ldi	r24, 0x90	; 144
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	9a 8f       	std	Y+26, r25	; 0x1a
    1b3a:	89 8f       	std	Y+25, r24	; 0x19
    1b3c:	89 8d       	ldd	r24, Y+25	; 0x19
    1b3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <main+0x1d8>
    1b44:	9a 8f       	std	Y+26, r25	; 0x1a
    1b46:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	98 8f       	std	Y+24, r25	; 0x18
    1b50:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	89 2b       	or	r24, r25
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <main+0x1cc>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6b 89       	ldd	r22, Y+19	; 0x13
    1b5e:	7c 89       	ldd	r23, Y+20	; 0x14
    1b60:	8d 89       	ldd	r24, Y+21	; 0x15
    1b62:	9e 89       	ldd	r25, Y+22	; 0x16
    1b64:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	98 8f       	std	Y+24, r25	; 0x18
    1b6e:	8f 8b       	std	Y+23, r24	; 0x17
    1b70:	8f 89       	ldd	r24, Y+23	; 0x17
    1b72:	98 8d       	ldd	r25, Y+24	; 0x18
    1b74:	9c 8f       	std	Y+28, r25	; 0x1c
    1b76:	8b 8f       	std	Y+27, r24	; 0x1b
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <main+0x214>
    1b80:	9c 8f       	std	Y+28, r25	; 0x1c
    1b82:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(500);
    }
    1b84:	8a cf       	rjmp	.-236    	; 0x1a9a <main+0x132>

00001b86 <xxx>:
    return 0;
}

void xxx (void)
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGotoXY(&myLCD,0,1);
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	80 e7       	ldi	r24, 0x70	; 112
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_voidGotoXY>
	ADC_voidReadVal(&convVal);
    1b9a:	84 e9       	ldi	r24, 0x94	; 148
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <ADC_voidReadVal>
	temp = (convVal*4.88)/10.00 ; 
    1ba2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <convVal>
    1ba6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <convVal+0x1>
    1baa:	cc 01       	movw	r24, r24
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 0d 11 	call	0x221a	; 0x221a <__floatunsisf>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	26 ef       	ldi	r18, 0xF6	; 246
    1bbe:	38 e2       	ldi	r19, 0x28	; 40
    1bc0:	4c e9       	ldi	r20, 0x9C	; 156
    1bc2:	50 e4       	ldi	r21, 0x40	; 64
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <temp>
    1be8:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <temp+0x1>
    1bec:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <temp+0x2>
    1bf0:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <temp+0x3>
	itoa((int)temp, buffer , 10 );
    1bf4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <temp>
    1bf8:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <temp+0x1>
    1bfc:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <temp+0x2>
    1c00:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <temp+0x3>
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__fixsfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	4a e0       	ldi	r20, 0x0A	; 10
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	60 eb       	ldi	r22, 0xB0	; 176
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 31 12 	call	0x2462	; 0x2462 <itoa>
	LCD_voidSendString(&myLCD,buffer); 
    1c1c:	60 eb       	ldi	r22, 0xB0	; 176
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	80 e7       	ldi	r24, 0x70	; 112
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_voidSendString>
}
    1c28:	00 00       	nop
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <__vector_10>:
        //<TODO ERROR> SPI MODULE NOT ENABLED 
    }
}

void __vector_10(void)
{
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    Global_ExchangeComplate() ;
    1c5c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Global_ExchangeComplate>
    1c60:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <Global_ExchangeComplate+0x1>
    1c64:	fc 01       	movw	r30, r24
    1c66:	09 95       	icall
	 
}
    1c68:	00 00       	nop
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1c8c:	0f 90       	pop	r0
    1c8e:	1f 90       	pop	r1
    1c90:	18 95       	reti

00001c92 <Timer_voidStopTimer>:
           copy_u16MinValue =  resultValues[LOC_u16Counter] ;
           LOC_u8Index = LOC_u16Counter ;
        }
    }
    return (copy_u16MaxCounterVal- 20 + LOC_u8Index ) ;
}
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	1f 92       	push	r1
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <Timer_voidStopTimer+0x38>
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	91 05       	cpc	r25, r1
    1cae:	b9 f0       	breq	.+46     	; 0x1cde <Timer_voidStopTimer+0x4c>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <Timer_voidStopTimer+0x24>
    1cb4:	31 c0       	rjmp	.+98     	; 0x1d18 <Timer_voidStopTimer+0x86>
    1cb6:	83 e5       	ldi	r24, 0x53	; 83
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	23 e5       	ldi	r18, 0x53	; 83
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	20 81       	ld	r18, Z
    1cc2:	28 7f       	andi	r18, 0xF8	; 248
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	20 83       	st	Z, r18
    1cc8:	27 c0       	rjmp	.+78     	; 0x1d18 <Timer_voidStopTimer+0x86>
    1cca:	8e e4       	ldi	r24, 0x4E	; 78
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	2e e4       	ldi	r18, 0x4E	; 78
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	20 81       	ld	r18, Z
    1cd6:	28 7f       	andi	r18, 0xF8	; 248
    1cd8:	fc 01       	movw	r30, r24
    1cda:	20 83       	st	Z, r18
    1cdc:	1d c0       	rjmp	.+58     	; 0x1d18 <Timer_voidStopTimer+0x86>
    1cde:	85 e4       	ldi	r24, 0x45	; 69
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	25 e4       	ldi	r18, 0x45	; 69
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	20 81       	ld	r18, Z
    1cea:	28 7f       	andi	r18, 0xF8	; 248
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18
    1cf0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <GLOBAL_ptrToTimer2UserConf>
    1cf4:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <GLOBAL_ptrToTimer2UserConf+0x1>
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	80 81       	ld	r24, Z
    1cfc:	88 23       	and	r24, r24
    1cfe:	59 f0       	breq	.+22     	; 0x1d16 <Timer_voidStopTimer+0x84>
    1d00:	00 00       	nop
    1d02:	82 e4       	ldi	r24, 0x42	; 66
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	fc 01       	movw	r30, r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	81 70       	andi	r24, 0x01	; 1
    1d10:	99 27       	eor	r25, r25
    1d12:	89 2b       	or	r24, r25
    1d14:	b1 f7       	brne	.-20     	; 0x1d02 <Timer_voidStopTimer+0x70>
    1d16:	00 00       	nop
    1d18:	00 00       	nop
    1d1a:	0f 90       	pop	r0
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <__vector_19>:
    1d22:	1f 92       	push	r1
    1d24:	0f 92       	push	r0
    1d26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Global_u8Timer0Interval>
    1d52:	88 23       	and	r24, r24
    1d54:	01 f5       	brne	.+64     	; 0x1d96 <__vector_19+0x74>
    1d56:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1d5a:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1d5e:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <Global_u16NumberOfOverflowsInCTC>
    1d62:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <Global_u16NumberOfOverflowsInCTC+0x1>
    1d66:	28 17       	cp	r18, r24
    1d68:	39 07       	cpc	r19, r25
    1d6a:	50 f4       	brcc	.+20     	; 0x1d80 <__vector_19+0x5e>
    1d6c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1d70:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1d7a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1d7e:	54 c0       	rjmp	.+168    	; 0x1e28 <__vector_19+0x106>
    1d80:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <TIMER0_CTC_CallBack_Periodic>
    1d84:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <TIMER0_CTC_CallBack_Periodic+0x1>
    1d88:	fc 01       	movw	r30, r24
    1d8a:	09 95       	icall
    1d8c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1d90:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1d94:	49 c0       	rjmp	.+146    	; 0x1e28 <__vector_19+0x106>
    1d96:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Global_u8Timer0Interval>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	19 f5       	brne	.+70     	; 0x1de4 <__vector_19+0xc2>
    1d9e:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1da2:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1da6:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <Global_u16NumberOfOverflowsInCTC>
    1daa:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <Global_u16NumberOfOverflowsInCTC+0x1>
    1dae:	28 17       	cp	r18, r24
    1db0:	39 07       	cpc	r19, r25
    1db2:	50 f4       	brcc	.+20     	; 0x1dc8 <__vector_19+0xa6>
    1db4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1db8:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1dc2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1dc6:	30 c0       	rjmp	.+96     	; 0x1e28 <__vector_19+0x106>
    1dc8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <TIMER0_CTC_CallBack_Single>
    1dcc:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <TIMER0_CTC_CallBack_Single+0x1>
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	09 95       	icall
    1dd4:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <copy_u16NumberofOverflows.2006+0x1>
    1dd8:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <copy_u16NumberofOverflows.2006>
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <Timer_voidStopTimer>
    1de2:	22 c0       	rjmp	.+68     	; 0x1e28 <__vector_19+0x106>
    1de4:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <Global_u8PWM_State>
    1de8:	88 23       	and	r24, r24
    1dea:	81 f4       	brne	.+32     	; 0x1e0c <__vector_19+0xea>
    1dec:	2c e5       	ldi	r18, 0x5C	; 92
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Global_u8PWM_Toff>
    1df4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <Global_u8PWM_Toff+0x1>
    1df8:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <Global_u8PWM_Toff+0x2>
    1dfc:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <Global_u8PWM_Toff+0x3>
    1e00:	f9 01       	movw	r30, r18
    1e02:	80 83       	st	Z, r24
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <Global_u8PWM_State>
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <__vector_19+0x106>
    1e0c:	2c e5       	ldi	r18, 0x5C	; 92
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Global_u8PWM_Ton>
    1e14:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Global_u8PWM_Ton+0x1>
    1e18:	a0 91 9e 00 	lds	r26, 0x009E	; 0x80009e <Global_u8PWM_Ton+0x2>
    1e1c:	b0 91 9f 00 	lds	r27, 0x009F	; 0x80009f <Global_u8PWM_Ton+0x3>
    1e20:	f9 01       	movw	r30, r18
    1e22:	80 83       	st	Z, r24
    1e24:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <Global_u8PWM_State>
    1e28:	88 e5       	ldi	r24, 0x58	; 88
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	22 e0       	ldi	r18, 0x02	; 2
    1e2e:	fc 01       	movw	r30, r24
    1e30:	20 83       	st	Z, r18
    1e32:	00 00       	nop
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <__vector_9>:
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	2f 93       	push	r18
    1e6a:	3f 93       	push	r19
    1e6c:	4f 93       	push	r20
    1e6e:	5f 93       	push	r21
    1e70:	6f 93       	push	r22
    1e72:	7f 93       	push	r23
    1e74:	8f 93       	push	r24
    1e76:	9f 93       	push	r25
    1e78:	af 93       	push	r26
    1e7a:	bf 93       	push	r27
    1e7c:	ef 93       	push	r30
    1e7e:	ff 93       	push	r31
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <TIMER0_OV_CallBack>
    1e8c:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <TIMER0_OV_CallBack+0x1>
    1e90:	fc 01       	movw	r30, r24
    1e92:	09 95       	icall
    1e94:	88 e5       	ldi	r24, 0x58	; 88
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	21 e0       	ldi	r18, 0x01	; 1
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	20 83       	st	Z, r18
    1e9e:	00 00       	nop
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	0f 90       	pop	r0
    1ebe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <__vector_8>:
void __vector_8(void)
{
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ed0:	0f 92       	push	r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    TIMER1_OV_CallBack(); 
    1ef4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <TIMER1_OV_CallBack>
    1ef8:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <TIMER1_OV_CallBack+0x1>
    1efc:	fc 01       	movw	r30, r24
    1efe:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV1);
    1f00:	88 e5       	ldi	r24, 0x58	; 88
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	24 e0       	ldi	r18, 0x04	; 4
    1f06:	fc 01       	movw	r30, r24
    1f08:	20 83       	st	Z, r18
}
    1f0a:	00 00       	nop
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <__vector_4>:
void __vector_4(void)
{
    1f34:	1f 92       	push	r1
    1f36:	0f 92       	push	r0
    1f38:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	4f 93       	push	r20
    1f46:	5f 93       	push	r21
    1f48:	6f 93       	push	r22
    1f4a:	7f 93       	push	r23
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	af 93       	push	r26
    1f52:	bf 93       	push	r27
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    TIMER2_OV_CallBack(); 
    1f60:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <TIMER2_OV_CallBack>
    1f64:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <TIMER2_OV_CallBack+0x1>
    1f68:	fc 01       	movw	r30, r24
    1f6a:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV2);
    1f6c:	88 e5       	ldi	r24, 0x58	; 88
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	20 e4       	ldi	r18, 0x40	; 64
    1f72:	fc 01       	movw	r30, r24
    1f74:	20 83       	st	Z, r18
}
    1f76:	00 00       	nop
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	bf 91       	pop	r27
    1f82:	af 91       	pop	r26
    1f84:	9f 91       	pop	r25
    1f86:	8f 91       	pop	r24
    1f88:	7f 91       	pop	r23
    1f8a:	6f 91       	pop	r22
    1f8c:	5f 91       	pop	r21
    1f8e:	4f 91       	pop	r20
    1f90:	3f 91       	pop	r19
    1f92:	2f 91       	pop	r18
    1f94:	0f 90       	pop	r0
    1f96:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1f9a:	0f 90       	pop	r0
    1f9c:	1f 90       	pop	r1
    1f9e:	18 95       	reti

00001fa0 <__vector_5>:
void __vector_5(void)
{
    1fa0:	1f 92       	push	r1
    1fa2:	0f 92       	push	r0
    1fa4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1fa8:	0f 92       	push	r0
    1faa:	11 24       	eor	r1, r1
    1fac:	2f 93       	push	r18
    1fae:	3f 93       	push	r19
    1fb0:	4f 93       	push	r20
    1fb2:	5f 93       	push	r21
    1fb4:	6f 93       	push	r22
    1fb6:	7f 93       	push	r23
    1fb8:	8f 93       	push	r24
    1fba:	9f 93       	push	r25
    1fbc:	af 93       	push	r26
    1fbe:	bf 93       	push	r27
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	TIMER1_IC_Callback();
    1fcc:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <TIMER1_IC_Callback>
    1fd0:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <TIMER1_IC_Callback+0x1>
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	09 95       	icall
    TIM_TIFR=(1<<TIFR_ICF1);
    1fd8:	88 e5       	ldi	r24, 0x58	; 88
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	20 e2       	ldi	r18, 0x20	; 32
    1fde:	fc 01       	movw	r30, r24
    1fe0:	20 83       	st	Z, r18
}
    1fe2:	00 00       	nop
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	bf 91       	pop	r27
    1fee:	af 91       	pop	r26
    1ff0:	9f 91       	pop	r25
    1ff2:	8f 91       	pop	r24
    1ff4:	7f 91       	pop	r23
    1ff6:	6f 91       	pop	r22
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <__vector_11>:
			break ;	
	}
	return LOC_u8Result ; 
}
 void __vector_11(void)	//USART, Rx Complete
{
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2014:	0f 92       	push	r0
    2016:	11 24       	eor	r1, r1
    2018:	2f 93       	push	r18
    201a:	3f 93       	push	r19
    201c:	8f 93       	push	r24
    201e:	9f 93       	push	r25
    2020:	ef 93       	push	r30
    2022:	ff 93       	push	r31
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
	*Global_u8Rx = USART_UDR;
    202c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Global_u8Rx>
    2030:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Global_u8Rx+0x1>
    2034:	2c e2       	ldi	r18, 0x2C	; 44
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	f9 01       	movw	r30, r18
    203a:	20 81       	ld	r18, Z
    203c:	fc 01       	movw	r30, r24
    203e:	20 83       	st	Z, r18
}
    2040:	00 00       	nop
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	ff 91       	pop	r31
    2048:	ef 91       	pop	r30
    204a:	9f 91       	pop	r25
    204c:	8f 91       	pop	r24
    204e:	3f 91       	pop	r19
    2050:	2f 91       	pop	r18
    2052:	0f 90       	pop	r0
    2054:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2058:	0f 90       	pop	r0
    205a:	1f 90       	pop	r1
    205c:	18 95       	reti

0000205e <__vector_13>:

 void __vector_13(void)    //USART, Tx Complete
{
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	2f 93       	push	r18
    206c:	3f 93       	push	r19
    206e:	4f 93       	push	r20
    2070:	5f 93       	push	r21
    2072:	6f 93       	push	r22
    2074:	7f 93       	push	r23
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	Global_TxComplate();
    208a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Global_TxComplate>
    208e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Global_TxComplate+0x1>
    2092:	fc 01       	movw	r30, r24
    2094:	09 95       	icall
}
    2096:	00 00       	nop
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	ff 91       	pop	r31
    209e:	ef 91       	pop	r30
    20a0:	bf 91       	pop	r27
    20a2:	af 91       	pop	r26
    20a4:	9f 91       	pop	r25
    20a6:	8f 91       	pop	r24
    20a8:	7f 91       	pop	r23
    20aa:	6f 91       	pop	r22
    20ac:	5f 91       	pop	r21
    20ae:	4f 91       	pop	r20
    20b0:	3f 91       	pop	r19
    20b2:	2f 91       	pop	r18
    20b4:	0f 90       	pop	r0
    20b6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <__cmpsf2>:
    20c0:	0e 94 4a 11 	call	0x2294	; 0x2294 <__fp_cmp>
    20c4:	08 f4       	brcc	.+2      	; 0x20c8 <__cmpsf2+0x8>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	08 95       	ret

000020ca <__divsf3>:
    20ca:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3x>
    20ce:	0c 94 85 11 	jmp	0x230a	; 0x230a <__fp_round>
    20d2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__fp_pscB>
    20d6:	58 f0       	brcs	.+22     	; 0x20ee <__divsf3+0x24>
    20d8:	0e 94 77 11 	call	0x22ee	; 0x22ee <__fp_pscA>
    20dc:	40 f0       	brcs	.+16     	; 0x20ee <__divsf3+0x24>
    20de:	29 f4       	brne	.+10     	; 0x20ea <__divsf3+0x20>
    20e0:	5f 3f       	cpi	r21, 0xFF	; 255
    20e2:	29 f0       	breq	.+10     	; 0x20ee <__divsf3+0x24>
    20e4:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__fp_inf>
    20e8:	51 11       	cpse	r21, r1
    20ea:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__fp_szero>
    20ee:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__fp_nan>

000020f2 <__divsf3x>:
    20f2:	0e 94 96 11 	call	0x232c	; 0x232c <__fp_split3>
    20f6:	68 f3       	brcs	.-38     	; 0x20d2 <__divsf3+0x8>

000020f8 <__divsf3_pse>:
    20f8:	99 23       	and	r25, r25
    20fa:	b1 f3       	breq	.-20     	; 0x20e8 <__divsf3+0x1e>
    20fc:	55 23       	and	r21, r21
    20fe:	91 f3       	breq	.-28     	; 0x20e4 <__divsf3+0x1a>
    2100:	95 1b       	sub	r25, r21
    2102:	55 0b       	sbc	r21, r21
    2104:	bb 27       	eor	r27, r27
    2106:	aa 27       	eor	r26, r26
    2108:	62 17       	cp	r22, r18
    210a:	73 07       	cpc	r23, r19
    210c:	84 07       	cpc	r24, r20
    210e:	38 f0       	brcs	.+14     	; 0x211e <__divsf3_pse+0x26>
    2110:	9f 5f       	subi	r25, 0xFF	; 255
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	22 0f       	add	r18, r18
    2116:	33 1f       	adc	r19, r19
    2118:	44 1f       	adc	r20, r20
    211a:	aa 1f       	adc	r26, r26
    211c:	a9 f3       	breq	.-22     	; 0x2108 <__divsf3_pse+0x10>
    211e:	35 d0       	rcall	.+106    	; 0x218a <__divsf3_pse+0x92>
    2120:	0e 2e       	mov	r0, r30
    2122:	3a f0       	brmi	.+14     	; 0x2132 <__divsf3_pse+0x3a>
    2124:	e0 e8       	ldi	r30, 0x80	; 128
    2126:	32 d0       	rcall	.+100    	; 0x218c <__divsf3_pse+0x94>
    2128:	91 50       	subi	r25, 0x01	; 1
    212a:	50 40       	sbci	r21, 0x00	; 0
    212c:	e6 95       	lsr	r30
    212e:	00 1c       	adc	r0, r0
    2130:	ca f7       	brpl	.-14     	; 0x2124 <__divsf3_pse+0x2c>
    2132:	2b d0       	rcall	.+86     	; 0x218a <__divsf3_pse+0x92>
    2134:	fe 2f       	mov	r31, r30
    2136:	29 d0       	rcall	.+82     	; 0x218a <__divsf3_pse+0x92>
    2138:	66 0f       	add	r22, r22
    213a:	77 1f       	adc	r23, r23
    213c:	88 1f       	adc	r24, r24
    213e:	bb 1f       	adc	r27, r27
    2140:	26 17       	cp	r18, r22
    2142:	37 07       	cpc	r19, r23
    2144:	48 07       	cpc	r20, r24
    2146:	ab 07       	cpc	r26, r27
    2148:	b0 e8       	ldi	r27, 0x80	; 128
    214a:	09 f0       	breq	.+2      	; 0x214e <__divsf3_pse+0x56>
    214c:	bb 0b       	sbc	r27, r27
    214e:	80 2d       	mov	r24, r0
    2150:	bf 01       	movw	r22, r30
    2152:	ff 27       	eor	r31, r31
    2154:	93 58       	subi	r25, 0x83	; 131
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	3a f0       	brmi	.+14     	; 0x2168 <__divsf3_pse+0x70>
    215a:	9e 3f       	cpi	r25, 0xFE	; 254
    215c:	51 05       	cpc	r21, r1
    215e:	78 f0       	brcs	.+30     	; 0x217e <__divsf3_pse+0x86>
    2160:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__fp_inf>
    2164:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__fp_szero>
    2168:	5f 3f       	cpi	r21, 0xFF	; 255
    216a:	e4 f3       	brlt	.-8      	; 0x2164 <__divsf3_pse+0x6c>
    216c:	98 3e       	cpi	r25, 0xE8	; 232
    216e:	d4 f3       	brlt	.-12     	; 0x2164 <__divsf3_pse+0x6c>
    2170:	86 95       	lsr	r24
    2172:	77 95       	ror	r23
    2174:	67 95       	ror	r22
    2176:	b7 95       	ror	r27
    2178:	f7 95       	ror	r31
    217a:	9f 5f       	subi	r25, 0xFF	; 255
    217c:	c9 f7       	brne	.-14     	; 0x2170 <__divsf3_pse+0x78>
    217e:	88 0f       	add	r24, r24
    2180:	91 1d       	adc	r25, r1
    2182:	96 95       	lsr	r25
    2184:	87 95       	ror	r24
    2186:	97 f9       	bld	r25, 7
    2188:	08 95       	ret
    218a:	e1 e0       	ldi	r30, 0x01	; 1
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	bb 1f       	adc	r27, r27
    2194:	62 17       	cp	r22, r18
    2196:	73 07       	cpc	r23, r19
    2198:	84 07       	cpc	r24, r20
    219a:	ba 07       	cpc	r27, r26
    219c:	20 f0       	brcs	.+8      	; 0x21a6 <__divsf3_pse+0xae>
    219e:	62 1b       	sub	r22, r18
    21a0:	73 0b       	sbc	r23, r19
    21a2:	84 0b       	sbc	r24, r20
    21a4:	ba 0b       	sbc	r27, r26
    21a6:	ee 1f       	adc	r30, r30
    21a8:	88 f7       	brcc	.-30     	; 0x218c <__divsf3_pse+0x94>
    21aa:	e0 95       	com	r30
    21ac:	08 95       	ret

000021ae <__fixsfsi>:
    21ae:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    21b2:	68 94       	set
    21b4:	b1 11       	cpse	r27, r1
    21b6:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__fp_szero>
    21ba:	08 95       	ret

000021bc <__fixunssfsi>:
    21bc:	0e 94 9e 11 	call	0x233c	; 0x233c <__fp_splitA>
    21c0:	88 f0       	brcs	.+34     	; 0x21e4 <__fixunssfsi+0x28>
    21c2:	9f 57       	subi	r25, 0x7F	; 127
    21c4:	98 f0       	brcs	.+38     	; 0x21ec <__fixunssfsi+0x30>
    21c6:	b9 2f       	mov	r27, r25
    21c8:	99 27       	eor	r25, r25
    21ca:	b7 51       	subi	r27, 0x17	; 23
    21cc:	b0 f0       	brcs	.+44     	; 0x21fa <__fixunssfsi+0x3e>
    21ce:	e1 f0       	breq	.+56     	; 0x2208 <__fixunssfsi+0x4c>
    21d0:	66 0f       	add	r22, r22
    21d2:	77 1f       	adc	r23, r23
    21d4:	88 1f       	adc	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	1a f0       	brmi	.+6      	; 0x21e0 <__fixunssfsi+0x24>
    21da:	ba 95       	dec	r27
    21dc:	c9 f7       	brne	.-14     	; 0x21d0 <__fixunssfsi+0x14>
    21de:	14 c0       	rjmp	.+40     	; 0x2208 <__fixunssfsi+0x4c>
    21e0:	b1 30       	cpi	r27, 0x01	; 1
    21e2:	91 f0       	breq	.+36     	; 0x2208 <__fixunssfsi+0x4c>
    21e4:	0e 94 b8 11 	call	0x2370	; 0x2370 <__fp_zero>
    21e8:	b1 e0       	ldi	r27, 0x01	; 1
    21ea:	08 95       	ret
    21ec:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__fp_zero>
    21f0:	67 2f       	mov	r22, r23
    21f2:	78 2f       	mov	r23, r24
    21f4:	88 27       	eor	r24, r24
    21f6:	b8 5f       	subi	r27, 0xF8	; 248
    21f8:	39 f0       	breq	.+14     	; 0x2208 <__fixunssfsi+0x4c>
    21fa:	b9 3f       	cpi	r27, 0xF9	; 249
    21fc:	cc f3       	brlt	.-14     	; 0x21f0 <__fixunssfsi+0x34>
    21fe:	86 95       	lsr	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	b3 95       	inc	r27
    2206:	d9 f7       	brne	.-10     	; 0x21fe <__fixunssfsi+0x42>
    2208:	3e f4       	brtc	.+14     	; 0x2218 <__fixunssfsi+0x5c>
    220a:	90 95       	com	r25
    220c:	80 95       	com	r24
    220e:	70 95       	com	r23
    2210:	61 95       	neg	r22
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	8f 4f       	sbci	r24, 0xFF	; 255
    2216:	9f 4f       	sbci	r25, 0xFF	; 255
    2218:	08 95       	ret

0000221a <__floatunsisf>:
    221a:	e8 94       	clt
    221c:	09 c0       	rjmp	.+18     	; 0x2230 <__floatsisf+0x12>

0000221e <__floatsisf>:
    221e:	97 fb       	bst	r25, 7
    2220:	3e f4       	brtc	.+14     	; 0x2230 <__floatsisf+0x12>
    2222:	90 95       	com	r25
    2224:	80 95       	com	r24
    2226:	70 95       	com	r23
    2228:	61 95       	neg	r22
    222a:	7f 4f       	sbci	r23, 0xFF	; 255
    222c:	8f 4f       	sbci	r24, 0xFF	; 255
    222e:	9f 4f       	sbci	r25, 0xFF	; 255
    2230:	99 23       	and	r25, r25
    2232:	a9 f0       	breq	.+42     	; 0x225e <__floatsisf+0x40>
    2234:	f9 2f       	mov	r31, r25
    2236:	96 e9       	ldi	r25, 0x96	; 150
    2238:	bb 27       	eor	r27, r27
    223a:	93 95       	inc	r25
    223c:	f6 95       	lsr	r31
    223e:	87 95       	ror	r24
    2240:	77 95       	ror	r23
    2242:	67 95       	ror	r22
    2244:	b7 95       	ror	r27
    2246:	f1 11       	cpse	r31, r1
    2248:	f8 cf       	rjmp	.-16     	; 0x223a <__floatsisf+0x1c>
    224a:	fa f4       	brpl	.+62     	; 0x228a <__floatsisf+0x6c>
    224c:	bb 0f       	add	r27, r27
    224e:	11 f4       	brne	.+4      	; 0x2254 <__floatsisf+0x36>
    2250:	60 ff       	sbrs	r22, 0
    2252:	1b c0       	rjmp	.+54     	; 0x228a <__floatsisf+0x6c>
    2254:	6f 5f       	subi	r22, 0xFF	; 255
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	8f 4f       	sbci	r24, 0xFF	; 255
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	16 c0       	rjmp	.+44     	; 0x228a <__floatsisf+0x6c>
    225e:	88 23       	and	r24, r24
    2260:	11 f0       	breq	.+4      	; 0x2266 <__floatsisf+0x48>
    2262:	96 e9       	ldi	r25, 0x96	; 150
    2264:	11 c0       	rjmp	.+34     	; 0x2288 <__floatsisf+0x6a>
    2266:	77 23       	and	r23, r23
    2268:	21 f0       	breq	.+8      	; 0x2272 <__floatsisf+0x54>
    226a:	9e e8       	ldi	r25, 0x8E	; 142
    226c:	87 2f       	mov	r24, r23
    226e:	76 2f       	mov	r23, r22
    2270:	05 c0       	rjmp	.+10     	; 0x227c <__floatsisf+0x5e>
    2272:	66 23       	and	r22, r22
    2274:	71 f0       	breq	.+28     	; 0x2292 <__floatsisf+0x74>
    2276:	96 e8       	ldi	r25, 0x86	; 134
    2278:	86 2f       	mov	r24, r22
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	2a f0       	brmi	.+10     	; 0x228a <__floatsisf+0x6c>
    2280:	9a 95       	dec	r25
    2282:	66 0f       	add	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	da f7       	brpl	.-10     	; 0x2280 <__floatsisf+0x62>
    228a:	88 0f       	add	r24, r24
    228c:	96 95       	lsr	r25
    228e:	87 95       	ror	r24
    2290:	97 f9       	bld	r25, 7
    2292:	08 95       	ret

00002294 <__fp_cmp>:
    2294:	99 0f       	add	r25, r25
    2296:	00 08       	sbc	r0, r0
    2298:	55 0f       	add	r21, r21
    229a:	aa 0b       	sbc	r26, r26
    229c:	e0 e8       	ldi	r30, 0x80	; 128
    229e:	fe ef       	ldi	r31, 0xFE	; 254
    22a0:	16 16       	cp	r1, r22
    22a2:	17 06       	cpc	r1, r23
    22a4:	e8 07       	cpc	r30, r24
    22a6:	f9 07       	cpc	r31, r25
    22a8:	c0 f0       	brcs	.+48     	; 0x22da <__fp_cmp+0x46>
    22aa:	12 16       	cp	r1, r18
    22ac:	13 06       	cpc	r1, r19
    22ae:	e4 07       	cpc	r30, r20
    22b0:	f5 07       	cpc	r31, r21
    22b2:	98 f0       	brcs	.+38     	; 0x22da <__fp_cmp+0x46>
    22b4:	62 1b       	sub	r22, r18
    22b6:	73 0b       	sbc	r23, r19
    22b8:	84 0b       	sbc	r24, r20
    22ba:	95 0b       	sbc	r25, r21
    22bc:	39 f4       	brne	.+14     	; 0x22cc <__fp_cmp+0x38>
    22be:	0a 26       	eor	r0, r26
    22c0:	61 f0       	breq	.+24     	; 0x22da <__fp_cmp+0x46>
    22c2:	23 2b       	or	r18, r19
    22c4:	24 2b       	or	r18, r20
    22c6:	25 2b       	or	r18, r21
    22c8:	21 f4       	brne	.+8      	; 0x22d2 <__fp_cmp+0x3e>
    22ca:	08 95       	ret
    22cc:	0a 26       	eor	r0, r26
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <__fp_cmp+0x3e>
    22d0:	a1 40       	sbci	r26, 0x01	; 1
    22d2:	a6 95       	lsr	r26
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	81 1d       	adc	r24, r1
    22d8:	81 1d       	adc	r24, r1
    22da:	08 95       	ret

000022dc <__fp_inf>:
    22dc:	97 f9       	bld	r25, 7
    22de:	9f 67       	ori	r25, 0x7F	; 127
    22e0:	80 e8       	ldi	r24, 0x80	; 128
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	08 95       	ret

000022e8 <__fp_nan>:
    22e8:	9f ef       	ldi	r25, 0xFF	; 255
    22ea:	80 ec       	ldi	r24, 0xC0	; 192
    22ec:	08 95       	ret

000022ee <__fp_pscA>:
    22ee:	00 24       	eor	r0, r0
    22f0:	0a 94       	dec	r0
    22f2:	16 16       	cp	r1, r22
    22f4:	17 06       	cpc	r1, r23
    22f6:	18 06       	cpc	r1, r24
    22f8:	09 06       	cpc	r0, r25
    22fa:	08 95       	ret

000022fc <__fp_pscB>:
    22fc:	00 24       	eor	r0, r0
    22fe:	0a 94       	dec	r0
    2300:	12 16       	cp	r1, r18
    2302:	13 06       	cpc	r1, r19
    2304:	14 06       	cpc	r1, r20
    2306:	05 06       	cpc	r0, r21
    2308:	08 95       	ret

0000230a <__fp_round>:
    230a:	09 2e       	mov	r0, r25
    230c:	03 94       	inc	r0
    230e:	00 0c       	add	r0, r0
    2310:	11 f4       	brne	.+4      	; 0x2316 <__fp_round+0xc>
    2312:	88 23       	and	r24, r24
    2314:	52 f0       	brmi	.+20     	; 0x232a <__fp_round+0x20>
    2316:	bb 0f       	add	r27, r27
    2318:	40 f4       	brcc	.+16     	; 0x232a <__fp_round+0x20>
    231a:	bf 2b       	or	r27, r31
    231c:	11 f4       	brne	.+4      	; 0x2322 <__fp_round+0x18>
    231e:	60 ff       	sbrs	r22, 0
    2320:	04 c0       	rjmp	.+8      	; 0x232a <__fp_round+0x20>
    2322:	6f 5f       	subi	r22, 0xFF	; 255
    2324:	7f 4f       	sbci	r23, 0xFF	; 255
    2326:	8f 4f       	sbci	r24, 0xFF	; 255
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
    232a:	08 95       	ret

0000232c <__fp_split3>:
    232c:	57 fd       	sbrc	r21, 7
    232e:	90 58       	subi	r25, 0x80	; 128
    2330:	44 0f       	add	r20, r20
    2332:	55 1f       	adc	r21, r21
    2334:	59 f0       	breq	.+22     	; 0x234c <__fp_splitA+0x10>
    2336:	5f 3f       	cpi	r21, 0xFF	; 255
    2338:	71 f0       	breq	.+28     	; 0x2356 <__fp_splitA+0x1a>
    233a:	47 95       	ror	r20

0000233c <__fp_splitA>:
    233c:	88 0f       	add	r24, r24
    233e:	97 fb       	bst	r25, 7
    2340:	99 1f       	adc	r25, r25
    2342:	61 f0       	breq	.+24     	; 0x235c <__fp_splitA+0x20>
    2344:	9f 3f       	cpi	r25, 0xFF	; 255
    2346:	79 f0       	breq	.+30     	; 0x2366 <__fp_splitA+0x2a>
    2348:	87 95       	ror	r24
    234a:	08 95       	ret
    234c:	12 16       	cp	r1, r18
    234e:	13 06       	cpc	r1, r19
    2350:	14 06       	cpc	r1, r20
    2352:	55 1f       	adc	r21, r21
    2354:	f2 cf       	rjmp	.-28     	; 0x233a <__fp_split3+0xe>
    2356:	46 95       	lsr	r20
    2358:	f1 df       	rcall	.-30     	; 0x233c <__fp_splitA>
    235a:	08 c0       	rjmp	.+16     	; 0x236c <__fp_splitA+0x30>
    235c:	16 16       	cp	r1, r22
    235e:	17 06       	cpc	r1, r23
    2360:	18 06       	cpc	r1, r24
    2362:	99 1f       	adc	r25, r25
    2364:	f1 cf       	rjmp	.-30     	; 0x2348 <__fp_splitA+0xc>
    2366:	86 95       	lsr	r24
    2368:	71 05       	cpc	r23, r1
    236a:	61 05       	cpc	r22, r1
    236c:	08 94       	sec
    236e:	08 95       	ret

00002370 <__fp_zero>:
    2370:	e8 94       	clt

00002372 <__fp_szero>:
    2372:	bb 27       	eor	r27, r27
    2374:	66 27       	eor	r22, r22
    2376:	77 27       	eor	r23, r23
    2378:	cb 01       	movw	r24, r22
    237a:	97 f9       	bld	r25, 7
    237c:	08 95       	ret

0000237e <__gesf2>:
    237e:	0e 94 4a 11 	call	0x2294	; 0x2294 <__fp_cmp>
    2382:	08 f4       	brcc	.+2      	; 0x2386 <__gesf2+0x8>
    2384:	8f ef       	ldi	r24, 0xFF	; 255
    2386:	08 95       	ret

00002388 <__mulsf3>:
    2388:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__mulsf3x>
    238c:	0c 94 85 11 	jmp	0x230a	; 0x230a <__fp_round>
    2390:	0e 94 77 11 	call	0x22ee	; 0x22ee <__fp_pscA>
    2394:	38 f0       	brcs	.+14     	; 0x23a4 <__mulsf3+0x1c>
    2396:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__fp_pscB>
    239a:	20 f0       	brcs	.+8      	; 0x23a4 <__mulsf3+0x1c>
    239c:	95 23       	and	r25, r21
    239e:	11 f0       	breq	.+4      	; 0x23a4 <__mulsf3+0x1c>
    23a0:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__fp_inf>
    23a4:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__fp_nan>
    23a8:	11 24       	eor	r1, r1
    23aa:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__fp_szero>

000023ae <__mulsf3x>:
    23ae:	0e 94 96 11 	call	0x232c	; 0x232c <__fp_split3>
    23b2:	70 f3       	brcs	.-36     	; 0x2390 <__mulsf3+0x8>

000023b4 <__mulsf3_pse>:
    23b4:	95 9f       	mul	r25, r21
    23b6:	c1 f3       	breq	.-16     	; 0x23a8 <__mulsf3+0x20>
    23b8:	95 0f       	add	r25, r21
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	55 1f       	adc	r21, r21
    23be:	62 9f       	mul	r22, r18
    23c0:	f0 01       	movw	r30, r0
    23c2:	72 9f       	mul	r23, r18
    23c4:	bb 27       	eor	r27, r27
    23c6:	f0 0d       	add	r31, r0
    23c8:	b1 1d       	adc	r27, r1
    23ca:	63 9f       	mul	r22, r19
    23cc:	aa 27       	eor	r26, r26
    23ce:	f0 0d       	add	r31, r0
    23d0:	b1 1d       	adc	r27, r1
    23d2:	aa 1f       	adc	r26, r26
    23d4:	64 9f       	mul	r22, r20
    23d6:	66 27       	eor	r22, r22
    23d8:	b0 0d       	add	r27, r0
    23da:	a1 1d       	adc	r26, r1
    23dc:	66 1f       	adc	r22, r22
    23de:	82 9f       	mul	r24, r18
    23e0:	22 27       	eor	r18, r18
    23e2:	b0 0d       	add	r27, r0
    23e4:	a1 1d       	adc	r26, r1
    23e6:	62 1f       	adc	r22, r18
    23e8:	73 9f       	mul	r23, r19
    23ea:	b0 0d       	add	r27, r0
    23ec:	a1 1d       	adc	r26, r1
    23ee:	62 1f       	adc	r22, r18
    23f0:	83 9f       	mul	r24, r19
    23f2:	a0 0d       	add	r26, r0
    23f4:	61 1d       	adc	r22, r1
    23f6:	22 1f       	adc	r18, r18
    23f8:	74 9f       	mul	r23, r20
    23fa:	33 27       	eor	r19, r19
    23fc:	a0 0d       	add	r26, r0
    23fe:	61 1d       	adc	r22, r1
    2400:	23 1f       	adc	r18, r19
    2402:	84 9f       	mul	r24, r20
    2404:	60 0d       	add	r22, r0
    2406:	21 1d       	adc	r18, r1
    2408:	82 2f       	mov	r24, r18
    240a:	76 2f       	mov	r23, r22
    240c:	6a 2f       	mov	r22, r26
    240e:	11 24       	eor	r1, r1
    2410:	9f 57       	subi	r25, 0x7F	; 127
    2412:	50 40       	sbci	r21, 0x00	; 0
    2414:	9a f0       	brmi	.+38     	; 0x243c <__mulsf3_pse+0x88>
    2416:	f1 f0       	breq	.+60     	; 0x2454 <__mulsf3_pse+0xa0>
    2418:	88 23       	and	r24, r24
    241a:	4a f0       	brmi	.+18     	; 0x242e <__mulsf3_pse+0x7a>
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	bb 1f       	adc	r27, r27
    2422:	66 1f       	adc	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	88 1f       	adc	r24, r24
    2428:	91 50       	subi	r25, 0x01	; 1
    242a:	50 40       	sbci	r21, 0x00	; 0
    242c:	a9 f7       	brne	.-22     	; 0x2418 <__mulsf3_pse+0x64>
    242e:	9e 3f       	cpi	r25, 0xFE	; 254
    2430:	51 05       	cpc	r21, r1
    2432:	80 f0       	brcs	.+32     	; 0x2454 <__mulsf3_pse+0xa0>
    2434:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__fp_inf>
    2438:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__fp_szero>
    243c:	5f 3f       	cpi	r21, 0xFF	; 255
    243e:	e4 f3       	brlt	.-8      	; 0x2438 <__mulsf3_pse+0x84>
    2440:	98 3e       	cpi	r25, 0xE8	; 232
    2442:	d4 f3       	brlt	.-12     	; 0x2438 <__mulsf3_pse+0x84>
    2444:	86 95       	lsr	r24
    2446:	77 95       	ror	r23
    2448:	67 95       	ror	r22
    244a:	b7 95       	ror	r27
    244c:	f7 95       	ror	r31
    244e:	e7 95       	ror	r30
    2450:	9f 5f       	subi	r25, 0xFF	; 255
    2452:	c1 f7       	brne	.-16     	; 0x2444 <__mulsf3_pse+0x90>
    2454:	fe 2b       	or	r31, r30
    2456:	88 0f       	add	r24, r24
    2458:	91 1d       	adc	r25, r1
    245a:	96 95       	lsr	r25
    245c:	87 95       	ror	r24
    245e:	97 f9       	bld	r25, 7
    2460:	08 95       	ret

00002462 <itoa>:
    2462:	45 32       	cpi	r20, 0x25	; 37
    2464:	51 05       	cpc	r21, r1
    2466:	20 f4       	brcc	.+8      	; 0x2470 <itoa+0xe>
    2468:	42 30       	cpi	r20, 0x02	; 2
    246a:	10 f0       	brcs	.+4      	; 0x2470 <itoa+0xe>
    246c:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__itoa_ncheck>
    2470:	fb 01       	movw	r30, r22
    2472:	10 82       	st	Z, r1
    2474:	cb 01       	movw	r24, r22
    2476:	08 95       	ret

00002478 <__itoa_ncheck>:
    2478:	bb 27       	eor	r27, r27
    247a:	4a 30       	cpi	r20, 0x0A	; 10
    247c:	31 f4       	brne	.+12     	; 0x248a <__itoa_ncheck+0x12>
    247e:	99 23       	and	r25, r25
    2480:	22 f4       	brpl	.+8      	; 0x248a <__itoa_ncheck+0x12>
    2482:	bd e2       	ldi	r27, 0x2D	; 45
    2484:	90 95       	com	r25
    2486:	81 95       	neg	r24
    2488:	9f 4f       	sbci	r25, 0xFF	; 255
    248a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__utoa_common>

0000248e <__utoa_ncheck>:
    248e:	bb 27       	eor	r27, r27

00002490 <__utoa_common>:
    2490:	fb 01       	movw	r30, r22
    2492:	55 27       	eor	r21, r21
    2494:	aa 27       	eor	r26, r26
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	aa 1f       	adc	r26, r26
    249c:	a4 17       	cp	r26, r20
    249e:	10 f0       	brcs	.+4      	; 0x24a4 <__utoa_common+0x14>
    24a0:	a4 1b       	sub	r26, r20
    24a2:	83 95       	inc	r24
    24a4:	50 51       	subi	r21, 0x10	; 16
    24a6:	b9 f7       	brne	.-18     	; 0x2496 <__utoa_common+0x6>
    24a8:	a0 5d       	subi	r26, 0xD0	; 208
    24aa:	aa 33       	cpi	r26, 0x3A	; 58
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <__utoa_common+0x20>
    24ae:	a9 5d       	subi	r26, 0xD9	; 217
    24b0:	a1 93       	st	Z+, r26
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	79 f7       	brne	.-34     	; 0x2494 <__utoa_common+0x4>
    24b6:	b1 11       	cpse	r27, r1
    24b8:	b1 93       	st	Z+, r27
    24ba:	11 92       	st	Z+, r1
    24bc:	cb 01       	movw	r24, r22
    24be:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <strrev>

000024c2 <strrev>:
    24c2:	dc 01       	movw	r26, r24
    24c4:	fc 01       	movw	r30, r24
    24c6:	67 2f       	mov	r22, r23
    24c8:	71 91       	ld	r23, Z+
    24ca:	77 23       	and	r23, r23
    24cc:	e1 f7       	brne	.-8      	; 0x24c6 <strrev+0x4>
    24ce:	32 97       	sbiw	r30, 0x02	; 2
    24d0:	04 c0       	rjmp	.+8      	; 0x24da <strrev+0x18>
    24d2:	7c 91       	ld	r23, X
    24d4:	6d 93       	st	X+, r22
    24d6:	70 83       	st	Z, r23
    24d8:	62 91       	ld	r22, -Z
    24da:	ae 17       	cp	r26, r30
    24dc:	bf 07       	cpc	r27, r31
    24de:	c8 f3       	brcs	.-14     	; 0x24d2 <strrev+0x10>
    24e0:	08 95       	ret

000024e2 <_exit>:
    24e2:	f8 94       	cli

000024e4 <__stop_program>:
    24e4:	ff cf       	rjmp	.-2      	; 0x24e4 <__stop_program>
